{
  "hints": [
    {
      "content": "Start by understanding what it means for an element to be the 'majority' in the array. The majority element is the one that appears more than half the time in the array. Consider how you might count occurrences of each element."
    },
    {
      "content": "Think about how you can efficiently count the occurrences of each element in the array. A simple way to do this is by using a hash map (or dictionary) to store the counts of each number."
    },
    {
      "content": "Remember to consider the size of the array. If the array has an even number of elements, how does that affect the majority element? What if the array is empty or has only one element?"
    },
    {
      "content": "As you count the occurrences, keep track of the maximum count and the corresponding element. This will help you identify the majority element as you iterate through the array."
    },
    {
      "content": "Make sure to handle edge cases, such as when the array is empty. What should your function return in that case? Consider returning a specific value or throwing an error."
    },
    {
      "content": "When you find the element with the maximum count, check if it actually qualifies as the majority element. It should appear more than n/2 times, where n is the length of the array."
    },
    {
      "content": "Consider the scenario where there are multiple elements that could be considered 'majority'. How will you handle ties? Ensure your logic accounts for this."
    },
    {
      "content": "Think about the time complexity of your solution. If you're using a hash map to count occurrences, what is the time complexity for both counting and finding the maximum occurrence?"
    },
    {
      "content": "You might want to write a helper function to encapsulate the logic for counting occurrences. This can make your main function cleaner and easier to understand."
    },
    {
      "content": "Finally, once you have the element with the highest count, implement the check to see if it is indeed the majority. If it is, return that element; otherwise, consider what to return if no majority exists."
    }
  ],
  "questionNotes": [
    "The majority element is defined as the element that appears more than n/2 times in the array.",
    "Consider edge cases such as empty arrays or arrays with a single element.",
    "If there is no majority element, decide on a return value (e.g., null or -1).",
    "The input array may contain both 0s and 1s, but the logic should be generalizable to any integers.",
    "Handle ties appropriately; define what should happen if two elements have the same maximum count."
  ]
}