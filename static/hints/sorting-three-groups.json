{
  "hints": [
    {
      "content": "Start by understanding the requirement for the array to be non-decreasing. This means that for every adjacent pair of elements, the left element must be less than or equal to the right element. Consider what this implies for the elements 1, 2, and 3."
    },
    {
      "content": "Think about how many elements you need to remove to maintain the order. You can visualize the problem as needing to count how many elements are out of place relative to the desired order of 1s, 2s, and 3s."
    },
    {
      "content": "You might want to count the occurrences of each number (1, 2, and 3) in the array. This will help you determine how many of each number you have to work with. Consider using a frequency array or a dictionary."
    },
    {
      "content": "Once you have the counts, think about how to create a non-decreasing sequence. For example, if you have too many 2s or 3s before the 1s, you will need to remove some of them. How would you calculate the excess?"
    },
    {
      "content": "Consider how to handle the transitions between groups. For example, if you have a 3 followed by a 1, you know that at least one of those elements must be removed to maintain the order."
    },
    {
      "content": "Try to visualize the array and mark the positions of elements that need to be removed. This could help you understand the minimum number of operations needed to achieve a sorted array."
    },
    {
      "content": "Think about edge cases, such as when the array is already sorted or when all elements are the same. How would your approach handle these scenarios?"
    },
    {
      "content": "To optimize your solution to O(n), consider how you can traverse the array just once while keeping track of the counts of 1s, 2s, and 3s. What information can you gather in a single pass?"
    },
    {
      "content": "As you iterate through the array, maintain a running total of how many elements you would need to remove to keep the sequence valid. This could involve checking against the counts of previously seen elements."
    },
    {
      "content": "Finally, think about how to calculate the minimum number of removals based on the counts you gathered. You might need to consider the maximum valid subsequence that can be formed with the counts of 1s, 2s, and 3s."
    }
  ],
  "questionNotes": [
    "The array can only contain the integers 1, 2, and 3.",
    "The goal is to make the array non-decreasing with the minimum number of removals.",
    "Constraints: 1 <= nums.length <= 100 and 1 <= nums[i] <= 3.",
    "Consider edge cases where the array is already sorted or consists of a single type of number."
  ]
}