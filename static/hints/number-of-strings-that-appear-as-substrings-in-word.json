{
  "hints": [
    {
      "content": "Start by understanding what a substring is. A substring is a sequence of characters that appears consecutively within another string. For example, in the word 'abc', 'a', 'ab', and 'abc' are all substrings."
    },
    {
      "content": "Consider how you can check if a string from the patterns array is a substring of the word. One way to do this is by using the 'in' operator in Python, which checks for the presence of a substring."
    },
    {
      "content": "Think about how you can iterate through the patterns array. You will need to check each pattern against the word one by one. This means you'll likely use a loop to go through each pattern."
    },
    {
      "content": "Remember that the output should be a count of how many patterns are found in the word. You can initialize a counter variable to keep track of this count as you check each pattern."
    },
    {
      "content": "Pay attention to the constraints: the maximum length of the patterns and the word is 100. This means your solution should be efficient, but you can afford to use simple string operations without worrying about performance."
    },
    {
      "content": "Consider edge cases, such as when the patterns array is empty or when the word is empty. What should your function return in these cases? Think about how you'd handle these scenarios."
    },
    {
      "content": "When counting the patterns, remember that duplicates in the patterns array should be counted separately. For example, if 'a' appears three times in patterns, and 'a' is a substring of the word, you should add 3 to your count."
    },
    {
      "content": "As you implement your solution, make sure to test it against the provided examples. This will help you verify that your logic is correct and that you're handling all cases properly."
    },
    {
      "content": "You might want to use a simple loop to iterate through each pattern and check if it's a substring of the word. For example: \n```python\nfor pattern in patterns:\n    if pattern in word:\n        count += 1\n```"
    },
    {
      "content": "Finally, ensure that your function returns the correct count after checking all patterns. The return statement should be at the end of your function, returning the total count of matching substrings."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= patterns.length <= 100",
    "Constraints: 1 <= patterns[i].length <= 100",
    "Constraints: 1 <= word.length <= 100",
    "patterns[i] and word consist of lowercase English letters.",
    "Duplicates in patterns should be counted separately."
  ]
}