{
  "hints": [
    {
      "content": "Start by understanding the properties of a binary search tree (BST). Remember that in a BST, for any given node, all values in the left subtree are less than the node's value, and all values in the right subtree are greater."
    },
    {
      "content": "To balance the BST, you first need to extract the values from the tree. You can do this using an in-order traversal, which will give you the values in sorted order."
    },
    {
      "content": "Consider how to perform an in-order traversal. You can use recursion or an iterative approach with a stack. The key is to visit the left child, then the node itself, and finally the right child."
    },
    {
      "content": "Once you have the sorted list of node values, think about how to construct a balanced BST from this list. A common approach is to use the middle element of the list as the root of the tree."
    },
    {
      "content": "When constructing the balanced BST, recursively apply the same logic to the left and right halves of the list. This ensures that the tree remains balanced as you build it."
    },
    {
      "content": "Remember to handle edge cases, such as when the input tree has only one node or is already balanced. These cases will not require any changes to the tree structure."
    },
    {
      "content": "Keep in mind the constraints of the problem. You need to ensure that your solution can handle up to 10,000 nodes efficiently. Think about the time complexity of your approach."
    },
    {
      "content": "As you build the new balanced tree, ensure that you maintain the BST properties. Each node's left child should be less than the node, and the right child should be greater."
    },
    {
      "content": "When returning the new balanced BST, you can use any format that represents the tree structure, such as a list or a nested structure. Just ensure it matches the expected output format."
    },
    {
      "content": "You are very close to the solution! To finalize, implement the in-order traversal to gather the values, then recursively build the balanced BST from the sorted values. Make sure to test with various input cases."
    }
  ],
  "questionNotes": [
    "A balanced binary search tree has subtrees that differ in depth by no more than 1.",
    "You can return any valid balanced BST if there are multiple solutions.",
    "Input will be a valid binary search tree with node values in the range [1, 10^5].",
    "The number of nodes in the tree is between 1 and 10^4."
  ]
}