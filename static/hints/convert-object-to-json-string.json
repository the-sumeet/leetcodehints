{
  "hints": [
    {
      "content": "Start by understanding the structure of the object you need to convert. JSON (JavaScript Object Notation) is a format that represents data as key-value pairs. Each key is a string, and the value can be a string, number, object, array, boolean, or null."
    },
    {
      "content": "Consider how you will handle different data types in your object. For instance, strings need to be enclosed in double quotes, while numbers and booleans do not. Make sure to account for these differences when constructing your JSON string."
    },
    {
      "content": "Remember that JSON does not support functions or undefined values. If your object contains these, you'll need to decide how to handle them, possibly by omitting them or converting them to a different format."
    },
    {
      "content": "Think about how to iterate over the properties of your object. You can use a loop to access each key-value pair. For each pair, you will need to format it correctly for JSON."
    },
    {
      "content": "When constructing the JSON string, ensure that you properly handle nested objects and arrays. You will need to recursively convert any nested structures into their JSON representations."
    },
    {
      "content": "Consider edge cases such as empty objects or arrays. An empty object should be represented as '{}' and an empty array as '[]'. Make sure your function can handle these cases without errors."
    },
    {
      "content": "Pay attention to the order of keys in your JSON string. While JSON does not require keys to be in any specific order, maintaining the order of keys from the original object may be important for readability or consistency."
    },
    {
      "content": "You might want to create a helper function to convert individual values to their JSON representation. This function can handle the specific formatting for strings, numbers, booleans, and null values."
    },
    {
      "content": "As you build your JSON string, make sure to add commas between key-value pairs, but avoid adding a trailing comma after the last pair. This is a common mistake that can lead to invalid JSON."
    },
    {
      "content": "Finally, ensure that your function returns the complete JSON string. You should be close to the solution now; just remember to test your function with various objects to confirm it handles all cases correctly."
    }
  ],
  "questionNotes": [
    "The input is an object that can contain various data types.",
    "Ensure proper formatting for strings, numbers, booleans, and null.",
    "Handle nested objects and arrays by recursively converting them.",
    "Consider edge cases like empty objects and arrays."
  ]
}