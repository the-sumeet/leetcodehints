{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of transactions, each with a unique transaction ID, customer ID, transaction date, and amount. Think about how you can group these transactions by customer."
    },
    {
      "content": "Consider how to convert the transaction dates into a format that allows you to easily identify consecutive days. You might want to use a date library or convert the dates into a numerical format like timestamps."
    },
    {
      "content": "Once you have grouped transactions by customer, sort each customer's transactions by date. This will help you to easily check for consecutive days."
    },
    {
      "content": "To find consecutive days, you can iterate through each customer's sorted transaction dates and check if the difference between consecutive dates is exactly one day."
    },
    {
      "content": "Think about how to keep track of the maximum number of consecutive transaction days for each customer. You might want to use a counter that resets when you find a gap in the dates."
    },
    {
      "content": "When you find a sequence of consecutive days, compare its length to the maximum length you've recorded for that customer. Update the maximum if the current sequence is longer."
    },
    {
      "content": "Consider edge cases such as customers with only one transaction or customers with transactions that do not occur on consecutive days. How will your logic handle these scenarios?"
    },
    {
      "content": "After processing all customers, you will need to determine which customer(s) have the maximum number of consecutive transaction days. Think about how to store and compare these maximums."
    },
    {
      "content": "If multiple customers have the same maximum number of consecutive days, you'll need a strategy to handle ties. Decide if you want to return all of them or just one."
    },
    {
      "content": "Remember to format your output correctly. You may need to return the customer IDs in a specific format, such as a list or a single value."
    },
    {
      "content": "Consider the performance of your solution. How will the time complexity of your approach scale with a large number of transactions? Aim for an efficient solution."
    },
    {
      "content": "Make sure to test your solution with various scenarios, including edge cases like leap years or transactions that span multiple months."
    },
    {
      "content": "You might want to create helper functions to break down the problem into smaller, manageable parts. For example, a function to check for consecutive days could be useful."
    },
    {
      "content": "As you finalize your approach, think about the data structures you are using. A dictionary to map customer IDs to their consecutive transaction counts could be helpful."
    },
    {
      "content": "Before writing the final implementation, outline your main steps clearly. This will help you stay organized and ensure you don't miss any important logic."
    }
  ],
  "questionNotes": [
    "Input data consists of transaction records with unique transaction IDs.",
    "Transactions are associated with a customer ID and a date.",
    "Dates need to be checked for consecutive days.",
    "Handle edge cases such as single transactions or non-consecutive transactions.",
    "Output should include customer IDs with the maximum number of consecutive days.",
    "Consider performance and scalability of your solution."
  ]
}