{
  "hints": [
    {
      "content": "Start by understanding the problem requirements. You need to find unique combinations of numbers from the 'candidates' list that sum up to the 'target'. Remember that each number can only be used once in each combination."
    },
    {
      "content": "Consider how to handle duplicates in the 'candidates' list. Since you need unique combinations, think about how you can avoid using the same number multiple times in the same combination."
    },
    {
      "content": "A common approach to this problem is to use backtracking. You can explore combinations by adding a candidate to the current combination and recursively checking if you can reach the target from there."
    },
    {
      "content": "When implementing backtracking, think about how to manage the current index. You should start from the current index and move forward to avoid using the same number again."
    },
    {
      "content": "Before diving into the backtracking, sort the 'candidates' list. This will help in easily skipping duplicates and also make it easier to manage the combinations."
    },
    {
      "content": "While exploring combinations, if you find a candidate that exceeds the remaining target, you can break out of the loop early. This is because the candidates are sorted, and any subsequent candidates will also exceed the target."
    },
    {
      "content": "Make sure to handle the base case in your backtracking function. If the remaining target is zero, you have found a valid combination, and you should add it to your results."
    },
    {
      "content": "As you explore candidates, skip over duplicates to ensure that you do not generate the same combination multiple times. This can be done by checking if the current candidate is the same as the previous one."
    },
    {
      "content": "Think about how to structure your result. You will likely want to store combinations in a list and ensure that you only add unique combinations when you reach the base case."
    },
    {
      "content": "Finally, remember to return the result in the required format. Your final output should be a list of lists, where each inner list represents a unique combination that sums to the target."
    }
  ],
  "questionNotes": [
    "Each candidate may only be used once in a combination.",
    "The solution set must not contain duplicate combinations.",
    "Input constraints: 1 <= candidates.length <= 100, 1 <= candidates[i] <= 50, 1 <= target <= 30."
  ]
}