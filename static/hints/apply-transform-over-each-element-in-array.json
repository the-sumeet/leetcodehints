{
  "hints": [
    {
      "content": "Start by understanding the structure of the problem. You need to create a new array where each element is derived from the original array using a provided function. Think about how you would iterate through the elements of the array."
    },
    {
      "content": "Remember that you cannot use the built-in `Array.map` method. You'll need to implement your own way to transform each element. Consider using a simple loop to go through each index of the array."
    },
    {
      "content": "As you loop through the original array, think about how to access both the element and its index. You'll need to pass both of these to the function `fn` that you are provided."
    },
    {
      "content": "When creating the new array, make sure to initialize it properly. You can declare an empty array at the beginning and then fill it with the transformed values as you iterate through the original array."
    },
    {
      "content": "Consider edge cases, such as when the input array is empty. What should your function return in that case? Think about how your loop will handle an array of length 0."
    },
    {
      "content": "Make sure to handle the transformation correctly. The function `fn` may take two parameters: the element and its index. Ensure you are calling it properly within your loop."
    },
    {
      "content": "As you build the new array, remember that JavaScript arrays are 0-indexed. This means the first element is at index 0, the second at index 1, and so on. Make sure your indexing aligns with this."
    },
    {
      "content": "You might want to use a `for` loop or a `while` loop to iterate through the array. Think about which one would be more straightforward for your implementation."
    },
    {
      "content": "After you have constructed the new array, donâ€™t forget to return it. This is crucial as your function needs to output the transformed array as specified in the problem statement."
    },
    {
      "content": "Finally, ensure your function handles all types of inputs correctly. Test your implementation with various functions for `fn`, including those that may return constant values or depend on both the element and the index."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= arr.length <= 1000",
    "-10^9 <= arr[i] <= 10^9",
    "fn returns an integer.",
    "The returned array must be created such that returnedArray[i] = fn(arr[i], i)."
  ]
}