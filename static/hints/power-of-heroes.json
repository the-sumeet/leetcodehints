{
  "hints": [
    {
      "content": "Start by understanding the definition of the power of a group of heroes. The power is calculated using the maximum and minimum strengths in the group. Make sure to grasp how these values are derived from the selected indices."
    },
    {
      "content": "Consider the simplest case where the input array has only one hero. What is the power of that single hero? This will help you understand the base case."
    },
    {
      "content": "Think about how you can generate all non-empty groups of heroes. For an array of length n, how many groups can you form? This is related to the concept of subsets."
    },
    {
      "content": "Remember that the number of non-empty subsets of an array of size n is 2^n - 1. How does this relate to your need to compute the power for each group?"
    },
    {
      "content": "Instead of generating all groups explicitly, consider how you can calculate the contribution of each hero to the total power. Each hero will serve as the maximum in several groups."
    },
    {
      "content": "For each hero, you need to determine how many groups it can be the maximum. Think about how you can use sorting to simplify this process."
    },
    {
      "content": "Once you have sorted the array, consider how to find the range of indices where a hero can be the maximum. This will help you count how many times it contributes to the total power."
    },
    {
      "content": "For a given hero at index i, if it is the maximum, how do you determine the minimum hero in the group? This will involve considering the heroes to the left and right of the maximum."
    },
    {
      "content": "Think about how to efficiently calculate the contribution of each hero when it is the maximum. You can use combinatorial counting to find how many valid groups include this hero."
    },
    {
      "content": "Don't forget to account for the modulo operation as specified in the problem. This is important to ensure that your results fit within the required limits."
    },
    {
      "content": "When calculating contributions, consider using a stack to maintain potential minimum values as you iterate through the sorted array. This can help you efficiently find the minimum for each maximum."
    },
    {
      "content": "As you build your solution, keep track of the total power contribution for each hero. How will you sum these contributions together?"
    },
    {
      "content": "Make sure to handle edge cases, such as when all heroes have the same strength. How will this affect the calculation of power for groups?"
    },
    {
      "content": "Consider the time complexity of your approach. Aim for a solution that is efficient enough to handle the upper limits of the input constraints."
    },
    {
      "content": "Finally, think about how you will structure your code to implement the logic you've developed. What functions or classes might you need to define?"
    }
  ],
  "questionNotes": [
    "The input array is 0-indexed.",
    "The power of a group is defined using both the maximum and minimum strengths.",
    "The result must be returned modulo 10^9 + 7.",
    "Constraints: 1 <= nums.length <= 10^5 and 1 <= nums[i] <= 10^9.",
    "Consider the efficiency of your solution given the input size."
  ]
}