{
  "hints": [
    {
      "content": "Start by understanding how promises work in JavaScript. A promise represents the eventual completion (or failure) of an asynchronous operation and its resulting value."
    },
    {
      "content": "Remember that both `promise1` and `promise2` will resolve with numbers. You need to handle the resolution of both promises before you can perform any operations on the values they provide."
    },
    {
      "content": "You can use the `Promise.all()` method to wait for multiple promises to resolve. This method takes an array of promises and returns a single promise that resolves when all of the promises in the array have resolved."
    },
    {
      "content": "Think about how you can use the results from `Promise.all()`. It resolves with an array containing the resolved values of the input promises, which you can then access by their index."
    },
    {
      "content": "Once you have the resolved values from both promises, you can simply add them together. Consider how you will handle the array returned by `Promise.all()` to extract the numbers."
    },
    {
      "content": "Make sure to handle any potential errors. While the problem guarantees that both promises will resolve with numbers, it's good practice to consider what might happen if they reject."
    },
    {
      "content": "You can create the new promise by returning a promise that resolves with the sum of the two numbers. Ensure that you are returning the correct value from your function."
    },
    {
      "content": "Consider edge cases, such as when one or both promises resolve to zero or negative numbers. Your implementation should still correctly add these values."
    },
    {
      "content": "When implementing your solution, remember that the timing of the promise resolution does not affect the correctness of your output. Focus on the values returned by the promises."
    },
    {
      "content": "To finalize your solution, structure your code to return a new promise that resolves with the sum of the values from `promise1` and `promise2`. Use `Promise.all()` to achieve this."
    }
  ],
  "questionNotes": [
    "Both promise1 and promise2 will resolve with a number.",
    "The returned promise should resolve with the sum of the two numbers.",
    "The timing of promise resolution is not judged for this problem."
  ]
}