{
  "hints": [
    {
      "content": "Start by thinking about how you can keep track of the characters you've seen so far. A common approach is to use a data structure that allows for fast lookups, such as a set or a dictionary."
    },
    {
      "content": "Consider how you would iterate through the string. You might want to use two pointers: one to mark the start of the current substring and another to explore the string."
    },
    {
      "content": "As you iterate, if you encounter a character that is already in your set of seen characters, you will need to move the start pointer to the right. Think about how you can efficiently update the start pointer."
    },
    {
      "content": "When you find a repeating character, how will you know where to move the start pointer? You may want to keep track of the last index of each character you encounter."
    },
    {
      "content": "Make sure to update the maximum length of the substring whenever you find a new character that extends your current substring. This will help you keep track of the longest substring found so far."
    },
    {
      "content": "Don't forget to handle edge cases, such as an empty string. What should your function return in that case? Think about the constraints given in the problem."
    },
    {
      "content": "You might want to use a dictionary to store the last index of each character. This way, when you find a duplicate, you can skip directly to the index after the last occurrence of that character."
    },
    {
      "content": "As you implement your solution, consider the time complexity. Can you achieve this in linear time? Think about how your two-pointer approach can help with that."
    },
    {
      "content": "Remember to initialize your maximum length variable correctly before starting the iteration. You should also reset your set of seen characters as needed when you move the start pointer."
    },
    {
      "content": "Once you have your implementation working, test it with various inputs, including edge cases like strings with all unique characters, all duplicates, and mixed characters. This will ensure your solution is robust."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= s.length <= 5 * 10^4",
    "s consists of English letters, digits, symbols, and spaces.",
    "The answer must be a substring, not a subsequence.",
    "Return the length of the longest substring without repeating characters."
  ]
}