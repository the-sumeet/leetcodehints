{
  "hints": [
    {
      "content": "Start by understanding the relationship between the two elements in the array. You need to find indices `i` and `j` such that `arr[i]` is equal to `2 * arr[j]`. This means for every element, you need to check if its half exists in the array."
    },
    {
      "content": "Consider how you might iterate through the array. You will need a nested loop to check each element against every other element. Remember that `i` and `j` must be different indices."
    },
    {
      "content": "Think about edge cases, such as when the array has negative numbers or zeros. How will these affect your checks for `arr[i]` being double `arr[j]`? For example, `arr[j]` can be zero, but `arr[i]` cannot be zero if you are looking for a double."
    },
    {
      "content": "Instead of using nested loops, consider using a set to store the elements of the array. This can help you quickly check if the half of any element exists in the array."
    },
    {
      "content": "When using a set, remember to handle the case where you are checking for `arr[i]`. If `arr[i]` is negative, what does that imply for `arr[j]`? Ensure you are only checking valid values."
    },
    {
      "content": "As you iterate through the array, for each element `arr[i]`, you can compute `arr[i] / 2` and check if this value exists in your set. Make sure to account for integer division if you're working with integers."
    },
    {
      "content": "Keep in mind the constraints provided in the problem. The array length is between 2 and 500, and the values range from -1000 to 1000. This means your solution should be efficient enough to handle the upper limits."
    },
    {
      "content": "Remember that you need to return `true` or `false` based on whether such indices exist. Think about how you will structure your return statement once you find a valid pair."
    },
    {
      "content": "Before finalizing your solution, consider how to handle cases where the same number appears multiple times in the array. For example, if `arr[i]` and `arr[j]` are the same number, how will that affect your checks?"
    },
    {
      "content": "You are very close to the solution! To finalize, implement the logic where you iterate through the array, check for each element if its double exists in the set, and ensure you are checking the indices correctly."
    }
  ],
  "questionNotes": [
    "You need to find indices i and j such that i != j.",
    "0 <= i, j < arr.length.",
    "arr[i] must equal 2 * arr[j].",
    "Consider edge cases with negative numbers and zeros.",
    "Array length is between 2 and 500.",
    "Array values range from -1000 to 1000."
  ]
}