{
  "hints": [
    {
      "content": "Start by sorting the `products` array lexicographically. This will help you easily find the three smallest products that match the prefix during each step of the search."
    },
    {
      "content": "Consider how you will build the prefix as you iterate through each character of `searchWord`. You can use a simple loop to construct the prefix incrementally."
    },
    {
      "content": "For each character typed, filter the sorted `products` list to find those that start with the current prefix. You can use a method like `startswith()` to check for matches."
    },
    {
      "content": "Remember that you only need to return up to three suggestions. After filtering, you can slice the list to get the first three elements."
    },
    {
      "content": "Think about how you will store the results for each step. You might want to use a list of lists to keep track of suggestions after each character."
    },
    {
      "content": "Edge cases are important! Consider scenarios where no products match the prefix at all. What should you return in that case?"
    },
    {
      "content": "When filtering products, ensure that you maintain the order of the original `products` list. Sorting them initially helps with this, but confirm your filtering logic is correct."
    },
    {
      "content": "As you build your solution, test it with various inputs, including those with only one product or very long product names. This will help you identify any potential issues."
    },
    {
      "content": "Make sure to handle the case where the `searchWord` is empty. What should your output look like in this scenario?"
    },
    {
      "content": "Finally, your function should return a list of lists containing the suggestions after each character is typed. Ensure that your output format matches the requirements exactly."
    }
  ],
  "questionNotes": [
    "Products must be sorted lexicographically before processing.",
    "Return at most three suggestions for each prefix.",
    "If no products match, return an empty list for that step.",
    "All products are unique and consist of lowercase English letters."
  ]
}