{
  "hints": [
    {
      "content": "Consider the properties of sorting algorithms. You need an algorithm that can achieve O(n log n) time complexity. Have you thought about using a comparison-based sorting algorithm?"
    },
    {
      "content": "Remember that you cannot use built-in sorting functions. This means you will need to implement a sorting algorithm from scratch. Which algorithms can you think of that fit the time complexity requirement?"
    },
    {
      "content": "Take a moment to think about the space complexity of your sorting algorithm. Some algorithms like Merge Sort use additional space, while others like Quick Sort can be implemented in-place. Which would you prefer to use?"
    },
    {
      "content": "If you choose Quick Sort, consider how you will select a pivot. The choice of pivot can greatly affect the performance of the algorithm, especially with certain input patterns. What strategies can you use for pivot selection?"
    },
    {
      "content": "When implementing your sorting algorithm, make sure to handle edge cases. For example, what will your algorithm do if the input array is already sorted, or if it contains duplicate values?"
    },
    {
      "content": "Think about the partitioning step in Quick Sort. You will need to rearrange elements around the pivot. How will you ensure that all elements less than the pivot are on one side and all greater are on the other?"
    },
    {
      "content": "As you implement your sorting algorithm, remember to test it with various input cases, including edge cases like an empty array or an array with one element. What do you expect the output to be for these cases?"
    },
    {
      "content": "When you finish implementing your sorting algorithm, validate its correctness by checking if the output is indeed sorted. Consider writing a helper function to verify that the array is sorted after your algorithm runs."
    },
    {
      "content": "If you're using Quick Sort, ensure that you handle the base case correctly. When should your recursive calls stop? Think about the conditions under which an array is considered sorted."
    },
    {
      "content": "As a final step, ensure your implementation adheres to the constraints given in the problem statement. Specifically, check that your algorithm can handle the maximum array length and the range of integer values specified."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 5 * 10^4",
    "-5 * 10^4 <= nums[i] <= 5 * 10^4",
    "You must sort the array in ascending order without using built-in functions.",
    "Aim for O(n log n) time complexity and the smallest space complexity possible.",
    "The output must be a sorted array, and the input may contain duplicate values."
  ]
}