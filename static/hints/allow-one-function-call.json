{
  "hints": [
    {
      "content": "Start by thinking about how to create a new function that wraps around the original function `fn`. This new function will need to keep track of whether `fn` has been called already."
    },
    {
      "content": "Consider using a variable to store the result of the first call to `fn`. This way, you can return this result on the first invocation of the new function."
    },
    {
      "content": "Think about how you can use a boolean flag to track whether `fn` has been called. This flag can be set to `true` after the first call."
    },
    {
      "content": "Remember that the new function should return `undefined` on subsequent calls after the first one. Make sure to handle this in your logic."
    },
    {
      "content": "When you define the new function, ensure it accepts the same parameters as `fn`. You will need to pass these parameters to `fn` when it is called."
    },
    {
      "content": "Consider edge cases, such as what happens if `fn` is called with different arguments after the first call. The result should always be the same for the first call, regardless of the arguments."
    },
    {
      "content": "You might want to test your function with various inputs to ensure it behaves correctly. For example, check what happens if `fn` returns a value that is falsy (like `0` or `null`)."
    },
    {
      "content": "Think about how you will structure your function to ensure it is clean and readable. Using closures can help you maintain the state of whether `fn` has been called."
    },
    {
      "content": "As a final step, ensure that your implementation adheres to the constraints provided in the problem. For instance, ensure that the function can handle the maximum number of calls and parameters specified."
    },
    {
      "content": "Now, you can start implementing the function. Remember to return a new function that checks the call count and either executes `fn` or returns `undefined` based on that."
    }
  ],
  "questionNotes": [
    "The returned function must call `fn` at most once.",
    "The first call should return the result of `fn`, while subsequent calls must return `undefined`.",
    "Ensure the new function accepts the same parameters as `fn`.",
    "Consider edge cases where `fn` might return falsy values.",
    "The constraints specify a valid JSON array for `calls`, with limits on length and size."
  ]
}