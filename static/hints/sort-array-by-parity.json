{
  "hints": [
    {
      "content": "First, consider the properties of even and odd numbers. An even number is any integer that can be divided by 2 without a remainder, while an odd number has a remainder of 1 when divided by 2. Think about how you can identify these numbers in the array."
    },
    {
      "content": "You can iterate through the array to check each number. Use a simple loop to go through each element in `nums` and determine if it's even or odd using the modulus operator `%`."
    },
    {
      "content": "As you identify even and odd numbers, think about how you want to store them. You could use two separate lists: one for even numbers and one for odd numbers. This way, you can easily combine them later."
    },
    {
      "content": "Remember that you need to maintain the order of even and odd numbers as they appear in the original array. This means that when you combine the two lists, the order of elements in each list should remain unchanged."
    },
    {
      "content": "Consider edge cases, such as when all numbers are even or all are odd. What should your function return in these cases? Ensure your solution handles these scenarios correctly."
    },
    {
      "content": "You might want to think about optimizing your solution. Instead of using extra space for two separate lists, can you rearrange the elements in the original array? This could save memory."
    },
    {
      "content": "If you decide to rearrange the elements in place, think about using a two-pointer technique. One pointer can track the position of the last even number found, while the other pointer goes through the array."
    },
    {
      "content": "As you implement the two-pointer technique, ensure that you swap elements when you find an odd number in the even section. This will help you move all even numbers to the front while maintaining their order."
    },
    {
      "content": "Test your solution with various inputs, including arrays with only one element, all even numbers, and all odd numbers. This will help you confirm that your solution works for all edge cases."
    },
    {
      "content": "Finally, make sure your function returns the modified array. It can be helpful to print the array at different stages of your algorithm to debug and ensure that even numbers are correctly positioned."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 5000",
    "Each number in nums is between 0 and 5000.",
    "The output can be in any order as long as all even numbers precede odd numbers.",
    "Consider the efficiency of your solution, especially with larger arrays."
  ]
}