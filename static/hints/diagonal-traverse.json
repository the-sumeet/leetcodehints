{
  "hints": [
    {
      "content": "Start by understanding the concept of diagonal traversal. In a matrix, elements are traversed diagonally, which means you will be moving in a zigzag pattern. The first element of each diagonal starts from the first row or the last column."
    },
    {
      "content": "Consider how to identify the direction of traversal. You will alternate between moving upwards and downwards through the diagonals. For example, moving from the top-left to bottom-right is one direction, while moving from bottom-left to top-right is the other."
    },
    {
      "content": "Think about how to determine the starting points for each diagonal. The first element of each diagonal can be found by iterating through the first row and the last column. This gives you all the starting points."
    },
    {
      "content": "When you reach the bounds of the matrix while traversing diagonally, you need to switch directions. Make sure to handle the cases when you hit the top row or the first column as well as the last row or the last column."
    },
    {
      "content": "As you traverse, keep track of the elements in a list. You can append elements to this list as you visit them. This will be your final output array."
    },
    {
      "content": "Remember to handle edge cases, such as when the matrix has only one row or one column. How would your traversal logic change in these scenarios?"
    },
    {
      "content": "While implementing, consider using two pointers: one for the row index and one for the column index. This will help you navigate through the matrix effectively."
    },
    {
      "content": "You may want to use a boolean flag to indicate the current direction of traversal (up or down). This will help you easily switch directions when you reach the boundaries."
    },
    {
      "content": "Make sure to test your solution with various matrix sizes and values, especially edge cases like empty matrices or matrices with a single element."
    },
    {
      "content": "Finally, implement the traversal logic. Start from the first element, use your pointers to navigate through the matrix, and append elements to your result list based on the current direction."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= m, n <= 10^4 and 1 <= m * n <= 10^4",
    "Element values are between -10^5 and 10^5.",
    "Ensure correct handling of matrix bounds during traversal.",
    "The output should be a single list containing all elements in diagonal order."
  ]
}