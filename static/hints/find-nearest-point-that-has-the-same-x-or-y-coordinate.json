{
  "hints": [
    {
      "content": "Start by understanding the concept of Manhattan distance. It is calculated as `abs(x1 - x2) + abs(y1 - y2)`. This will help you determine how to find the closest point."
    },
    {
      "content": "Remember that a point is valid if it shares either the same x-coordinate or the same y-coordinate as your current location `(x, y)`. Make sure to check both conditions for each point."
    },
    {
      "content": "As you iterate through the `points` array, keep track of the valid points. You can use a simple list or just store the index of valid points."
    },
    {
      "content": "When calculating the Manhattan distance for valid points, store both the distance and the index of the point. This will help you later when you need to determine the smallest distance and handle ties."
    },
    {
      "content": "If you find multiple valid points with the same smallest distance, remember to return the one with the smallest index. This is crucial for correct output."
    },
    {
      "content": "Consider edge cases: What happens if there are no valid points? Make sure your solution can handle this by returning -1."
    },
    {
      "content": "Also, think about the situation where the current location `(x, y)` coincides with one of the points in the array. This point should be considered valid and could potentially be the closest point."
    },
    {
      "content": "You might want to initialize a variable to hold the minimum distance and another to track the index of the closest valid point. This will help you easily compare distances."
    },
    {
      "content": "As you loop through the points, update your minimum distance and index whenever you find a valid point with a smaller distance. Ensure to check for ties with the index."
    },
    {
      "content": "Finally, ensure that your function returns the correct index of the closest valid point or -1 if none exist. This is the last step before completing your solution!"
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= points.length <= 10^4",
    "points[i].length == 2",
    "1 <= x, y, ai, bi <= 10^4",
    "Return the index (0-indexed) of the valid point with the smallest Manhattan distance.",
    "If there are multiple valid points with the same distance, return the one with the smallest index.",
    "Return -1 if there are no valid points."
  ]
}