{
  "hints": [
    {
      "content": "Start by understanding the problem: you need to find the smallest enclosing polygon (convex hull) that can contain all the given points. Familiarize yourself with basic geometric concepts like points, edges, and polygons."
    },
    {
      "content": "Consider the properties of a convex hull. It is formed by the outermost points of a set. Think about how you can identify these outer points among the given coordinates."
    },
    {
      "content": "A common algorithm to find the convex hull is the Graham scan or Andrew's monotone chain algorithm. Research these algorithms and understand how they work with sorting and orientation of points."
    },
    {
      "content": "To implement the convex hull, you will need to sort the points. Make sure to handle cases where points have the same coordinates or lie on the same line."
    },
    {
      "content": "When sorting points, you can use the y-coordinate as the primary key and x-coordinate as the secondary key. This ensures a consistent order for points that are vertically aligned."
    },
    {
      "content": "As you build the hull, remember to check the orientation of the triplet formed by the points. You can use the cross product to determine whether you are making a left turn or a right turn."
    },
    {
      "content": "Don't forget to handle edge cases, such as when all points are collinear or when there are fewer than three points. What should your output be in these cases?"
    },
    {
      "content": "Think about how to store the points that are part of the convex hull. You might want to use a list or a set to keep track of these points as you build the hull."
    },
    {
      "content": "After constructing the convex hull, consider how to return the result. The problem may require you to return the points in a specific format, such as a list of coordinates."
    },
    {
      "content": "If you encounter duplicate points in your input, ensure that your algorithm can handle them correctly. You may need to filter out duplicates before processing."
    },
    {
      "content": "As you implement your solution, think about the time complexity. Sorting the points takes O(n log n), and constructing the hull takes O(n). Ensure your overall solution is efficient."
    },
    {
      "content": "Consider the implications of the input size. If you have a large number of points, how will your algorithm perform? Are there optimizations you can implement?"
    },
    {
      "content": "Make sure to test your implementation with various test cases, including edge cases like all points being the same, points forming a straight line, and points forming a perfect square."
    },
    {
      "content": "As you finalize your solution, ensure you are correctly handling the return format. The output should match the expected format specified in the problem statement."
    },
    {
      "content": "You are almost there! Remember to review your code for any off-by-one errors or logical mistakes, especially in the loop conditions when constructing the hull."
    }
  ],
  "questionNotes": [
    "Constraints: The input will consist of a list of points, each represented as a pair of integers.",
    "Indexing: Points are provided in a 0-indexed format.",
    "Uniqueness: Ensure that the points are unique; if duplicates exist, handle them appropriately.",
    "Tie-breaking: When sorting points, use y-coordinate first and x-coordinate second to maintain order.",
    "Return format: The output should be a list of coordinates representing the convex hull."
  ]
}