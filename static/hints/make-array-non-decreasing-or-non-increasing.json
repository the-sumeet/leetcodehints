{
  "hints": [
    {
      "content": "Start by understanding what it means for an array to be non-decreasing or non-increasing. A non-decreasing array means that for every pair of adjacent elements, the left one is less than or equal to the right one."
    },
    {
      "content": "Consider the implications of modifying elements in the array. You can change any element to any value, but think about how many changes you might need to make to achieve a non-decreasing or non-increasing order."
    },
    {
      "content": "Think about the different ways to approach this problem. You might want to explore both the non-decreasing and non-increasing scenarios separately."
    },
    {
      "content": "Identify the key operations you can perform on the array. For instance, can you iterate through the array and compare each element with the next one?"
    },
    {
      "content": "As you iterate, keep track of how many changes you need to make to maintain the desired order. This will help you determine if the current approach is efficient."
    },
    {
      "content": "Consider edge cases, such as arrays that are already sorted or arrays with all identical elements. How do these cases affect your logic?"
    },
    {
      "content": "You might want to maintain a count of changes needed for both the non-decreasing and non-increasing scenarios. This could help you decide which option requires fewer changes."
    },
    {
      "content": "When counting changes, think about using a loop to compare each element with its neighbor. If the order is violated, increment your change counter."
    },
    {
      "content": "Make sure to handle the case where the array has only one element. What does that imply for the non-decreasing and non-increasing conditions?"
    },
    {
      "content": "Consider how you will return the result. Are you just returning the minimum number of changes needed, or do you need to return the modified array as well?"
    },
    {
      "content": "Think about how you can optimize your solution. Are there any data structures or algorithms that can help you reduce the time complexity?"
    },
    {
      "content": "You might want to implement a helper function to check if an array is non-decreasing or non-increasing. This can help you test your logic more easily."
    },
    {
      "content": "As you refine your solution, consider edge cases like large arrays or arrays with negative numbers. How does this affect your logic?"
    },
    {
      "content": "Remember to validate your final solution against various test cases, including those with duplicate values and those that are already sorted."
    },
    {
      "content": "Finally, think about the overall complexity of your approach. Is it linear, quadratic, or something else? Aim for the most efficient solution possible."
    }
  ],
  "questionNotes": [
    "You can modify any element to any value.",
    "The array can contain duplicate values.",
    "Consider edge cases like empty arrays or arrays with one element.",
    "Return the minimum number of changes needed to make the array non-decreasing or non-increasing."
  ]
}