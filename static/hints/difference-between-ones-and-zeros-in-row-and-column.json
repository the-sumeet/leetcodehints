{
  "hints": [
    {
      "content": "Start by understanding how to count the number of ones and zeros in each row and column of the matrix. You can use two separate arrays: one for rows and one for columns."
    },
    {
      "content": "Remember that the number of zeros in a row can be calculated as the total number of columns minus the number of ones in that row. This will help you avoid counting zeros directly."
    },
    {
      "content": "To create the difference matrix, you need to iterate through each cell in the original grid. For each cell at position (i, j), you'll calculate the value using the counts from your row and column arrays."
    },
    {
      "content": "Make sure to handle the indexing correctly. The matrix is 0-indexed, which means the first row and first column are both indexed at 0."
    },
    {
      "content": "Consider edge cases, such as when the grid is filled entirely with 0s or entirely with 1s. How will your calculations change in these scenarios?"
    },
    {
      "content": "As you compute the values for the difference matrix, remember the formula: diff[i][j] = onesRow[i] + onesCol[j] - zerosRow[i] - zerosCol[j]. Ensure you have all counts ready before this step."
    },
    {
      "content": "You can optimize your solution by calculating the counts of ones and zeros in a single pass through the grid, storing these counts in two arrays."
    },
    {
      "content": "After calculating the ones and zeros for each row and column, you can create the difference matrix in a second pass. This keeps your solution efficient."
    },
    {
      "content": "Make sure to initialize your difference matrix with the correct dimensions (m x n) before populating it with the calculated values."
    },
    {
      "content": "Finally, ensure your function returns the difference matrix in the correct format, as specified in the problem statement. The return type should match the expected output."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= m, n <= 10^5 and 1 <= m * n <= 10^5.",
    "The grid is a binary matrix, meaning each element is either 0 or 1.",
    "The output should be a 2D array (matrix) of the same dimensions as the input grid."
  ]
}