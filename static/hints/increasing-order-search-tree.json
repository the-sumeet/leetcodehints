{
  "hints": [
    {
      "content": "Start by understanding the structure of a binary search tree (BST). Each node's left children are smaller, and the right children are larger than the node itself. This property is crucial for rearranging the nodes correctly."
    },
    {
      "content": "Consider how in-order traversal of a BST works. This traversal visits nodes in ascending order. Think about how you can utilize this property to gather the nodes in the correct sequence."
    },
    {
      "content": "As you perform the in-order traversal, you will want to collect the nodes in a list or array. This will help you easily rearrange them later into the desired format."
    },
    {
      "content": "Remember that the final tree should have no left children. This means that during your rearrangement, each node will only point to the next node as its right child."
    },
    {
      "content": "When you are collecting nodes, keep in mind that you will need to create new nodes for the rearranged tree. Simply modifying the existing nodes' pointers will not suffice."
    },
    {
      "content": "Think about edge cases, such as when the tree has only one node. In this case, the output should be the same single node without any children."
    },
    {
      "content": "While traversing, you can use a helper function to handle the in-order traversal. This function can take a current node and a list to append the nodes to."
    },
    {
      "content": "After collecting the nodes in sorted order, you can iterate through the list to build the new tree structure. Set the right child of each node to the next node in the list."
    },
    {
      "content": "Don't forget to return the new root of the tree after rearranging. The root will be the first element in your sorted list of nodes."
    },
    {
      "content": "Finally, ensure that your function handles the case where the input tree is null. You should return null in such cases to avoid errors."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the given tree will be in the range [1, 100].",
    "Node values are unique and within the range 0 <= Node.val <= 1000.",
    "The output format should be a tree with only right children, starting from the leftmost node."
  ]
}