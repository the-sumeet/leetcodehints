{
  "hints": [
    {
      "content": "Start by thinking about how you will store the numbers added to the tracker. A simple list or array could work, but consider what operations you need to perform on this data."
    },
    {
      "content": "Remember that you need to maintain the order of the numbers for the `removeFirstAddedNumber` method. This suggests that a list might be more appropriate than a set."
    },
    {
      "content": "For calculating the mean, you'll need to keep track of the total sum of the numbers and the count of numbers added. This will allow you to compute the mean efficiently."
    },
    {
      "content": "The median requires sorting the numbers. Think about how you can sort the list when you need to calculate the median, and whether you need to sort it every time or just keep it sorted."
    },
    {
      "content": "To find the mode, consider using a frequency dictionary or a counter to keep track of how many times each number appears. This will help you identify the mode efficiently."
    },
    {
      "content": "When implementing `removeFirstAddedNumber`, ensure that you update all necessary data structures (like the sum and frequency counts) to reflect the removal of a number."
    },
    {
      "content": "Consider edge cases, such as what happens if `removeFirstAddedNumber` is called when there are no numbers in the tracker. How will you handle this gracefully?"
    },
    {
      "content": "Think about how to handle ties when determining the mode. If two numbers appear with the same highest frequency, you might need to decide on a tie-breaking rule."
    },
    {
      "content": "For the median, remember that if the count of numbers is odd, the median is the middle number, whereas if it's even, it should be the average of the two middle numbers."
    },
    {
      "content": "Make sure to consider the performance of your operations. Adding a number should be efficient, and calculating the mean, median, and mode should ideally be done in constant time or logarithmic time."
    },
    {
      "content": "When implementing the `getMean`, `getMedian`, and `getMode` methods, ensure they return the correct data types. For instance, the mean should be a float, while the median and mode should return integers."
    },
    {
      "content": "While implementing, keep track of the edge cases for empty states. What should `getMean`, `getMedian`, and `getMode` return if no numbers have been added yet?"
    },
    {
      "content": "Consider using a combination of data structures to optimize your solution. For example, a list for maintaining order, a dictionary for counting frequencies, and a sorted list for quick median access."
    },
    {
      "content": "As you build your methods, test them incrementally. Start with adding numbers and retrieving the mean, then progressively add functionality for median and mode."
    },
    {
      "content": "Finally, think about the overall design of your class. Ensure that it encapsulates all the necessary properties and methods clearly and efficiently."
    }
  ],
  "questionNotes": [
    "The tracker must maintain the order of added numbers for the `removeFirstAddedNumber` method.",
    "Mean should return a float, while median and mode should return integers.",
    "Handle edge cases for empty states gracefully when retrieving mean, median, or mode.",
    "Consider tie-breaking rules for mode if multiple numbers have the same frequency."
  ]
}