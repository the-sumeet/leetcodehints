{
  "hints": [
    {
      "content": "Start by thinking about how you can keep track of the frequency of each character in the string. A good approach is to use a hash map (or dictionary) where the keys are characters and the values are their counts."
    },
    {
      "content": "As you iterate through the string, you can populate this hash map. Remember to initialize the map before you start counting the characters."
    },
    {
      "content": "After you have counted the characters, you need to find the first character that has a count of 1. This means you will need to check the hash map for each character in the original string."
    },
    {
      "content": "Consider how you will keep track of the index of the characters while iterating through the string. You can use a simple loop with an index variable."
    },
    {
      "content": "When checking for the first unique character, you should return the index of that character. Make sure to handle the case where no unique character exists."
    },
    {
      "content": "Think about the edge cases, such as when the string consists of all repeating characters. In such cases, your function should return -1."
    },
    {
      "content": "Remember that the problem specifies that the input string will only contain lowercase English letters. This can simplify your logic since you don't need to handle other characters."
    },
    {
      "content": "When you find a character that occurs only once, you should immediately return its index. This will help you avoid unnecessary checks once you've found your answer."
    },
    {
      "content": "Make sure to test your solution with various inputs, including strings of different lengths and those that contain only unique characters or only duplicates."
    },
    {
      "content": "Finally, consider the overall time complexity of your solution. A two-pass solution (one for counting and one for finding the unique character) is efficient enough for the input constraints."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 10^5",
    "Input consists only of lowercase English letters.",
    "Return the index of the first non-repeating character, or -1 if none exists.",
    "Indexing starts from 0."
  ]
}