{
  "hints": [
    {
      "content": "Start by understanding the properties of a Binary Search Tree (BST). In a BST, for any given node, all values in the left subtree are smaller, and all values in the right subtree are larger. This property can help you find the minimum absolute difference efficiently."
    },
    {
      "content": "Consider how you can traverse the BST. In-order traversal of a BST yields the values in sorted order. This means that the minimum absolute difference will be found between consecutive nodes in this sorted order."
    },
    {
      "content": "Think about how you can keep track of the previous node value during the in-order traversal. By comparing the current node value with the previous one, you can calculate the absolute difference."
    },
    {
      "content": "Remember to initialize a variable to keep track of the minimum difference found so far. You can set it to a large value initially, and update it whenever you find a smaller difference."
    },
    {
      "content": "When performing the in-order traversal, you can use a helper function that takes the current node and the previous node value as parameters. This will allow you to compare values as you traverse."
    },
    {
      "content": "Don't forget to handle edge cases, such as ensuring that you only consider different nodes when calculating the absolute difference. Since the problem guarantees at least two nodes, you won't have to handle empty trees."
    },
    {
      "content": "As you traverse the tree, keep in mind that you need to return the minimum absolute difference after completing the traversal. Make sure to return the correct value at the end of your function."
    },
    {
      "content": "Consider the time complexity of your solution. In-order traversal will take O(n) time, where n is the number of nodes in the BST. Ensure that your solution is efficient given the constraints."
    },
    {
      "content": "If you are stuck, try writing out the in-order traversal logic separately. This can help you visualize how the values are being processed and how to compute the differences."
    },
    {
      "content": "Finally, your function should return the minimum absolute difference found. Make sure your return statement is correctly placed after the traversal is complete."
    }
  ],
  "questionNotes": [
    "The input is a Binary Search Tree (BST) represented by its root node.",
    "You need to return the minimum absolute difference between values of any two different nodes.",
    "Constraints: The number of nodes is between 2 and 10,000, and node values range from 0 to 100,000.",
    "Ensure you handle different nodes only when calculating differences."
  ]
}