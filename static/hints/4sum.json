{
  "hints": [
    {
      "content": "# Hint 1\nStart by understanding the problem requirements. You need to find unique quadruplets in the array that sum up to a given target. Make sure you note that the indices must be distinct."
    },
    {
      "content": "# Hint 2\nConsider the constraints of the input. The length of the array can be up to 200, and the values can range from -10^9 to 10^9. This suggests that a brute force solution could be inefficient due to the potential number of combinations."
    },
    {
      "content": "# Hint 3\nThink about how you can reduce the number of combinations. Sorting the array can help you avoid duplicates and make it easier to find the required sums. What happens if you sort the input array first?"
    },
    {
      "content": "# Hint 4\nOnce the array is sorted, consider using a nested loop approach. The first two loops can fix the first two numbers of the quadruplet. What could you do next to find the remaining two numbers efficiently?"
    },
    {
      "content": "# Hint 5\nFor the remaining two numbers, you can use the two-pointer technique. After fixing the first two numbers, set one pointer at the beginning and another at the end of the remaining part of the array. How would you adjust these pointers based on the sum?"
    },
    {
      "content": "# Hint 6\nDon't forget about uniqueness! After finding a valid quadruplet, you need to skip over any duplicate numbers to ensure that each quadruplet is unique. How can you implement this while iterating?"
    },
    {
      "content": "# Hint 7\nRemember to handle edge cases. What if the input array has fewer than four numbers? Make sure your solution can handle such scenarios gracefully."
    },
    {
      "content": "# Hint 8\nConsider the output format. You should return a list of lists containing the quadruplets. How will you structure your final result to match this format?"
    },
    {
      "content": "# Hint 9\nWhile implementing your solution, keep track of the indices you have used to ensure they are distinct. How will you manage the indices when you find a valid quadruplet?"
    },
    {
      "content": "# Hint 10\nFinally, think about the overall time complexity of your approach. After sorting the array, how does the nested loop and two-pointer strategy affect the performance? Aim for a solution better than O(n^4)."
    }
  ],
  "questionNotes": [
    "You need to find unique quadruplets, meaning no duplicates in the result.",
    "Indices a, b, c, and d must be distinct.",
    "The output can be in any order.",
    "Constraints: 1 <= nums.length <= 200, -10^9 <= nums[i] <= 10^9, -10^9 <= target <= 10^9."
  ]
}