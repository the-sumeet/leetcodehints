{
  "hints": [
    {
      "content": "The array is sorted in non-decreasing order. This property can be leveraged to find the two numbers efficiently. Think about how you can use two pointers to traverse the array."
    },
    {
      "content": "Remember that you need to return the indices of the two numbers, not the numbers themselves. The indices should be 1-indexed, so adjust your calculations accordingly."
    },
    {
      "content": "Consider using two pointers: one starting at the beginning of the array and the other at the end. This way, you can check the sum of the two numbers at these pointers and adjust their positions based on whether the sum is less than or greater than the target."
    },
    {
      "content": "If the sum of the two numbers at the pointers is less than the target, move the left pointer to the right to increase the sum. If the sum is greater than the target, move the right pointer to the left to decrease the sum."
    },
    {
      "content": "Make sure to handle the case where the two pointers meet. Since the problem guarantees a unique solution, you will find the answer before the pointers cross each other."
    },
    {
      "content": "Pay attention to the constraints: the input array will always have at least two numbers, and there will always be exactly one solution. This simplifies your logic since you don't have to handle cases with no solutions."
    },
    {
      "content": "When you find the correct pair of numbers that sum to the target, remember to return their indices as an array. Ensure you add 1 to each index before returning it due to the 1-indexed requirement."
    },
    {
      "content": "Consider edge cases such as negative numbers or zeros in the array. These can still form valid pairs, so ensure your logic accounts for them correctly."
    },
    {
      "content": "As you implement your two-pointer approach, keep track of the current indices and the values at those indices. This will help you debug and ensure you're checking the right pairs."
    },
    {
      "content": "Finally, your implementation should only use constant extra space. This means you should not use additional data structures like arrays or lists to store intermediate results."
    }
  ],
  "questionNotes": [
    "The array is sorted in non-decreasing order.",
    "Indices must be returned in 1-indexed format.",
    "There is exactly one solution guaranteed.",
    "You may not use the same element twice.",
    "Your solution must use only constant extra space."
  ]
}