{
  "hints": [
    {
      "content": "Start by calculating the total sum of the array. This will help you understand the target sum you need to exceed with your subsequence."
    },
    {
      "content": "Remember that the sum of the selected subsequence must be strictly greater than the sum of the elements not included. This means you need to find a way to compare these two sums effectively."
    },
    {
      "content": "Consider sorting the array in non-increasing order. This will help you easily pick the largest elements first, which is beneficial for maximizing the sum of your subsequence."
    },
    {
      "content": "As you iterate through the sorted array, keep a running total of the sum of the selected elements. Also, maintain a variable for the sum of the remaining elements."
    },
    {
      "content": "You can stop adding elements to your subsequence once the sum of the selected elements exceeds half of the total sum of the array. This is because if your selected sum is greater than half, it will automatically be greater than the sum of the non-selected elements."
    },
    {
      "content": "While selecting elements, ensure that you are keeping track of the number of elements in your subsequence. You want to minimize this count while still satisfying the sum condition."
    },
    {
      "content": "If you encounter a situation where multiple subsequences can achieve the required sum, prioritize the one with the maximum total sum. This will help you fulfill the tie-breaking condition."
    },
    {
      "content": "Be cautious about edge cases, such as when all elements are the same or when there is only one element in the array. Ensure your logic handles these scenarios correctly."
    },
    {
      "content": "After forming your subsequence, remember to sort it in non-increasing order before returning it. This is a crucial requirement of the problem."
    },
    {
      "content": "Finally, consider implementing your solution step-by-step, testing with small examples to ensure that your logic is correct before handling larger cases."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 500",
    "Constraints: 1 <= nums[i] <= 100",
    "The solution is guaranteed to be unique.",
    "Return the subsequence sorted in non-increasing order.",
    "If there are multiple valid subsequences, return the one with the minimum size and maximum total sum."
  ]
}