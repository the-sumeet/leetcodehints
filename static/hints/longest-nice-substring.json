{
  "hints": [
    {
      "content": "Start by understanding the definition of a 'nice' string. A string is nice if every letter appears in both uppercase and lowercase forms. For example, 'aA' is nice, but 'a' is not."
    },
    {
      "content": "Consider how you might check if a substring is nice. You could use a set or a dictionary to keep track of the characters you encounter in the substring. This will help you determine if both cases of each letter are present."
    },
    {
      "content": "Think about how you can iterate through the string to find all possible substrings. You might want to use two nested loops: the outer loop for the starting index and the inner loop for the ending index of the substring."
    },
    {
      "content": "While checking each substring, remember to keep track of the longest nice substring found so far. You can use a variable to store the length of the longest nice substring and update it whenever you find a longer one."
    },
    {
      "content": "When checking if a substring is nice, you can use a counter to track the occurrences of each character. After processing the substring, check if for every character, both its uppercase and lowercase forms exist."
    },
    {
      "content": "Be mindful of edge cases, such as strings that contain only one character or strings that have no nice substrings at all. Make sure your function can handle these cases gracefully and return an empty string when necessary."
    },
    {
      "content": "If you find multiple nice substrings of the same maximum length, remember to return the one that occurs first in the string. This means you should only update your result when you find a strictly longer substring."
    },
    {
      "content": "Consider using a sliding window approach to optimize your search for nice substrings. This approach can help you avoid checking the same characters multiple times, improving efficiency."
    },
    {
      "content": "As you implement your solution, make sure to test it with different inputs, including those with mixed cases, only uppercase, only lowercase, and empty strings. This will help ensure your solution is robust."
    },
    {
      "content": "Finally, think about how you will return the result. You should return the longest nice substring found, or an empty string if none exists. Make sure your return statement is correctly handling these cases."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 100",
    "The string consists of uppercase and lowercase English letters.",
    "If there are multiple longest nice substrings, return the earliest one.",
    "Return an empty string if no nice substring exists."
  ]
}