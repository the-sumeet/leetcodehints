{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of students, each with an ID, name, and scores for three assignments. Make sure you can access each part of this data correctly."
    },
    {
      "content": "Consider how you will store the results of your calculations. You might want to create a new list or dictionary to hold the processed information for each student, such as their average score or total score."
    },
    {
      "content": "Think about how you will calculate the average score for each student. You can sum the scores of the three assignments and then divide by 3. Remember to handle cases where scores might be missing or invalid."
    },
    {
      "content": "When calculating averages, consider the possibility of rounding. Decide if you want to round the average score to a specific number of decimal places, and if so, how you will implement that."
    },
    {
      "content": "After calculating the average scores, you might need to sort the students based on these scores. Think about how sorting works in your chosen programming language and what criteria you will use for sorting."
    },
    {
      "content": "If two students have the same average score, think about how you will handle tie-breaking. You could sort by student ID or name as a secondary criterion."
    },
    {
      "content": "Make sure to return the results in the specified format. You might need to create a new list of dictionaries or a similar structure that includes the student ID, name, and their average score."
    },
    {
      "content": "Consider edge cases, such as students who have all scores as zero or negative values. How will your program handle these scenarios? Ensure your calculations are robust against such inputs."
    },
    {
      "content": "Before finalizing your solution, write test cases to verify that your implementation works correctly. Test with a variety of inputs, including edge cases and typical cases."
    },
    {
      "content": "Finally, implement a function that takes the input data and processes it according to the requirements. Start by iterating over the student data, calculating averages, and preparing the output format. Remember to return the final result."
    }
  ],
  "questionNotes": [
    "Input data is structured as a dictionary with 'headers' and 'rows'.",
    "Scores are given as a list of lists, where each inner list corresponds to a student's data.",
    "Ensure to handle tie-breaking when students have the same average score.",
    "Consider edge cases, such as missing or invalid scores.",
    "Return format should match the expected output structure, including student ID, name, and average score."
  ]
}