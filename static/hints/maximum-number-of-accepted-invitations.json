{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. The input is a 2D list (matrix) where each element can either be 1 (invitation accepted) or 0 (invitation not accepted). Your goal is to count the maximum number of accepted invitations."
    },
    {
      "content": "Consider how you might traverse the matrix. A common approach is to use nested loops to iterate through each row and column. Think about how you can keep track of the count of accepted invitations as you go."
    },
    {
      "content": "As you iterate through the matrix, remember to check each element. You can use a simple conditional statement to check if the current element is 1. If it is, increment your count of accepted invitations."
    },
    {
      "content": "Think about edge cases. What happens if the matrix is empty? Consider how you would handle a case where there are no invitations at all. Make sure your code can handle this gracefully."
    },
    {
      "content": "Consider the possibility of multiple rows and columns. How will you ensure that you are counting invitations from all areas of the matrix? Make sure your logic accounts for every element in the 2D list."
    },
    {
      "content": "You may want to use a variable to keep track of the maximum count of accepted invitations. If you find a higher count during your traversal, update this variable accordingly."
    },
    {
      "content": "Think about the return format. The problem asks for the maximum number of accepted invitations, so your final output should be a single integer representing this count."
    },
    {
      "content": "Consider how you might optimize your solution. Are there any patterns in the matrix that could allow you to skip certain checks? For example, if you find a row of all 1s, you might not need to check the rest of that row."
    },
    {
      "content": "Before finalizing your approach, write down the pseudocode for your solution. This can help you visualize the steps you need to take and ensure you haven't overlooked any details."
    },
    {
      "content": "Finally, implement your solution but leave room for testing with different matrix configurations. After coding, test with edge cases like all 1s, all 0s, and varying dimensions of the matrix."
    }
  ],
  "questionNotes": [
    "The input is a 2D list (matrix) where each element is either 1 or 0.",
    "The output should be a single integer representing the maximum number of accepted invitations.",
    "Consider edge cases such as empty matrices or matrices with no accepted invitations.",
    "Ensure that your solution accounts for all elements in the matrix."
  ]
}