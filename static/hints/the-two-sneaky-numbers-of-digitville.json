{
  "hints": [
    {
      "content": "Start by understanding the structure of the input array. The array `nums` contains integers from 0 to n-1, where each integer is supposed to appear exactly once, except for two numbers that appear twice."
    },
    {
      "content": "Consider how you might identify duplicates in an array. You could use a data structure that tracks occurrences, like a hash map or a set, to help you keep track of numbers you've seen."
    },
    {
      "content": "Think about the constraints given. The length of `nums` is n + 2, which means it will always contain two extra occurrences of numbers. This can help you determine how many unique numbers you should find."
    },
    {
      "content": "You might want to iterate through the array and check each number. If you find a number that you've seen before, it's one of the sneaky numbers."
    },
    {
      "content": "Remember that the output should be an array of size two containing the two sneaky numbers. The order of the numbers in the output does not matter."
    },
    {
      "content": "Consider edge cases where `n` is at its minimum value (2). In this case, the input will be `[0, 0, 1, 1]`. How would your approach handle this?"
    },
    {
      "content": "As you iterate through the array, think about how you can store the numbers you've seen so far. A set is a good choice because it allows for O(1) average time complexity for both insertions and lookups."
    },
    {
      "content": "When you find a number that is already in your set of seen numbers, add it to your result array. Make sure to check if you've already added two numbers to avoid duplicates in your result."
    },
    {
      "content": "You might want to consider the time complexity of your solution. A linear time solution (O(n)) would be optimal, so think about how to achieve that with your chosen data structure."
    },
    {
      "content": "Finally, make sure to return the result in the correct format. You can return the sneaky numbers as an array, e.g., `return [sneaky1, sneaky2];` but ensure you have both numbers before doing so."
    }
  ],
  "questionNotes": [
    "Constraints: 2 <= n <= 100",
    "nums.length == n + 2",
    "0 <= nums[i] < n",
    "Exactly two numbers are repeated in the input array."
  ]
}