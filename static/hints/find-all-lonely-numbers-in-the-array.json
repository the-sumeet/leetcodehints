{
  "hints": [
    {
      "content": "Start by understanding the definition of a lonely number. A number is lonely if it appears exactly once in the array and neither of its adjacent numbers (x - 1 or x + 1) exists in the array."
    },
    {
      "content": "Consider how you can count the occurrences of each number in the array. A common approach is to use a hash map (or dictionary) to store the frequency of each number."
    },
    {
      "content": "Once you have the frequency of each number, think about how you can check for the presence of adjacent numbers. You will need to check if both x - 1 and x + 1 are absent from the array."
    },
    {
      "content": "Remember to handle edge cases. For example, if the array contains only one element, that element is automatically a lonely number if it appears once."
    },
    {
      "content": "When iterating through the array to find lonely numbers, make sure to check the frequency map for each number and its adjacent values. You might use a loop to go through the unique numbers."
    },
    {
      "content": "While checking for lonely numbers, you can use a set to quickly determine if an adjacent number exists. This allows for O(1) average time complexity for lookups."
    },
    {
      "content": "Think about how to store the lonely numbers you find. You might want to use a list to collect these numbers before returning them."
    },
    {
      "content": "As you implement your solution, consider the constraints given. The maximum length of the array is 100,000, and the values can go up to 1,000,000. Ensure your solution is efficient."
    },
    {
      "content": "Don't forget to return the lonely numbers in any order as specified in the problem statement. You can simply return the list you created."
    },
    {
      "content": "Before finalizing your solution, test it with edge cases, such as an array with all unique numbers, an array where all numbers are adjacent, and an array with repeated numbers."
    }
  ],
  "questionNotes": [
    "A number is lonely if it appears exactly once.",
    "Check for the absence of adjacent numbers (x - 1 and x + 1).",
    "The input array can have a length of up to 100,000.",
    "Values in the array can range from 0 to 1,000,000.",
    "Return format can be any order of lonely numbers."
  ]
}