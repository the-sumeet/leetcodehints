{
  "hints": [
    {
      "content": "Start by understanding what a 'good split' means in the context of the problem. A split is good if the number of distinct characters in the left part of the split is equal to the number of distinct characters in the right part."
    },
    {
      "content": "Consider how you can iterate through the string to find potential split points. A split point can be any index from 1 to the length of the string minus 1, ensuring both parts are non-empty."
    },
    {
      "content": "You might want to keep track of the distinct characters in both the left and right parts of the string. Think about using sets or dictionaries to help count these distinct characters efficiently."
    },
    {
      "content": "As you iterate through the string, maintain two counts: one for the distinct characters in the left part and another for the right part. Update these counts as you move the split point."
    },
    {
      "content": "When you split the string, you need to update the distinct character counts dynamically. For example, when you add a character to the left part, check if it's a new character and update your count accordingly."
    },
    {
      "content": "Remember to initialize your counts properly before starting the iteration. You can use a counter for the right part that starts with the total number of distinct characters in the entire string."
    },
    {
      "content": "After each split, you should compare the counts of distinct characters in both parts. If they are equal, increment your good split count."
    },
    {
      "content": "Consider edge cases where the string has all identical characters or all unique characters. How would these affect the number of good splits?"
    },
    {
      "content": "Think about the time complexity of your solution. You want to ensure that your approach is efficient enough given the constraints (1 <= s.length <= 10^5)."
    },
    {
      "content": "You are almost there! To finalize your solution, implement the logic to count distinct characters for both sides as you iterate through the string and return the total count of good splits."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 10^5",
    "s consists of only lowercase English letters.",
    "A split must result in two non-empty strings.",
    "The number of distinct letters in both parts must be equal for a split to be considered good."
  ]
}