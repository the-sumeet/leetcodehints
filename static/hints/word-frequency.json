{
  "hints": [
    {
      "content": "Start by thinking about how you can read the contents of the file `words.txt`. In Bash, you can use the `cat` command to display the contents of a file."
    },
    {
      "content": "Next, consider how you can split the text into individual words. The `tr` command can be useful here, as it can replace whitespace characters with newlines, effectively putting each word on a new line."
    },
    {
      "content": "Once you have each word on a separate line, think about how you can count the occurrences of each word. The `sort` command can help you sort the words, which is a necessary step before counting them."
    },
    {
      "content": "After sorting the words, you can use the `uniq` command with the `-c` option to count the occurrences of each word. This will give you a list of words along with their respective counts."
    },
    {
      "content": "To get the output in the desired format, you need to sort the counted words by their frequency. You can use `sort` again, but this time with options to sort numerically and in reverse order."
    },
    {
      "content": "Remember that the output should be sorted by descending frequency. This means you should sort based on the count first, and then output the word alongside its count."
    },
    {
      "content": "Think about how to chain these commands together using pipes. Each command's output should feed into the next command as input, creating a seamless flow of data processing."
    },
    {
      "content": "Consider edge cases, such as what happens if the file is empty or contains only whitespace. Your script should handle these gracefully, potentially outputting nothing or a specific message."
    },
    {
      "content": "Make sure to test your script with various inputs, including cases with varying amounts of whitespace between words. This will ensure that your word splitting logic is robust."
    },
    {
      "content": "Finally, remember to format the output correctly. Each line should contain a word followed by its frequency count, separated by a space, and there should be no additional formatting or characters."
    }
  ],
  "questionNotes": [
    "The input file 'words.txt' contains only lowercase characters and spaces.",
    "Words are separated by one or more whitespace characters.",
    "Each word's frequency count is guaranteed to be unique.",
    "Output must be sorted by descending frequency."
  ]
}