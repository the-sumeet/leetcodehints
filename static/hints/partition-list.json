{
  "hints": [
    {
      "content": "Start by understanding the structure of a linked list. Each node contains a value and a pointer to the next node. Make sure you can traverse the list and access each node's value."
    },
    {
      "content": "Think about how you can separate the nodes into two different lists: one for nodes less than x and another for nodes greater than or equal to x. You will need to maintain the order of nodes in each partition."
    },
    {
      "content": "Consider using two pointers or two separate linked lists to build the partitions. You can initialize two dummy nodes to help simplify the process of adding nodes to each partition."
    },
    {
      "content": "As you traverse the original list, check the value of each node against x. Depending on whether the value is less than or greater than/equal to x, you will append it to the corresponding partition."
    },
    {
      "content": "Don't forget to handle the case where the input linked list is empty. Make sure your function can return an appropriate result for this edge case."
    },
    {
      "content": "Once you have built both partitions, you will need to connect the end of the 'less than x' partition to the head of the 'greater than or equal to x' partition. This ensures that the final list is correctly formed."
    },
    {
      "content": "After connecting the two partitions, ensure that the last node of the 'greater than or equal to x' partition points to null to signify the end of the list."
    },
    {
      "content": "Remember to return the head of the new partitioned list. Since you used dummy nodes, you will return the next node of the dummy node that represents the 'less than x' partition."
    },
    {
      "content": "Consider edge cases such as all nodes being less than x, all nodes being greater than or equal to x, or a mix of both. Your solution should handle these gracefully."
    },
    {
      "content": "You are very close! To summarize, you will traverse the list, build two partitions using dummy nodes, connect them, and return the head of the new list. Make sure to test your solution with various inputs."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the list is in the range [0, 200].",
    "Node values range from -100 to 100.",
    "x can range from -200 to 200.",
    "You must preserve the original relative order of nodes in each partition."
  ]
}