{
  "hints": [
    {
      "content": "Start by understanding what a balanced shipment is. A shipment is balanced if the last parcel's weight is strictly less than the maximum weight in that shipment. Think about how to identify the maximum weight in a contiguous subarray."
    },
    {
      "content": "Consider how you can iterate through the array to form potential shipments. Remember that you need to check each subarray to see if it meets the balanced condition."
    },
    {
      "content": "When checking for balanced shipments, keep track of the maximum weight encountered as you iterate through the parcels. You can use a variable to store this maximum weight."
    },
    {
      "content": "Think about how to determine when to end a shipment. You can end a shipment when you reach a parcel that cannot form a balanced shipment with the current maximum weight."
    },
    {
      "content": "Consider edge cases, such as when all parcels have the same weight. In such cases, no balanced shipments can be formed. How would you handle this in your logic?"
    },
    {
      "content": "As you identify balanced shipments, keep a count of how many you have formed. You might want to use a list to store the indices of the parcels that have been shipped."
    },
    {
      "content": "When you find a balanced shipment, ensure that you skip over the parcels that have already been included in a shipment. This will help you maintain non-overlapping shipments."
    },
    {
      "content": "Think about how to efficiently check the condition for a balanced shipment. You may want to maintain a running maximum as you iterate through the current shipment."
    },
    {
      "content": "Try to implement a two-pointer technique or a sliding window approach to help manage the current shipment's start and end indices. This can simplify your logic for checking shipments."
    },
    {
      "content": "Finally, consider how to return the total count of balanced shipments formed. Make sure your function outputs the correct integer value as specified in the problem statement."
    }
  ],
  "questionNotes": [
    "Constraints: 2 <= n <= 10^5",
    "Weights: 1 <= weight[i] <= 10^9",
    "Shipments must be contiguous and non-overlapping.",
    "Each parcel can appear in at most one shipment.",
    "Return the maximum possible number of balanced shipments."
  ]
}