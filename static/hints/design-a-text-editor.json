{
  "hints": [
    {
      "content": "Start by defining the `TextEditor` class. Remember that the text should initially be empty, and you need to maintain a cursor position that starts at 0."
    },
    {
      "content": "Think about how you can represent the text. A simple string might work, but consider how you will efficiently handle insertions and deletions."
    },
    {
      "content": "For the `addText` method, you'll need to insert text at the current cursor position. Make sure to update the cursor position after adding the text."
    },
    {
      "content": "When implementing `deleteText`, remember that you can only delete characters to the left of the cursor. You should return the number of characters actually deleted."
    },
    {
      "content": "In the `cursorLeft` and `cursorRight` methods, ensure that the cursor does not move beyond the bounds of the text. Use conditions to check the cursor's position."
    },
    {
      "content": "For both `cursorLeft` and `cursorRight`, remember to return the last up to 10 characters to the left of the cursor after moving it. Consider using substring methods."
    },
    {
      "content": "Think about edge cases, such as when the cursor is at the very beginning or end of the text. How will your methods behave in these cases?"
    },
    {
      "content": "Consider using a data structure that allows for efficient insertions and deletions, such as a linked list or a list of characters, to optimize the performance."
    },
    {
      "content": "When deleting text, ensure that you do not attempt to delete more characters than are available to the left of the cursor. This might require a check on the cursor position."
    },
    {
      "content": "In your `cursorLeft` and `cursorRight` methods, you might want to use a loop to move the cursor and ensure you do not exceed the text bounds."
    },
    {
      "content": "Remember to handle the case where `k` in `cursorLeft` or `cursorRight` might be larger than the number of characters available in that direction."
    },
    {
      "content": "Think about how you can maintain the cursor position as you perform operations. You might want to keep track of the cursor position separately from the text."
    },
    {
      "content": "Your methods should be efficient, ideally O(k) for operations that involve moving the cursor or adding/deleting text. Consider how you can achieve this."
    },
    {
      "content": "For the return values, ensure that you are returning the correct substring of text as specified. Use string slicing carefully to extract the last 10 characters."
    },
    {
      "content": "As a final step, review your implementation to ensure that all edge cases are handled properly, especially with respect to cursor movement and text boundaries."
    }
  ],
  "questionNotes": [
    "The cursor position should always be valid: 0 <= cursor.position <= currentText.length.",
    "When deleting text, only characters to the left of the cursor can be removed.",
    "The return value of `deleteText` should reflect the actual number of characters deleted, not just the requested number.",
    "The `cursorLeft` and `cursorRight` methods need to return the last min(10, len) characters to the left of the cursor after moving."
  ]
}