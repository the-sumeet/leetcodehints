{
  "hints": [
    {
      "content": "Start by considering how you can iterate through the string. You will need to compare each character with the next one to check for consecutive characters."
    },
    {
      "content": "Think about how you can keep track of the current character and the length of the substring that consists of that character. You might want to use a variable to store the maximum length found so far."
    },
    {
      "content": "As you iterate through the string, if the current character is the same as the previous one, increase your count. If itâ€™s different, you should compare the current count with the maximum length and reset the count."
    },
    {
      "content": "Remember to handle the case where the string ends with the longest substring. After your loop, you should check the last counted substring against the maximum length."
    },
    {
      "content": "Consider edge cases such as strings with only one character. What should your function return for a string like 'a'?"
    },
    {
      "content": "Make sure to account for strings where all characters are the same, like 'aaaaaa'. What would the output be in this case?"
    },
    {
      "content": "When comparing characters, you can use a simple equality check. For example: `if s[i] == s[i - 1]`."
    },
    {
      "content": "You might want to initialize your maximum length variable to 1, as the minimum length of a substring with one unique character is 1."
    },
    {
      "content": "After you finish iterating through the string, don't forget to return the maximum length you have recorded. This will be your final answer."
    },
    {
      "content": "Consider edge cases with varying lengths of strings, such as the minimum length of 1 and the maximum length of 500. Ensure your solution works efficiently within these constraints."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 500",
    "s consists of only lowercase English letters.",
    "Return the maximum length of a non-empty substring that contains only one unique character."
  ]
}