{
  "hints": [
    {
      "content": "Start by identifying the structure of the input string `s`. Notice that it contains bracket pairs `(...)` which indicate keys you need to evaluate."
    },
    {
      "content": "Consider how you can extract the keys from the string. You might want to use a loop to traverse the string and check for opening and closing brackets."
    },
    {
      "content": "As you find a key within brackets, think about how you can store the values from the `knowledge` array. A dictionary or a hash map could be useful for quick lookups."
    },
    {
      "content": "Remember that the keys in the `knowledge` array are unique. This means you can safely replace each key in the string without worrying about duplicates."
    },
    {
      "content": "When you find a key in brackets, you need to check if it exists in your knowledge map. If it does, replace the entire bracket pair with its corresponding value; if not, use a question mark `?`."
    },
    {
      "content": "Think about how to handle the string concatenation. You might want to build a new string as you process each character in `s`, especially when replacing bracket pairs."
    },
    {
      "content": "Consider edge cases, such as when `knowledge` is empty. How should your function behave if there are no known values for any keys in `s`?"
    },
    {
      "content": "As you replace keys, ensure that you preserve the order of characters in the original string `s`. This will help maintain the integrity of the output string."
    },
    {
      "content": "When processing the string, keep track of your current position. You can use an index to determine whether you are inside a bracket pair or not."
    },
    {
      "content": "Finally, once you have processed the entire string, ensure that your output matches the expected format. You should return a single string with all replacements made."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 10^5",
    "0 <= knowledge.length <= 10^5",
    "knowledge[i].length == 2",
    "1 <= key_i.length, value_i.length <= 10",
    "Each key in knowledge is unique.",
    "There will be no nested brackets in s."
  ]
}