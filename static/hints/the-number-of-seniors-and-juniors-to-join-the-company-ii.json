{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of candidates, each with an employee ID, experience level, and salary. Make sure you can access these properties correctly."
    },
    {
      "content": "Focus on separating candidates into two groups based on their experience: 'Junior' and 'Senior'. You can use a simple loop to iterate through the list and categorize them."
    },
    {
      "content": "Consider how you will store the categorized candidates. You might want to use two separate lists or dictionaries to keep track of Juniors and Seniors."
    },
    {
      "content": "Next, think about how you will calculate the total salary for each group. You can initialize two sum variables, one for Juniors and one for Seniors, and update them as you loop through the candidates."
    },
    {
      "content": "Remember to handle the case where there might be no candidates in one of the groups. You should check if the lists are empty before performing any calculations."
    },
    {
      "content": "When calculating the average salary, ensure you are dividing by the correct number of candidates. If there are no candidates in a group, decide how you want to handle that case (e.g., return 0 or None)."
    },
    {
      "content": "After calculating the averages, think about how to format your output. You might want to return a dictionary with keys for 'Junior' and 'Senior', and their corresponding average salaries."
    },
    {
      "content": "Consider edge cases, such as when all candidates are Juniors or all are Seniors. Make sure your logic accounts for these scenarios without throwing errors."
    },
    {
      "content": "You might also want to think about how to handle ties in salary if you need to rank candidates. Determine if you need to consider the employee ID for tie-breaking."
    },
    {
      "content": "As you implement your logic, keep testing with different input scenarios to ensure your solution is robust. Use the provided sample test cases to validate your approach."
    },
    {
      "content": "Make sure to pay attention to the data types you are working with; experience is a string while salary is an integer. Ensure your comparisons and calculations are handled correctly."
    },
    {
      "content": "If you find your code is not performing as expected, use print statements or a debugger to trace through your logic. This can help you identify where things might be going wrong."
    },
    {
      "content": "Once you have the averages calculated, think about how you will return the final result. Ensure that your output matches the expected format as described in the problem statement."
    },
    {
      "content": "Review your code for any potential off-by-one errors, especially when dealing with lists and indexing. This is a common pitfall in coding problems."
    },
    {
      "content": "Before finalizing your solution, consider edge cases where the experience level might not match expected values. How will you handle unexpected experience levels?"
    }
  ],
  "questionNotes": [
    "Input consists of a list of candidates with employee_id, experience, and salary.",
    "Experience can be either 'Junior' or 'Senior'.",
    "You need to calculate average salaries for both groups.",
    "Handle cases where one group might be empty.",
    "Output should be in a specific format, likely a dictionary with average salaries."
  ]
}