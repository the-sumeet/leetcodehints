{
  "hints": [
    {
      "content": "Start by identifying the key components in the grid: 'S' for the starting position, 'L' for litter, 'R' for reset areas, 'X' for obstacles, and '.' for empty spaces. Make sure you can parse the grid and find the coordinates of 'S' and all 'L's."
    },
    {
      "content": "Consider how to represent the student's energy. You will need to track the energy level as the student moves. Each move to an adjacent cell costs 1 energy, and moving onto an 'R' cell resets the energy to its maximum."
    },
    {
      "content": "Think about how to explore the grid. A breadth-first search (BFS) might be a good choice for finding the shortest path to collect all litter items. You can maintain a queue that stores the current position, remaining energy, and the number of moves taken."
    },
    {
      "content": "When implementing BFS, ensure to mark cells as visited to avoid cycles. You may also need to keep track of how many litter items have been collected so far. This will help you determine when you've completed the task."
    },
    {
      "content": "Consider edge cases where the student might run out of energy before reaching litter. If the student is on an 'R' cell, they can reset their energy, so plan your moves accordingly. Think about when it might be beneficial to return to an 'R' cell."
    },
    {
      "content": "Make sure to handle scenarios where there are no valid paths to collect all litter. If a BFS iteration completes and not all litter is collected, you should return -1. Check if all 'L' cells are reachable from 'S' given the energy constraints."
    },
    {
      "content": "As you build your BFS, remember to consider the grid boundaries and obstacles. Ensure that your moves only go to valid cells (not out of bounds or into 'X'). This will help prevent unnecessary errors during execution."
    },
    {
      "content": "You may want to optimize your BFS by prioritizing paths that lead to litter first. This could be done by sorting the litter locations based on their distance from 'S' or the previously collected litter items."
    },
    {
      "content": "In your BFS implementation, you might want to use a set to track visited states, which includes the current position, remaining energy, and the collected litter state. This will help ensure that you do not revisit the same state unnecessarily."
    },
    {
      "content": "Finally, think about how to structure your return statement. After completing the BFS, if you've collected all litter, return the total number of moves. If not, ensure your function returns -1 to indicate that it's impossible to collect all litter."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= m == classroom.length <= 20 and 1 <= n == classroom[i].length <= 20.",
    "There is exactly one 'S' in the grid.",
    "There are at most 10 'L' cells in the grid.",
    "Return -1 if it's impossible to collect all litter."
  ]
}