{
  "hints": [
    {
      "content": "Start by understanding the structure of the grid. Each cell can either be 'W' (white) or 'B' (black). You need to identify the unique 'B' pixels that are lonely."
    },
    {
      "content": "A 'lonely' pixel is defined as a 'B' that is the only 'B' in its row and column. Make sure to consider how you will check both the row and column for each 'B' pixel."
    },
    {
      "content": "You can use two arrays to keep track of the counts of 'B' pixels in each row and each column. This will help you determine if a 'B' is lonely."
    },
    {
      "content": "As you iterate through the grid, populate these count arrays. For example, if you encounter a 'B' at position (i, j), increment both count[row[i]] and count[column[j]]."
    },
    {
      "content": "After populating the counts, iterate through the grid again. For each 'B' at (i, j), check if count[row[i]] == 1 and count[column[j]] == 1."
    },
    {
      "content": "Remember to handle edge cases where the grid might be empty or have no 'B' pixels at all. What should you return in those cases?"
    },
    {
      "content": "When counting the lonely pixels, you should maintain a counter that increments each time you find a lonely 'B'. Think about what you will return at the end of your function."
    },
    {
      "content": "Consider the return type. You might need to return an integer representing the number of lonely 'B' pixels found in the grid."
    },
    {
      "content": "Make sure to test your implementation with grids of varying sizes, including edge cases like 1x1 grids or grids with all 'W' pixels."
    },
    {
      "content": "Your final implementation should efficiently check for lonely pixels, ideally in O(n*m) time complexity, where n is the number of rows and m is the number of columns."
    }
  ],
  "questionNotes": [
    "The grid is represented as a 2D array of characters.",
    "A lonely pixel 'B' must be the only 'B' in its respective row and column.",
    "Return the count of lonely 'B' pixels as an integer.",
    "Consider edge cases such as empty grids or grids with no 'B' pixels."
  ]
}