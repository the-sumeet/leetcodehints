{
  "hints": [
    {
      "content": "Start by understanding what a balanced string is. A balanced string contains an equal number of 'L' and 'R' characters. For example, 'LR' is balanced, while 'LLR' is not."
    },
    {
      "content": "Think about how you can traverse the string. You can use a counter to keep track of the number of 'L' and 'R' characters as you iterate through the string."
    },
    {
      "content": "As you traverse the string, you can increment a count for 'L' and decrement for 'R'. When the count returns to zero, it indicates that you have found a balanced substring."
    },
    {
      "content": "Consider initializing two variables: one for counting 'L' and another for 'R'. You can use a loop to go through each character in the string and update these counters."
    },
    {
      "content": "Remember that you need to count how many times you reach a balanced state (where the counts of 'L' and 'R' are equal). Each time this happens, you can increment a separate balance count."
    },
    {
      "content": "Think about edge cases, such as the minimum length of the string. The string will always be balanced, but how does that affect your logic when splitting?"
    },
    {
      "content": "Consider what happens if the string consists of only 'L's followed by 'R's. How does your approach handle this? It should still yield one balanced substring."
    },
    {
      "content": "Make sure to handle the entire string in one pass. You should not need to split the string physically; just keep track of counts as you iterate."
    },
    {
      "content": "After iterating through the string, ensure that your final count of balanced substrings is returned. You might want to return this count at the end of your function."
    },
    {
      "content": "Your final implementation should look something like this: Initialize counters, loop through the string, update counters, and count balanced substrings whenever they are equal. Don't forget to return the count!"
    }
  ],
  "questionNotes": [
    "Balanced strings must have equal 'L' and 'R' characters.",
    "The input string is guaranteed to be balanced.",
    "The output should be the maximum number of balanced substrings.",
    "Constraints: 2 <= s.length <= 1000, s[i] is either 'L' or 'R'."
  ]
}