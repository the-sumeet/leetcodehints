{
  "hints": [
    {
      "content": "Start by understanding what a subtree sum is. For any node in the binary tree, the subtree sum is the sum of all values in the subtree rooted at that node, including the node itself."
    },
    {
      "content": "Think about how you can traverse the tree to calculate the subtree sums. A depth-first search (DFS) approach is often effective for this type of problem."
    },
    {
      "content": "As you calculate the subtree sums, consider how you will store the frequency of each sum. A hash map (dictionary) can be useful for counting occurrences of each sum."
    },
    {
      "content": "Remember that you need to return the most frequent subtree sum. This means you will need to keep track of which sums occur most frequently as you build your frequency map."
    },
    {
      "content": "What will you do in case of a tie? If multiple sums have the same highest frequency, you should return all of them. Make sure your logic accounts for this scenario."
    },
    {
      "content": "Consider edge cases, such as when the tree has only one node. What would the subtree sum be in that case? How does that affect your frequency count?"
    },
    {
      "content": "As you implement your solution, think about how you will handle negative values in the tree. They are valid inputs and should be included in your calculations."
    },
    {
      "content": "After populating your frequency map, you'll need to determine the maximum frequency. This can be done by iterating through your map to find the highest count."
    },
    {
      "content": "Once you've identified the maximum frequency, you can filter your map to collect all sums that have this frequency. Make sure to return them in an appropriate format."
    },
    {
      "content": "Your final step is to ensure that your function returns the result correctly. If you have multiple sums with the same frequency, ensure they are returned in any order as specified."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the tree is in the range [1, 10^4].",
    "Node values range from -10^5 to 10^5.",
    "Return format: If there is a tie for the most frequent sum, return all sums with the highest frequency in any order."
  ]
}