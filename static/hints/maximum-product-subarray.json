{
  "hints": [
    {
      "content": "Start by understanding what a subarray is. A subarray is a contiguous part of an array. For example, in the array [2, 3, -2, 4], the subarrays include [2], [2, 3], [3, -2], etc."
    },
    {
      "content": "Consider how the product of numbers can change with positive and negative values. A positive number multiplied by another positive number gives a larger positive product, while a negative number can flip the product to negative."
    },
    {
      "content": "Think about how you can keep track of the maximum product as you iterate through the array. You might want to maintain two variables: one for the maximum product and another for the minimum product, since a negative number can turn a small negative product into a large positive product."
    },
    {
      "content": "As you iterate through the array, remember to update both the maximum and minimum products at each step. This means you need to calculate the product of the current number with both the maximum and minimum products from the previous step."
    },
    {
      "content": "Don't forget to handle zeros in the array. When you encounter a zero, the product resets, and you should consider starting a new subarray from the next element."
    },
    {
      "content": "Consider edge cases where the array might contain only one element or all elements are negative. What should your function return in these cases?"
    },
    {
      "content": "Think about the time complexity of your solution. You should aim for a linear time complexity O(n) since you will be iterating through the array just once."
    },
    {
      "content": "As you implement your solution, ensure you are correctly initializing your maximum and minimum product variables. A good starting point might be the first element of the array."
    },
    {
      "content": "Remember to update the global maximum product after processing each element. This ensures that by the end of your iteration, you have the maximum product of any subarray."
    },
    {
      "content": "Finally, ensure that your function returns the correct maximum product after processing the entire array. You might want to return a variable that has been updated throughout your loop."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 2 * 10^4",
    "-10 <= nums[i] <= 10",
    "The product of any subarray of nums is guaranteed to fit in a 32-bit integer.",
    "Subarrays must be contiguous; non-contiguous elements do not count."
  ]
}