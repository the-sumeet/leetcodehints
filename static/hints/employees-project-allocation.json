{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have two main tables: Projects and Employees. Each project has a workload associated with it, and each employee is identified by an ID."
    },
    {
      "content": "Identify the relationships between the two tables. Each project can have multiple employees assigned to it, and each employee can work on multiple projects. This suggests a many-to-many relationship."
    },
    {
      "content": "Consider how you will represent the data in your solution. You might want to use dictionaries or lists to store the projects and employees for easier access."
    },
    {
      "content": "Think about how to aggregate the workloads for each employee. You will need to keep track of how much workload each employee has taken on from the projects they are assigned to."
    },
    {
      "content": "Look into how to iterate through the project data. You will need to access both the project ID and the workload for each employee associated with that project."
    },
    {
      "content": "When processing the employee data, ensure you maintain a mapping between employee IDs and their respective details, such as names and teams."
    },
    {
      "content": "Pay attention to the workload distribution among employees. You may need to implement logic to handle cases where an employee's workload exceeds a certain threshold."
    },
    {
      "content": "Consider edge cases where an employee might not be assigned to any projects or where projects have no employees. How will your solution handle these scenarios?"
    },
    {
      "content": "Think about how to format the output. You might need to return a list of employees with their total workloads, names, and teams."
    },
    {
      "content": "Remember to account for any unique constraints, such as ensuring that employee IDs are unique within the employee list."
    },
    {
      "content": "You may need to sort the final output based on certain criteria, such as workload or employee name. Determine what the sorting criteria should be."
    },
    {
      "content": "Consider how to handle ties in workload if two employees have the same total workload. What criteria will you use to break ties?"
    },
    {
      "content": "Before finalizing your implementation, think about the efficiency of your solution. How will you ensure it runs efficiently with larger datasets?"
    },
    {
      "content": "As you approach the final implementation, start writing pseudocode that outlines the main steps: parsing input, aggregating workloads, and formatting output."
    },
    {
      "content": "Finally, draft your solution with a focus on clarity and maintainability. Ensure that your code is well-commented to explain your logic."
    }
  ],
  "questionNotes": [
    "Input consists of two tables: Projects and Employees.",
    "Each project can have multiple employees assigned to it.",
    "Workloads are associated with each employee per project.",
    "Employee IDs and project IDs are unique.",
    "Consider edge cases where employees have no projects or projects have no employees.",
    "Output should include employee details with their total workloads."
  ]
}