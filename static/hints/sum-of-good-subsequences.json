{
  "hints": [
    {
      "content": "Start by understanding what a good subsequence is. A good subsequence is one where the absolute difference between any two consecutive elements is exactly 1. For example, [1, 2] and [2, 1] are good subsequences."
    },
    {
      "content": "Consider the implications of having a good subsequence. Each element can be part of multiple subsequences. Think about how you can count these subsequences effectively."
    },
    {
      "content": "Notice that subsequences of size 1 are always considered good. This means every individual element contributes to the total sum."
    },
    {
      "content": "When forming good subsequences, focus on the relationships between numbers. For example, if you have a number 'x', look for 'x-1' and 'x+1' in the array to form good subsequences."
    },
    {
      "content": "You might want to sort the array first. Sorting can help you easily find elements that are consecutive or have a difference of 1."
    },
    {
      "content": "Think about how to efficiently count the occurrences of each number in the array. This can help you determine how many times each number contributes to the sum of good subsequences."
    },
    {
      "content": "Use a frequency array to count occurrences of each number. This array will help you understand how many good subsequences can be formed with each number."
    },
    {
      "content": "Consider dynamic programming or combinatorial counting to keep track of how many good subsequences can be formed that end with a specific number."
    },
    {
      "content": "For each number 'x', calculate the contribution of subsequences that end with 'x' and those that include 'x-1' and 'x+1'. This will help you build the total sum."
    },
    {
      "content": "Remember to take care of large numbers. Since the result can be very large, make sure to use modulo 10^9 + 7 for your calculations."
    },
    {
      "content": "You may want to iterate through the frequency array and calculate contributions for each number based on its neighbors. This can be done in a single pass."
    },
    {
      "content": "Think about how to handle edge cases, such as when all elements are the same or when there are no consecutive numbers in the array."
    },
    {
      "content": "Consider how to accumulate the total sum of contributions from all good subsequences. You might need to maintain a running total as you process each number."
    },
    {
      "content": "As you finalize your approach, ensure that you are correctly summing contributions from subsequences of different lengths, not just length 1."
    },
    {
      "content": "Finally, ensure you are returning the result in the correct format, specifically modulo 10^9 + 7, to handle large sums."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Element values: 0 <= nums[i] <= 10^5",
    "Subsequences of size 1 are considered good.",
    "Return the sum modulo 10^9 + 7."
  ]
}