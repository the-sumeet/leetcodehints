{
  "hints": [
    {
      "content": "Consider the properties of the numbers in the array. Every number appears three times except for one. This means that if you can count how many times each number appears, you could identify the unique number."
    },
    {
      "content": "Think about how you could keep track of counts without using extra space. Instead of using a hash map, consider using bit manipulation to track the occurrences of bits in the numbers."
    },
    {
      "content": "Remember that you need to achieve linear runtime complexity, O(n). This means you should aim to process the array in a single pass or with a constant number of passes."
    },
    {
      "content": "Since you can only use constant extra space, avoid using data structures that grow with the input size. Instead, think about how you can use a few variables to store intermediate results."
    },
    {
      "content": "Look into how you can use bitwise operations to count occurrences of bits across all numbers. For instance, you can use bitwise AND, OR, and XOR to manipulate bits."
    },
    {
      "content": "Consider how you can represent the counts of bits in a way that allows you to determine which bits correspond to the unique number. You may need to track how many times each bit has been seen across all numbers."
    },
    {
      "content": "Think about how you can use two variables to track the counts of bits that appear once and twice, respectively. This could help you isolate the bits that belong to the unique number."
    },
    {
      "content": "You might want to iterate through each number and update your two tracking variables accordingly. Keep in mind that you need to reset counts when they reach three."
    },
    {
      "content": "After processing all numbers, the variable that represents the unique number should contain the result. Make sure to carefully handle the bit manipulation to ensure correctness."
    },
    {
      "content": "As a final step, ensure that your solution handles edge cases, such as the smallest possible input size. Test your logic with a variety of inputs to confirm its robustness."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 3 * 10^4",
    "Each element appears exactly three times except for one element which appears once.",
    "You must implement a solution with O(n) time complexity and O(1) space complexity."
  ]
}