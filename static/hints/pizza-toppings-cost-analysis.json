{
  "hints": [
    {
      "content": "Start by understanding the structure of the data provided. You have a list of toppings, each with a name and a cost. Make sure you can access both the topping names and their corresponding costs easily."
    },
    {
      "content": "Consider how you might want to store the toppings and their costs. A dictionary or a list of tuples could be useful for keeping track of both the name and cost together."
    },
    {
      "content": "Think about what kind of analysis you want to perform on the toppings. Are you looking to find the most expensive topping, the cheapest, or perhaps the average cost?"
    },
    {
      "content": "Before diving into calculations, ensure you can iterate over the toppings correctly. You might want to practice accessing each topping's name and cost in a loop."
    },
    {
      "content": "When calculating costs, remember to handle floating-point precision. Python's float can sometimes lead to unexpected results due to rounding errors."
    },
    {
      "content": "Consider edge cases, such as what happens if there are no toppings or if all toppings have the same cost. How would your code handle these situations?"
    },
    {
      "content": "If you need to find the most expensive topping, think about how you can compare costs as you iterate through the list. You might want to keep track of the highest cost found so far."
    },
    {
      "content": "When calculating the average cost, remember to sum all costs and divide by the number of toppings. Ensure you handle the case where the number of toppings is zero to avoid division by zero errors."
    },
    {
      "content": "If you're required to return the results in a specific format, make sure to structure your output correctly. For example, if you need to return a list of toppings sorted by cost, think about how you would sort your data."
    },
    {
      "content": "Finally, think about how you might implement a function that takes the toppings data as input and returns the desired analysis results. Consider what parameters your function will need and how you will structure the return value."
    }
  ],
  "questionNotes": [
    "The input is structured as a JSON object with headers and rows.",
    "Each topping has a unique name and a cost associated with it.",
    "Be mindful of handling floating-point numbers when performing calculations.",
    "Consider edge cases such as empty toppings list or all toppings having the same cost.",
    "The output format should match any specified requirements, such as sorted lists or specific data structures."
  ]
}