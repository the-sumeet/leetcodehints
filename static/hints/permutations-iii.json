{
  "hints": [
    {
      "content": "Start by understanding what permutations are. A permutation of a set is a rearrangement of its elements. For example, the permutations of [1, 2] are [1, 2] and [2, 1]."
    },
    {
      "content": "Consider how to generate all possible permutations of a given list. You can use recursion or backtracking to explore all arrangements of the elements."
    },
    {
      "content": "Think about how you can handle duplicates in the input. If your input list has repeating elements, you'll need to ensure that your permutations are unique."
    },
    {
      "content": "When generating permutations, keep track of which elements have already been used in the current arrangement. This will help you avoid repeating the same element in a single permutation."
    },
    {
      "content": "You might want to use a data structure like a boolean array to mark which elements are included in the current permutation. This will help you manage the state as you build each permutation."
    },
    {
      "content": "Consider the base case for your recursive function. When you have built a permutation of the same length as the input list, you should add it to your results."
    },
    {
      "content": "Think about how to format your output. The problem might require you to return a list of lists, where each inner list represents a unique permutation."
    },
    {
      "content": "Edge cases are important! What happens if the input list is empty or contains only one element? Make sure your solution handles these cases gracefully."
    },
    {
      "content": "As you implement your solution, remember to test it with various inputs, especially those that include duplicate elements. This will help ensure that your solution is robust."
    },
    {
      "content": "Finally, consider how to optimize your solution. If you are generating permutations of a large list with many duplicates, think about how you can skip over duplicate elements to reduce unnecessary computations."
    }
  ],
  "questionNotes": [
    "The input list can contain duplicates, so ensure that each permutation in the output is unique.",
    "The output format should be a list of lists, where each inner list is a permutation.",
    "Consider edge cases such as an empty input list or a list with a single element."
  ]
}