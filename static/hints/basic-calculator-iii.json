{
  "hints": [
    {
      "content": "Start by understanding the basic operations involved in the problem. You will need to handle addition, subtraction, multiplication, and division. Consider how you would perform these operations on two numbers."
    },
    {
      "content": "Think about how to parse the input string. You can iterate through the string character by character to identify numbers and operators. Remember to handle multi-digit numbers as well."
    },
    {
      "content": "Consider using a stack to help manage the order of operations. The stack can be used to store numbers and apply operations when necessary, especially for handling parentheses."
    },
    {
      "content": "Remember the order of operations (PEMDAS/BODMAS). Multiplication and division should be performed before addition and subtraction. How will you ensure that your calculations respect this order?"
    },
    {
      "content": "When you encounter an operator, think about what to do with the previous number. Should you apply the operator immediately, or wait until you have more context (like parentheses)?"
    },
    {
      "content": "Pay attention to parentheses. They change the order of operations significantly. You need to evaluate the expression inside parentheses first before moving on to the rest of the expression."
    },
    {
      "content": "As you parse the string, consider how to handle whitespace. The problem statement does not mention spaces, but it's a good practice to ignore them if they appear."
    },
    {
      "content": "You may want to implement a helper function to evaluate expressions that are enclosed in parentheses. This function can recursively call itself to handle nested parentheses."
    },
    {
      "content": "Think about how to manage the division operation. Remember that integer division should be handled carefully to avoid truncating results unexpectedly."
    },
    {
      "content": "When you encounter an operator, decide if you need to pop from the stack based on the operator's precedence. For example, if the current operator is '*' or '/', you might want to apply it immediately."
    },
    {
      "content": "As you build your final result, consider how to combine the numbers in the stack. You may need to iterate through the stack at the end to compute the final result."
    },
    {
      "content": "Edge cases are important! Consider scenarios like empty strings, strings with only operators, or very large numbers. How will your code handle these situations?"
    },
    {
      "content": "You should also think about how to handle negative numbers. Are they included in the input? If so, how will you identify and process them?"
    },
    {
      "content": "Make sure to test your implementation with various inputs, including those with multiple operations and nested parentheses. This will help you ensure that your solution is robust."
    },
    {
      "content": "Finally, outline the steps in your algorithm clearly. You might want to break it down into parsing the string, handling operations, and calculating the final result. This will help you stay organized."
    }
  ],
  "questionNotes": [
    "The input is a string representing a mathematical expression.",
    "Operators include '+', '-', '*', and '/'.",
    "Parentheses can be used to change the order of operations.",
    "The expression may contain multi-digit numbers.",
    "Whitespace should be ignored.",
    "Division should truncate towards zero."
  ]
}