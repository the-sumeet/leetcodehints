{
  "hints": [
    {
      "content": "Start by understanding the structure of a singly linked list. Each node contains a value and a reference to the next node. For example, a list with values [1, 2, 3] would have nodes linked as: Node(1) -> Node(2) -> Node(3)."
    },
    {
      "content": "Consider the base cases for your function. What should you return if the input list is empty (head is null) or if it contains only one node? These cases can help simplify your logic."
    },
    {
      "content": "Think about how you can reverse the links between nodes. You need to change the 'next' reference of each node to point to the previous node instead of the next one."
    },
    {
      "content": "For an iterative approach, you can use three pointers: 'prev', 'current', and 'next'. Start with 'prev' as null and 'current' as the head of the list. As you iterate, update these pointers accordingly."
    },
    {
      "content": "In each iteration of your loop, you'll want to store the next node before changing the current node's next reference. This prevents losing access to the rest of the list."
    },
    {
      "content": "Once you've iterated through the list, 'prev' will be pointing to the new head of the reversed list. Make sure to return 'prev' at the end of your function."
    },
    {
      "content": "If you prefer a recursive approach, think about how you can use the call stack to reverse the list. Each recursive call should handle one node and return the new head of the reversed list."
    },
    {
      "content": "In the recursive approach, after reaching the end of the list, you will need to set the next reference of the current node to point back to the previous node. This requires careful handling of the base case."
    },
    {
      "content": "Remember to handle edge cases, such as when the list is empty or contains only one node. Ensure your function behaves correctly in these scenarios."
    },
    {
      "content": "Finally, implement your chosen approach and test it against the provided examples. Make sure to check for edge cases as well, such as an empty list or a list with a single node."
    }
  ],
  "questionNotes": [
    "The input is a singly linked list, where each node has a value and a reference to the next node.",
    "The function should return the head of the reversed linked list.",
    "Consider both iterative and recursive solutions.",
    "Handle edge cases like an empty list or a single-node list appropriately."
  ]
}