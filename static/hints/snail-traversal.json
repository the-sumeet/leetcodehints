{
  "hints": [
    {
      "content": "Start by validating the input. Check if the product of `rowsCount` and `colsCount` equals the length of the input array `nums`. If not, return an empty array immediately."
    },
    {
      "content": "Consider how you will structure your 2D array. You will need an array of arrays, where the outer array has `rowsCount` elements, and each inner array has `colsCount` elements."
    },
    {
      "content": "Think about how to fill the 2D array in a snail traversal order. Start from the top left and remember that you will alternate the direction of filling each column."
    },
    {
      "content": "To fill the first column, you will iterate from the top to the bottom. For the second column, you will go from bottom to top. Keep track of which direction you are currently filling."
    },
    {
      "content": "Use a loop to iterate through the columns of the 2D array. Inside this loop, use another loop to fill the values based on the current column index's parity (even or odd)."
    },
    {
      "content": "When filling a column, calculate the starting and ending indices based on the current column and the direction of traversal. For example, for an even column, start from the top and go down."
    },
    {
      "content": "Make sure to correctly index into the original array `nums` as you fill the 2D array. Use a separate counter to keep track of which element from `nums` you are currently placing."
    },
    {
      "content": "Consider edge cases, such as when `nums` is empty or when `rowsCount` or `colsCount` is 1. How will your code handle these situations?"
    },
    {
      "content": "Once you have filled the 2D array, ensure that you return it in the correct format. The outer structure should be an array of arrays, matching the specified dimensions."
    },
    {
      "content": "Finally, review your logic and ensure that the traversal pattern is correct. You might want to write test cases to verify that the output matches the expected snail traversal order."
    }
  ],
  "questionNotes": [
    "Return an empty array for invalid input (rowsCount * colsCount !== nums.length).",
    "The output must be a 2D array with `rowsCount` rows and `colsCount` columns.",
    "Ensure that the traversal alternates direction for each column.",
    "Handle edge cases, such as empty input or dimensions that don't match the input array size."
  ]
}