{
  "hints": [
    {
      "content": "Start by understanding what it means for a binary tree to be height-balanced. A tree is height-balanced if the difference in height between the left and right subtrees of any node is at most 1."
    },
    {
      "content": "Consider how you would calculate the height of a subtree. You can define a recursive function that returns the height of a subtree rooted at a given node."
    },
    {
      "content": "Remember that a null node contributes a height of -1 (or 0, depending on your definition). This will help in calculating heights correctly."
    },
    {
      "content": "As you calculate the height of each subtree, check the balance condition at each node. If the difference in heights exceeds 1, you can immediately conclude that the tree is not balanced."
    },
    {
      "content": "Think about how you can combine the height calculation and balance checking into a single recursive function. This will help you avoid unnecessary repeated calculations."
    },
    {
      "content": "When you traverse the tree, you might want to return both the height of the subtree and a boolean indicating whether it is balanced. This can be done using a tuple or a custom object."
    },
    {
      "content": "Consider edge cases such as an empty tree. An empty tree is considered balanced by definition, so ensure your function handles this case appropriately."
    },
    {
      "content": "Don't forget to handle trees with only one node. A single node tree is also height-balanced, so your function should return true for this case."
    },
    {
      "content": "Think about the time complexity of your solution. A naive approach might lead to recalculating heights multiple times, so aim for an O(n) solution by combining height and balance checks."
    },
    {
      "content": "Your final function should return a boolean indicating whether the entire tree is balanced. Make sure to test your implementation with various cases, including edge cases."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the tree is in the range [0, 5000].",
    "Node values are in the range [-10^4, 10^4].",
    "An empty tree (root = null) is considered balanced.",
    "The output should be a boolean value: true if the tree is balanced, false otherwise."
  ]
}