{
  "hints": [
    {
      "content": "Start by understanding what a divisibility score is. For each divisor in the `divisors` array, you need to count how many numbers in the `nums` array are divisible by it."
    },
    {
      "content": "Remember that a number `a` is divisible by `b` if `a % b == 0`. You can use this condition to check divisibility for each pair of numbers."
    },
    {
      "content": "Consider using a loop to iterate through the `divisors` array. For each divisor, you will need another loop to check each number in the `nums` array."
    },
    {
      "content": "As you count the divisibility scores, keep track of the maximum score found so far and the corresponding divisor. You can use two variables for this: one for the maximum score and one for the divisor that achieved it."
    },
    {
      "content": "Don't forget to handle the case where multiple divisors have the same maximum score. You should return the smallest divisor in this case."
    },
    {
      "content": "When comparing divisors with the same score, you can use a simple conditional check: if the current divisor is smaller than the stored one with the maximum score, update it."
    },
    {
      "content": "Make sure to initialize your maximum score variable to a value that will be lower than any possible score. A good choice could be -1, since scores cannot be negative."
    },
    {
      "content": "Consider edge cases, such as when all numbers in `nums` are the same or when all divisors are larger than any number in `nums`. What should your function return in these scenarios?"
    },
    {
      "content": "Think about the constraints given in the problem. With `nums` and `divisors` having lengths up to 1000, your solution should ideally be efficient enough to handle the worst-case scenario."
    },
    {
      "content": "To summarize your approach: Loop through each divisor, count how many numbers in `nums` are divisible by it, compare scores, and handle ties by choosing the smaller divisor. Start implementing this logic step-by-step!"
    }
  ],
  "questionNotes": [
    "1 <= nums.length, divisors.length <= 1000",
    "1 <= nums[i], divisors[i] <= 10^9",
    "Return the smallest divisor in case of a tie on the maximum score."
  ]
}