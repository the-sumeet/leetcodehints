{
  "hints": [
    {
      "content": "Start by understanding the basic functionality of the wildcard characters. The '?' character can match any single character, while '*' can match any sequence of characters, including an empty sequence."
    },
    {
      "content": "Consider how to handle the case when both the string and the pattern are empty. What should the output be in this scenario? Think about the base case."
    },
    {
      "content": "When you encounter a '?', remember that it can match any single character in the string. How would you handle this in your matching logic?"
    },
    {
      "content": "For the '*' character, think about the different scenarios it can represent. It can match zero characters or more. How might you represent this in your algorithm?"
    },
    {
      "content": "You might want to use dynamic programming (DP) to solve this problem efficiently. Consider creating a DP table where dp[i][j] indicates whether s[0..i] matches p[0..j]."
    },
    {
      "content": "Initialize your DP table carefully. What should the values be for the cases where either the string or the pattern is empty?"
    },
    {
      "content": "As you fill in the DP table, think about how to handle the '*' character. You will need to consider both the case where '*' matches no characters and where it matches one or more characters."
    },
    {
      "content": "When processing the pattern, if you encounter a '*', you might want to look back at the previous state in your DP table. How would you incorporate that into your logic?"
    },
    {
      "content": "Don't forget to handle the case where the pattern ends with '*' separately. This can simplify your logic for matching the string to the pattern."
    },
    {
      "content": "Remember to traverse both the string and the pattern fully. What conditions will you check to determine if the entire string matches the entire pattern?"
    },
    {
      "content": "Consider edge cases, such as when the pattern is only made up of '*' characters. What should the result be in this case?"
    },
    {
      "content": "Think about how to optimize your solution. If the pattern contains multiple '*' characters, can you reduce the number of states you need to keep track of?"
    },
    {
      "content": "As you implement your solution, make sure to test with various combinations of strings and patterns, especially those that include consecutive '*' characters."
    },
    {
      "content": "Before finalizing your solution, review the constraints. The lengths of the string and pattern can be up to 2000 characters. How does this affect your choice of algorithm?"
    },
    {
      "content": "Finally, ensure that your function returns a boolean value indicating whether the input string matches the pattern completely. What will you return if they do match?"
    }
  ],
  "questionNotes": [
    "The matching should cover the entire input string, not partial matches.",
    "Constraints: 0 <= s.length, p.length <= 2000.",
    "s contains only lowercase English letters.",
    "p contains only lowercase English letters, '?' or '*'."
  ]
}