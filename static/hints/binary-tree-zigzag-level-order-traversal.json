{
  "hints": [
    {
      "content": "Start by understanding the structure of a binary tree. Each node has a value, a left child, and a right child. You will need to traverse the tree level by level."
    },
    {
      "content": "Consider how you can use a queue to help with level order traversal. You can enqueue nodes level by level and process them in order."
    },
    {
      "content": "Remember that you need to alternate the order of traversal for each level. Think about how you can keep track of whether you are currently on an even or odd level."
    },
    {
      "content": "When you process nodes at each level, you might want to use a temporary list to hold the values of the nodes at that level before adding them to the final result."
    },
    {
      "content": "For levels that need to be reversed, you can either reverse the temporary list before adding it to the result or insert elements at the beginning of the result list."
    },
    {
      "content": "Consider edge cases, such as when the tree is empty. What should your function return in that case? Make sure to handle this scenario appropriately."
    },
    {
      "content": "Think about the data structure you will use to store the final result. A list of lists would be suitable for storing the values of each level."
    },
    {
      "content": "As you traverse the tree, make sure to enqueue both the left and right children of the current node, if they exist. This will ensure you don't miss any nodes."
    },
    {
      "content": "When you reach the end of a level, check if you need to reverse the collected values based on the current level's index (even or odd). Use a boolean flag to keep track of this."
    },
    {
      "content": "Finally, ensure that your function returns the correct format: a list of lists, where each inner list contains the values of nodes at that level in the correct order."
    }
  ],
  "questionNotes": [
    "The number of nodes in the tree is in the range [0, 2000].",
    "Node values are between -100 and 100.",
    "Return format should be a list of lists, where each inner list represents a level of the tree."
  ]
}