{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. The input can be an object with key-value pairs where keys are strings and values are also strings. For example, in the input {\"a\": \"1\", \"b\": \"2\"}, 'a' and 'b' are keys."
    },
    {
      "content": "Consider how you might want to invert the object. Inverting means swapping keys with their corresponding values. Think about what the resulting structure would look like after inversion."
    },
    {
      "content": "Keep in mind that if two keys have the same value, inverting will cause a loss of information. For instance, in {\"a\": \"1\", \"b\": \"1\"}, both 'a' and 'b' would map to '1' in the inverted object."
    },
    {
      "content": "When inverting, you will need to create a new object. You can initialize an empty object and then iterate through the original object's key-value pairs to populate this new object."
    },
    {
      "content": "Think about how to handle cases where the same value appears for different keys. What should happen in the inverted object? You might want to decide whether to overwrite or store multiple keys."
    },
    {
      "content": "Consider how the order of keys might affect your solution. In JavaScript, object properties do not guarantee order, but in some languages, they might. How will you handle this in your implementation?"
    },
    {
      "content": "You should also think about the input types. Ensure that you are only dealing with string keys and values. What will you do if the input contains non-string types?"
    },
    {
      "content": "Make sure to write tests for edge cases. For example, what happens if the input is an empty object? Or if there are duplicate values for different keys?"
    },
    {
      "content": "As you build your solution, consider how you will return the inverted object. Should it be returned as an object or a different structure, like an array?"
    },
    {
      "content": "Finally, implement the logic to iterate through the input object and construct the inverted object. Remember to check for existing keys in the new object to handle duplicates appropriately."
    }
  ],
  "questionNotes": [
    "Input can be an object with string keys and string values.",
    "Inversion means swapping keys with their corresponding values.",
    "If two keys have the same value, information may be lost in the inverted object.",
    "Consider how to handle duplicate values when inverting.",
    "Ensure to handle edge cases like empty objects or non-string inputs."
  ]
}