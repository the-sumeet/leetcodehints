{
  "hints": [
    {
      "content": "Start by understanding the input parameters of the function. You have an array `arr` and a filtering function `fn`. Make sure you know how to call `fn` with the appropriate arguments."
    },
    {
      "content": "Remember that `fn` can take either one or two arguments. The first argument is the element from `arr`, and the second (optional) argument is the index of that element. Think about how you will handle both cases."
    },
    {
      "content": "Since you cannot use the built-in `Array.filter` method, consider how you will iterate over the elements of `arr`. A common approach is to use a `for` loop or a `while` loop."
    },
    {
      "content": "As you iterate through `arr`, you will need to call `fn` for each element. Make sure to check the return value of `fn` to determine if the element should be included in the new array."
    },
    {
      "content": "You will need a new array to store the filtered results. Initialize an empty array before starting your loop, and push elements into this array when `fn` returns a truthy value."
    },
    {
      "content": "Consider edge cases, such as when `arr` is empty. Your function should still return an empty array in this case, so make sure to handle it gracefully."
    },
    {
      "content": "Think about how you will determine if the return value from `fn` is truthy. Remember that in JavaScript, values like `0`, `null`, `undefined`, and `false` are considered falsy."
    },
    {
      "content": "As you build your filtered array, remember to maintain the original order of elements from `arr`. The order of elements in `filteredArr` should match their order in `arr`."
    },
    {
      "content": "Make sure to test your function with different filtering functions to ensure it behaves as expected. For example, test it with functions that check for conditions like greater than a number or specific indices."
    },
    {
      "content": "Finally, structure your loop to call `fn` with both the element and its index, and check the return value. If itâ€™s truthy, add the element to your new array. This will bring you very close to a complete solution."
    }
  ],
  "questionNotes": [
    "The function `fn` can take one or two arguments: the element and its index.",
    "Return an array that contains only the elements for which `fn` returns a truthy value.",
    "Handle edge cases, such as an empty input array.",
    "Maintain the original order of elements in the output array."
  ]
}