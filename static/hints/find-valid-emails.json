{
  "hints": [
    {
      "content": "Start by identifying the basic structure of a valid email. A valid email must contain exactly one '@' symbol. You can use string functions to count the occurrences of '@' in the email."
    },
    {
      "content": "Next, check if the email ends with '.com'. This can be done using string slicing or the `endswith` method in your programming language of choice."
    },
    {
      "content": "Focus on the part before the '@' symbol. This part should only contain alphanumeric characters and underscores. You can use regular expressions or character checks to validate this."
    },
    {
      "content": "Now, examine the part after the '@' and before '.com'. This domain name must consist only of letters. Again, regular expressions can be very helpful here."
    },
    {
      "content": "Consider edge cases such as emails that have multiple '@' symbols or those that do not contain any. Ensure your solution captures these scenarios correctly."
    },
    {
      "content": "Remember to filter out any emails that do not meet all the criteria. You can start building a list or a result set to store valid emails."
    },
    {
      "content": "As you prepare to return your results, ensure you are sorting the valid emails by `user_id` in ascending order. This will likely require you to maintain the original `user_id` alongside the email."
    },
    {
      "content": "Think about how you will handle cases where the email format is completely incorrect. For example, emails like 'user@' or 'user.com' should be invalid."
    },
    {
      "content": "You might want to use a regular expression to combine some of the checks into a single line. For instance, you could create a regex pattern that checks for the entire valid email structure."
    },
    {
      "content": "Finally, ensure your output format matches the requirements. You need to return a table with `user_id` and `email`, ordered by `user_id`. Make sure to structure your final output accordingly."
    }
  ],
  "questionNotes": [
    "Each email must contain exactly one '@' symbol.",
    "Emails must end with '.com'.",
    "The part before '@' can only contain alphanumeric characters and underscores.",
    "The domain part after '@' must only contain letters.",
    "Return the result ordered by `user_id` in ascending order."
  ]
}