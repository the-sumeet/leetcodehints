{
  "hints": [
    {
      "content": "Start by understanding the structure of a linked list. Each node has a value and a pointer to the next node. You'll need to traverse this list to identify duplicates."
    },
    {
      "content": "Since the list is sorted, duplicates will always be adjacent. This property can help you efficiently identify and skip over nodes that have duplicate values."
    },
    {
      "content": "Consider using a dummy node at the start of your list. This can help simplify edge cases, such as when the head of the list itself is a duplicate."
    },
    {
      "content": "As you traverse the list, keep track of the current node and compare its value with the next node. If they are the same, continue moving forward until you find a node with a different value."
    },
    {
      "content": "When you find duplicates, you need to remove them from the list. Make sure to connect the previous node to the next node after skipping the duplicates."
    },
    {
      "content": "Remember to handle the case where all nodes are duplicates. In such cases, you should return an empty list."
    },
    {
      "content": "Think about how you will return the modified list. You should return the next node of the dummy node you created at the beginning."
    },
    {
      "content": "Ensure that your solution runs in O(n) time complexity, where n is the number of nodes in the list. This is feasible since you are making a single pass through the list."
    },
    {
      "content": "While traversing, keep track of whether you've encountered duplicates. This will help you decide when to connect the previous node to the next unique node."
    },
    {
      "content": "Finally, your implementation should effectively handle edge cases such as an empty list or a list with only one node. Test your solution with these cases to ensure robustness."
    }
  ],
  "questionNotes": [
    "The list is guaranteed to be sorted in ascending order.",
    "You need to return a linked list that only contains distinct numbers.",
    "The number of nodes in the list is in the range [0, 300].",
    "-100 <= Node.val <= 100."
  ]
}