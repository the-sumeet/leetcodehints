{
  "hints": [
    {
      "content": "Start by understanding what the problem is asking. You need to find the longest sequence of 1s in a binary array. Think about how you would identify sequences in a list."
    },
    {
      "content": "Consider how you can traverse the array. A simple loop can help you go through each element. What condition will you check to determine if you're in a sequence of 1s?"
    },
    {
      "content": "As you loop through the array, keep track of the current count of consecutive 1s. What will you do when you encounter a 0? How will that affect your count?"
    },
    {
      "content": "You'll need to compare the current count of consecutive 1s with a maximum count variable. How can you update this maximum count whenever you find a longer sequence?"
    },
    {
      "content": "Don't forget to reset your current count whenever you hit a 0. Think about how you can use an if-else structure to manage this logic."
    },
    {
      "content": "Consider what happens at the end of the array. If the array ends with a sequence of 1s, how will you ensure that this sequence is counted in your maximum?"
    },
    {
      "content": "Make sure to handle edge cases, such as an array that contains only 0s or only 1s. What should your function return in these scenarios?"
    },
    {
      "content": "You can use a single pass through the array, which makes your solution efficient. What is the time complexity of your approach? Can you achieve O(n) time complexity?"
    },
    {
      "content": "Think about how you will initialize your variables. You will need at least two variables: one for the current count of 1s and one for the maximum count. How will you set these up?"
    },
    {
      "content": "Finally, put together the logic in your loop. Remember to check each element, update counts, and return the maximum count at the end. What will your final return statement look like?"
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Elements in nums are either 0 or 1.",
    "Return the maximum number of consecutive 1s.",
    "Consider edge cases like all 0s or all 1s."
  ]
}