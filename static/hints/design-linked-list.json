{
  "hints": [
    {
      "content": "Start by defining the structure of a node in your linked list. For a singly linked list, you need a class or structure with two attributes: `val` for the value and `next` for the pointer to the next node."
    },
    {
      "content": "Consider how to manage the head of the linked list. You will need a reference to the head node to perform operations like adding or deleting nodes."
    },
    {
      "content": "When implementing the `addAtHead` method, remember to update the head pointer to point to the new node, and set the new node's `next` to the current head."
    },
    {
      "content": "For the `addAtTail` method, traverse the list until you reach the last node. Set the `next` of the last node to the new node, ensuring you handle the case where the list is initially empty."
    },
    {
      "content": "In the `addAtIndex` method, you need to handle three scenarios: inserting at the head, inserting at the tail, and inserting in the middle. Make sure to check if the index is valid before proceeding."
    },
    {
      "content": "When implementing the `get` method, traverse the list until you reach the specified index. Be careful to return -1 if the index is out of bounds."
    },
    {
      "content": "The `deleteAtIndex` method requires careful handling of pointers. If you're deleting the head, update the head pointer. For other indices, ensure you correctly link the previous node to the node after the one being deleted."
    },
    {
      "content": "Consider edge cases such as adding or deleting from an empty list. Make sure your methods can handle these scenarios gracefully without throwing errors."
    },
    {
      "content": "Remember to keep track of the length of the linked list. This will help you efficiently check if an index is valid and can also be used in the `addAtIndex` method."
    },
    {
      "content": "Finally, when implementing all methods, ensure that you are maintaining the integrity of the linked list structure. For example, after adding or deleting nodes, all pointers should correctly point to their respective nodes."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= index, val <= 1000.",
    "Do not use the built-in LinkedList library.",
    "At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex, and deleteAtIndex.",
    "All nodes in the linked list are 0-indexed."
  ]
}