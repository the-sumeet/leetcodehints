{
  "hints": [
    {
      "content": "Start by understanding the input array. It is sorted in non-decreasing order, which means all negative numbers will be on the left and positive numbers on the right. This property can be leveraged to optimize your solution."
    },
    {
      "content": "Consider how squaring negative numbers affects their order. For example, squaring -4 gives you 16, which is greater than the squares of smaller negative numbers. This means the largest squares will come from both ends of the array."
    },
    {
      "content": "Think about how you can use two pointers to traverse the array. One pointer can start at the beginning (left) and the other at the end (right). This will help you compare the squares of the numbers at both ends."
    },
    {
      "content": "As you square the numbers, keep in mind that you need to build a new array for the results. You can start filling this new array from the back, since the largest squares will be found at the ends of the original array."
    },
    {
      "content": "When you compare the squares of the numbers at the two pointers, you should place the larger square at the end of your result array. This way, you ensure that the result is sorted as you fill it."
    },
    {
      "content": "Make sure to handle the case where the array has only one element. In this case, simply return the square of that element in a new array."
    },
    {
      "content": "Consider edge cases where the input array might contain all negative numbers or all positive numbers. How would your approach handle these scenarios?"
    },
    {
      "content": "Remember that the final output should be an array of the squares sorted in non-decreasing order. Ensure that your implementation adheres to this requirement."
    },
    {
      "content": "You can initialize your result array with the same length as the input array. This will help you keep track of where to place the squares as you process the input."
    },
    {
      "content": "To summarize your approach, you will use two pointers to compare squares from both ends of the array, filling a new result array from the back towards the front. Make sure to handle the pointers correctly to avoid going out of bounds."
    }
  ],
  "questionNotes": [
    "Input array is sorted in non-decreasing order.",
    "Constraints: 1 <= nums.length <= 10^4 and -10^4 <= nums[i] <= 10^4.",
    "Output should be an array of squares sorted in non-decreasing order.",
    "Consider edge cases for arrays with all negatives, all positives, or a single element."
  ]
}