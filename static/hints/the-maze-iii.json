{
  "hints": [
    {
      "content": "Start by understanding the maze structure. The maze is represented as a 2D grid where 0s are open paths and 1s are walls. Make sure you can visualize how the ball can move through the maze."
    },
    {
      "content": "Remember that the ball can roll in four directions: up, down, left, and right. However, it rolls until it hits a wall. Consider how you can implement this movement in your code."
    },
    {
      "content": "Think about how to represent the current position of the ball. You will need to track its coordinates as it rolls through the maze. Use a tuple or a list to store these coordinates."
    },
    {
      "content": "When the ball rolls, it continues until it hits a wall. You can create a function that simulates this rolling behavior. For example, if the ball rolls down, it should keep moving down until it encounters a 1."
    },
    {
      "content": "Consider how to handle the ball's stopping condition. Once it hits a wall, you need to determine its final position. Make sure to test edge cases where the ball might be close to the edge of the maze."
    },
    {
      "content": "You will need to keep track of the visited positions to avoid cycles. Use a set or a similar structure to store the coordinates that have already been processed."
    },
    {
      "content": "Think about how you will explore all possible paths. A depth-first search (DFS) or breadth-first search (BFS) approach could work well here. Choose one and outline how it will help you explore the maze."
    },
    {
      "content": "As you explore paths, remember to store the result of each path. You might want to keep track of the distance from the start position to the end position for each path."
    },
    {
      "content": "When you find a valid exit, consider how to store the result. You may need to keep track of the shortest path or the lexicographically smallest path if multiple paths exist."
    },
    {
      "content": "Pay attention to the exit conditions. The ball can exit the maze if it rolls out of bounds. Make sure to check for this condition in your path exploration logic."
    },
    {
      "content": "When implementing your search algorithm, ensure that you handle the case where the ball cannot reach any exit. You should return an appropriate result in this case."
    },
    {
      "content": "Consider edge cases, such as when the start position is already at an exit or when all paths are blocked by walls. How will your algorithm handle these scenarios?"
    },
    {
      "content": "Think about how to format your final output. The problem specifies that you should return the exit coordinates and the path taken. Make sure your function adheres to this format."
    },
    {
      "content": "As you finalize your implementation, check if you need to sort the results based on the problem's requirements. If multiple exits are possible, ensure you return the correct one."
    },
    {
      "content": "Finally, review your code for any potential edge cases you might have missed. Consider running additional test cases to validate your solution before submission."
    }
  ],
  "questionNotes": [
    "The maze is a 2D grid with 0s (open paths) and 1s (walls).",
    "The ball rolls until it hits a wall and can exit the maze if it rolls out of bounds.",
    "You need to return the exit coordinates and the path taken.",
    "Handle cases where the ball cannot reach any exit appropriately.",
    "If multiple exits are possible, return the lexicographically smallest exit."
  ]
}