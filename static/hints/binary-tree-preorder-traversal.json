{
  "hints": [
    {
      "content": "To understand preorder traversal, remember the order of visiting nodes: root, then left subtree, and finally right subtree. This means you should process the root node first before exploring its children."
    },
    {
      "content": "Consider how you would traverse a tree recursively. What would be the base case for your recursion? Think about what you would return when you reach a null node."
    },
    {
      "content": "In a recursive approach, you can define a helper function that takes a node and a list to store the result. Each time you visit a node, append its value to the list before calling the function on its left and right children."
    },
    {
      "content": "For the iterative approach, think about how you can simulate the call stack of recursion. A stack data structure is a good candidate for this purpose. How would you use a stack to keep track of nodes to visit?"
    },
    {
      "content": "When using a stack for the iterative approach, remember to push the right child first, so that the left child is processed next when you pop from the stack. This maintains the preorder traversal order."
    },
    {
      "content": "Make sure to handle edge cases, such as when the tree is empty (i.e., the root is null). What should your function return in this case? An empty list is the expected output."
    },
    {
      "content": "As you build your result list, consider how you will return it at the end of your function. Ensure that you are returning the list in the correct format as specified in the problem statement."
    },
    {
      "content": "Think about how you can initialize your stack and result list at the beginning of your iterative function. What initial values do you need to set up before starting the traversal?"
    },
    {
      "content": "While processing nodes, remember to check if the current node is null before accessing its properties. This will help avoid null reference errors during traversal."
    },
    {
      "content": "Finally, ensure that your function is efficient and adheres to the constraints given. What is the time complexity of your approach? Aim for O(n) since you need to visit every node."
    }
  ],
  "questionNotes": [
    "The function should return a list of node values in preorder traversal.",
    "Constraints: The number of nodes in the tree is between 0 and 100.",
    "Node values range from -100 to 100.",
    "The input can represent a binary tree in a serialized format, where null indicates the absence of a node."
  ]
}