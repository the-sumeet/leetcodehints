{
  "hints": [
    {
      "content": "Start by understanding what it means for three arrays to intersect. You need to find elements that are present in all three arrays. Consider how you might check for the presence of an element in each array."
    },
    {
      "content": "Since the arrays are sorted, think about how you can leverage this property. You could use a pointer or index for each array to traverse them efficiently."
    },
    {
      "content": "Consider initializing three pointers, one for each array, and start from the beginning of each array. Compare the elements at these pointers to decide how to move forward."
    },
    {
      "content": "When comparing elements, if they are equal, you have found a common element. Make sure to store this element in a result list. Think about how you will handle duplicates."
    },
    {
      "content": "If the elements at the pointers are not equal, you need to determine which pointer to move. Remember that since the arrays are sorted, you should move the pointer pointing to the smallest element."
    },
    {
      "content": "As you traverse the arrays, keep track of the indices carefully. Make sure you do not go out of bounds, especially when moving the pointers."
    },
    {
      "content": "Think about edge cases, such as when one of the arrays is empty. What should your function return in this case? Consider initializing your result list before starting the traversal."
    },
    {
      "content": "After finding all common elements, consider how you want to return the result. Should it be a list of unique elements or can there be duplicates?"
    },
    {
      "content": "When you have completed the traversal, ensure you have handled all possible scenarios. What if there are no common elements? Your return value should reflect that."
    },
    {
      "content": "Finally, put together the logic for traversing the arrays using the pointers. Your final loop should look something like this: while all pointers are within bounds, compare the elements and move the pointers accordingly."
    }
  ],
  "questionNotes": [
    "The input consists of three sorted arrays.",
    "You need to find elements that are present in all three arrays.",
    "Return the intersection as a list of unique elements.",
    "Handle edge cases, such as empty arrays or no common elements."
  ]
}