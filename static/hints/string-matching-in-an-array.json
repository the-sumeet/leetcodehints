{
  "hints": [
    {
      "content": "Start by understanding what it means for one string to be a substring of another. A substring is a sequence of characters that appears consecutively within another string. For example, 'as' is a substring of 'mass'."
    },
    {
      "content": "Consider how you can iterate through the array of strings. You will need to compare each string with every other string to check if one is a substring of the other."
    },
    {
      "content": "Think about the data structure you might use to store the results. A list or array would be appropriate for collecting the substrings that meet the criteria."
    },
    {
      "content": "Remember that the order of the output does not matter. You can return the results as soon as you find a valid substring, without worrying about sorting them."
    },
    {
      "content": "Since all strings are unique, you won't encounter duplicates in your results. This simplifies your logic a bit, as you won't need to check for repeated entries."
    },
    {
      "content": "Consider edge cases, such as when the input array contains only one string. In this case, there can be no substrings, so your output should be an empty list."
    },
    {
      "content": "When comparing strings, you might want to use the built-in substring checking method in your programming language. For example, in Python, you can use the 'in' keyword: 'as' in 'mass'."
    },
    {
      "content": "Think about the time complexity of your approach. A nested loop will give you O(n^2) complexity, which is acceptable given the constraints (1 <= words.length <= 100)."
    },
    {
      "content": "Make sure to check every string against every other string, but you can skip comparing a string with itself. This will save some unnecessary checks."
    },
    {
      "content": "As a final step, ensure you are returning the results in the correct format, which is a list of strings that are substrings of another string in the input array. You can use a simple return statement for this."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= words.length <= 100",
    "1 <= words[i].length <= 30",
    "words[i] contains only lowercase English letters.",
    "All the strings of words are unique.",
    "Return format: Any order of substrings that are found."
  ]
}