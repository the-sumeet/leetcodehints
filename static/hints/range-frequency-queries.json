{
  "hints": [
    {
      "content": "Start by considering how you would count occurrences of a value in a simple array. What would be the most straightforward way to do this?"
    },
    {
      "content": "Remember that the query method needs to operate on a subarray defined by the left and right indices. How would you extract this subarray from the original array?"
    },
    {
      "content": "Think about the time complexity of your approach. If you were to count occurrences for each query by iterating through the subarray, what would the worst-case time complexity be?"
    },
    {
      "content": "Consider how you might optimize your solution. Could you preprocess the array in some way to make querying faster? What data structure could help with this?"
    },
    {
      "content": "One potential optimization is to create a mapping of each value to the indices where it appears in the original array. How would you implement this mapping?"
    },
    {
      "content": "Once you have the indices for each value, think about how you can efficiently count occurrences within a specific range. What algorithm could you use to find the number of indices that fall within the left and right bounds?"
    },
    {
      "content": "Consider using binary search to quickly find the range of indices for the queried value. How would you implement binary search to find the lower and upper bounds?"
    },
    {
      "content": "Make sure to handle edge cases, such as when the queried value does not exist in the array. What should your function return in such cases?"
    },
    {
      "content": "Remember that the input array can have up to 100,000 elements, and you can have up to 100,000 queries. How will you ensure that your solution remains efficient under these constraints?"
    },
    {
      "content": "Finally, put together your preprocessing step and the query method. Your query method should return the count of occurrences of the value in the specified range using the data structure you've built."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= arr.length <= 100,000",
    "1 <= arr[i], value <= 10,000",
    "0 <= left <= right < arr.length",
    "At most 100,000 calls will be made to query",
    "Ensure to handle edge cases like non-existent values"
  ]
}