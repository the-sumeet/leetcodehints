{
  "hints": [
    {
      "content": "Start by sorting the input array. This will help you easily skip duplicates and use a two-pointer technique later on. Remember that sorting changes the indices of the elements."
    },
    {
      "content": "Consider using a loop to fix one element of the triplet. This will help you reduce the problem to finding two other numbers that sum to the negative of the fixed element."
    },
    {
      "content": "For each fixed element, use two pointers: one starting just after the fixed element and the other at the end of the array. This will allow you to efficiently find pairs that sum to a target."
    },
    {
      "content": "When you find a valid triplet, make sure to skip any duplicates for the fixed element and the two pointers. This ensures that your result set contains only unique triplets."
    },
    {
      "content": "Think about edge cases: what should you do if all elements are the same? For instance, if the input is [0, 0, 0], how would you handle this in terms of uniqueness?"
    },
    {
      "content": "Make sure to check the length of the input array before proceeding. If the array has fewer than three elements, you can immediately return an empty list."
    },
    {
      "content": "When implementing the two-pointer approach, if the sum of the three numbers is less than zero, move the left pointer to the right to increase the sum. If it's more than zero, move the right pointer to the left."
    },
    {
      "content": "After finding a valid triplet, ensure you continue moving the pointers to find other potential pairs. Don't forget to skip over duplicate values to maintain uniqueness."
    },
    {
      "content": "Remember to return the triplets in a specific format: a list of lists. Each inner list should contain three integers that sum to zero."
    },
    {
      "content": "At this point, you should have a good structure in mind. Start implementing the sorting, looping, and two-pointer logic, while keeping track of the unique triplets you find."
    }
  ],
  "questionNotes": [
    "Constraints: 3 <= nums.length <= 3000",
    "Element range: -10^5 <= nums[i] <= 10^5",
    "Return format: List of lists containing unique triplets.",
    "Ensure no duplicate triplets in the output."
  ]
}