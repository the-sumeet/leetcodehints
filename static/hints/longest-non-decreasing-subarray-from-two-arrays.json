{
  "hints": [
    {
      "content": "Start by understanding the concept of a non-decreasing subarray. A non-decreasing subarray is one where each element is less than or equal to the next. For example, in the array [1, 2, 2, 3], the entire array is a non-decreasing subarray."
    },
    {
      "content": "Consider how you can construct the array nums3. At each index i, you have the option to choose either nums1[i] or nums2[i]. Think about how this choice affects the continuity of a non-decreasing subarray."
    },
    {
      "content": "To maximize the length of the longest non-decreasing subarray, you should think about how to make local decisions at each index. For instance, if nums3[i-1] is already chosen, how can you choose nums3[i] to maintain the non-decreasing property?"
    },
    {
      "content": "As you iterate through the arrays, keep track of the last chosen value in nums3. This will help you determine if you can extend the current non-decreasing subarray or if you need to start a new one."
    },
    {
      "content": "Remember to initialize your tracking variables correctly. You might want to use a variable to keep track of the current length of the non-decreasing subarray and another to store the maximum length found."
    },
    {
      "content": "When choosing between nums1[i] and nums2[i], consider both values. You want to select the one that allows you to continue the non-decreasing sequence from the last chosen value."
    },
    {
      "content": "Be mindful of edge cases, such as when both nums1[i] and nums2[i] are the same. In this scenario, you can continue the subarray without any issues."
    },
    {
      "content": "Think about how you can reset your current length counter when a choice breaks the non-decreasing property. This will help you track the maximum length accurately."
    },
    {
      "content": "As you implement your solution, consider using a loop to iterate through the indices of the arrays. For each index, decide which value to take based on the last chosen value."
    },
    {
      "content": "Finally, ensure you return the maximum length of the non-decreasing subarray found during your iteration. This will be your final output."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums1.length == nums2.length == n <= 10^5",
    "Values: 1 <= nums1[i], nums2[i] <= 10^9",
    "Return the length of the longest non-decreasing subarray.",
    "Both arrays are 0-indexed.",
    "You can choose either nums1[i] or nums2[i] for each index."
  ]
}