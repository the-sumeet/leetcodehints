{
  "hints": [
    {
      "content": "Start by understanding the three categories of elements in the array: those less than the pivot, those equal to the pivot, and those greater than the pivot. You need to maintain the relative order of these categories."
    },
    {
      "content": "Consider using three separate lists (or arrays) to collect the elements based on their comparison with the pivot. This will help you keep track of the order while rearranging."
    },
    {
      "content": "As you iterate through the `nums` array, check each element against the pivot. Use conditions to determine if an element is less than, equal to, or greater than the pivot."
    },
    {
      "content": "Remember that the elements equal to the pivot should be placed between the elements less than and greater than the pivot. Think about how you can concatenate the three lists you created."
    },
    {
      "content": "When you are collecting elements, ensure that you are not modifying the original list while iterating over it. This could lead to unexpected behavior or missed elements."
    },
    {
      "content": "Consider edge cases, such as when all elements are equal to the pivot or when there are no elements less than or greater than the pivot. How would your solution handle these cases?"
    },
    {
      "content": "After collecting the elements into three lists, you will need to combine them in the correct order. The final result should be the list of elements less than the pivot, followed by those equal to the pivot, and then those greater than the pivot."
    },
    {
      "content": "You might want to think about the time complexity of your approach. Aim for a linear time complexity, O(n), since you will need to look at each element at least once."
    },
    {
      "content": "As you implement your solution, ensure that you are returning the modified list in the correct format. The output should be the rearranged `nums` array itself."
    },
    {
      "content": "To finalize your implementation, make sure to test your code with various test cases, including edge cases. For instance, what happens if the input array has only one element or if it is already sorted?"
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Element range: -10^6 <= nums[i] <= 10^6",
    "The pivot is guaranteed to be an element of nums.",
    "Maintain the relative order of elements in each category."
  ]
}