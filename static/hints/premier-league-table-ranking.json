{
  "hints": [
    {
      "content": "Start by understanding the structure of the data provided. You have a list of teams with their statistics, including wins, draws, and losses. Make sure you can access these values correctly."
    },
    {
      "content": "Think about how you can calculate the points for each team. In football, teams earn 3 points for a win, 1 point for a draw, and 0 points for a loss. You can represent this as a formula: `points = wins * 3 + draws * 1`."
    },
    {
      "content": "Once you have the points calculated, consider how to store this information. You might want to create a new list or dictionary that includes each team's name and their calculated points."
    },
    {
      "content": "Sorting will be crucial for ranking the teams. Remember that you need to sort primarily by points. If two teams have the same points, you should then sort by the number of wins."
    },
    {
      "content": "Think about how you can implement the sorting. In Python, for example, you can use the `sorted()` function with a custom key to sort your list of teams based on multiple criteria."
    },
    {
      "content": "Keep in mind edge cases, such as when two teams have the same number of points and wins. You may need to decide on additional criteria for sorting, such as goal difference or head-to-head results, depending on the requirements."
    },
    {
      "content": "Be aware of the data types you are working with. For example, ensure that your points are stored as integers and that you handle any potential type errors when performing calculations."
    },
    {
      "content": "Consider how you will format the output. The problem statement suggests returning a ranked list of teams, so think about how to structure this output clearly, possibly as a list of dictionaries."
    },
    {
      "content": "Before finalizing your solution, test it with various inputs, including edge cases like all teams having the same points or only one team having played matches. This will help ensure your sorting logic is robust."
    },
    {
      "content": "Finally, implement the sorting and return the final ranked list of teams. Make sure to include all relevant information, such as team name and points, in your output structure."
    }
  ],
  "questionNotes": [
    "The data includes team statistics: team_id, team_name, matches_played, wins, draws, losses.",
    "Points are calculated as: points = wins * 3 + draws.",
    "Sorting should be done first by points, then by wins in case of ties.",
    "Consider edge cases like ties in points and wins, and how you will handle them.",
    "Output should be a ranked list of teams, including team name and points."
  ]
}