{
  "hints": [
    {
      "content": "Start by understanding the structure of the `FirstUnique` class. It should maintain a collection of numbers that allows you to add new numbers and retrieve the first unique number efficiently."
    },
    {
      "content": "Consider how you will store the numbers. You might need a data structure that allows you to keep track of the count of each number as well as the order in which they were added."
    },
    {
      "content": "Think about using a hash map (or dictionary) to count occurrences of each number. This will help you quickly determine if a number is unique."
    },
    {
      "content": "You will also need to maintain the order of insertion. A linked list or a queue can be useful for keeping track of the order of unique numbers."
    },
    {
      "content": "When adding a number, check if it already exists in your count map. If it does, update its count and handle its position in the order structure accordingly."
    },
    {
      "content": "For the `showFirstUnique` method, you need to return the first number from your order structure that has a count of 1. Be careful with edge cases where all numbers might be duplicates."
    },
    {
      "content": "Consider what happens when you add a number that is already present. You should remove it from your list of unique numbers if its count goes above 1."
    },
    {
      "content": "Think about edge cases, such as when the `showFirstUnique` method is called but there are no unique numbers available. What should you return in this case?"
    },
    {
      "content": "Make sure to test your implementation with various inputs, including all unique numbers, all duplicates, and a mix of both. This will ensure your logic holds in different scenarios."
    },
    {
      "content": "Finally, consider how you will handle the time complexity of your methods. Aim for efficient operations for both adding numbers and retrieving the first unique number."
    }
  ],
  "questionNotes": [
    "The `FirstUnique` class should support adding numbers and retrieving the first unique number efficiently.",
    "You need to maintain the order of numbers while also counting their occurrences.",
    "Edge cases include scenarios where all numbers are duplicates or where no unique numbers exist."
  ]
}