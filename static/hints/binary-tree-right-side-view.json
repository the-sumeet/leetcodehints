{
  "hints": [
    {
      "content": "Start by understanding the structure of a binary tree. Each node has a value and can have up to two children: a left and a right child. Visualize how you would traverse the tree from the right side."
    },
    {
      "content": "Consider how you would traverse the tree to capture the rightmost node at each level. A common approach is to use a breadth-first search (BFS) or depth-first search (DFS). Which method do you think would be more intuitive for this problem?"
    },
    {
      "content": "If using BFS, think about using a queue to keep track of nodes at each level. As you traverse, you can determine which node is the last one at each level, which will be visible from the right side."
    },
    {
      "content": "When you process each level of the tree, remember to record the last node you encounter at that level. This will be part of your output list. How can you ensure you only capture the last node for each level?"
    },
    {
      "content": "Consider edge cases, such as when the tree is empty. What should your function return in this case? Make sure to handle this scenario before proceeding with your main logic."
    },
    {
      "content": "As you implement your traversal, think about how to maintain the current level of nodes. You might want to track the number of nodes at the current level before moving to the next level."
    },
    {
      "content": "If using DFS, you can implement a recursive approach. Pass the current depth as a parameter and use a list to store the rightmost nodes. How will you ensure you only store the first node you encounter at each depth?"
    },
    {
      "content": "Remember that the order of the nodes in your output should be from top to bottom. This means you need to add the rightmost node of each level in the order you encounter them."
    },
    {
      "content": "Make sure to test your function with various tree structures, including skewed trees (all left or all right) and balanced trees. This will help ensure your solution works for all edge cases."
    },
    {
      "content": "Finally, think about how you will return the result. You can use a list to collect the rightmost nodes and return it at the end of your function. Ensure that your list is correctly populated before returning."
    }
  ],
  "questionNotes": [
    "The number of nodes in the tree is in the range [0, 100].",
    "Node values are constrained between -100 and 100.",
    "Return format should be a list of node values visible from the right side, ordered from top to bottom.",
    "Consider edge cases such as an empty tree, which should return an empty list."
  ]
}