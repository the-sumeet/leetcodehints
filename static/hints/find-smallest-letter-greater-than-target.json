{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. You have a sorted array of characters and a target character. Your goal is to find the smallest character in the array that is greater than the target."
    },
    {
      "content": "Remember that the array is sorted in non-decreasing order. This means that if you find a character greater than the target, all subsequent characters will also be greater."
    },
    {
      "content": "Consider using a linear search to find the first character that is greater than the target. However, think about how you might optimize this process given the sorted nature of the array."
    },
    {
      "content": "What happens if the target is greater than or equal to the largest character in the array? Make sure to handle this edge case properly by returning the first character in the array."
    },
    {
      "content": "You can utilize binary search to efficiently find the smallest character greater than the target. Think about how you can set up the search space and what conditions to check during the search."
    },
    {
      "content": "When implementing binary search, remember to adjust your left and right pointers based on whether the middle character is less than or greater than the target."
    },
    {
      "content": "If you find a character that is greater than the target during your binary search, consider storing it temporarily to ensure you find the smallest one."
    },
    {
      "content": "Be careful with the return value. If you finish your search and have not found any character greater than the target, you should return the first character in the letters array."
    },
    {
      "content": "Make sure to test your solution with various edge cases, such as when the target is the smallest or largest character in the array."
    },
    {
      "content": "As a final step, ensure your function handles the return value correctly based on the conditions you've established. You might end up with a simple return statement that checks if a valid character was found."
    }
  ],
  "questionNotes": [
    "The input array 'letters' is sorted in non-decreasing order.",
    "There are at least two different characters in 'letters'.",
    "If no character is greater than the target, return the first character in 'letters'.",
    "Target is guaranteed to be a lowercase English letter."
  ]
}