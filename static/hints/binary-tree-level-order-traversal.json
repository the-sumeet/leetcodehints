{
  "hints": [
    {
      "content": "Think about how you can traverse a binary tree. What traversal methods do you know? Level order traversal is different from in-order or pre-order. You can use a queue to help with this."
    },
    {
      "content": "Consider how you would represent the levels of the tree in your output. Each level of the tree should correspond to a sublist in your final result. How will you keep track of which nodes belong to which level?"
    },
    {
      "content": "When you start at the root of the tree, remember that the first level contains only the root node. What data structure can you use to help you process each level before moving to the next?"
    },
    {
      "content": "As you traverse the tree, you will need to enqueue the children of the current nodes. Make sure to enqueue the left child before the right child to maintain the left-to-right order."
    },
    {
      "content": "Think about how to handle the case when the binary tree is empty. What should your function return in this scenario? It might be helpful to check for this case at the beginning of your function."
    },
    {
      "content": "You might want to use a loop to process all nodes at the current level before moving to the next level. How will you determine when you've processed all nodes at the current level?"
    },
    {
      "content": "As you process each level, you can use a temporary list to store the values of the nodes at that level. After processing the level, you can add this list to your final result."
    },
    {
      "content": "Remember to keep track of the number of nodes at the current level. This will help you know how many times to iterate through your queue for that level."
    },
    {
      "content": "When you finish processing all levels, ensure your final result is in the correct format. You should return a list of lists, where each inner list represents a level in the binary tree."
    },
    {
      "content": "Before finalizing your solution, consider edge cases such as a tree with only one node or a tree that is skewed (all nodes on one side). How will your code handle these situations?"
    }
  ],
  "questionNotes": [
    "The output should be a list of lists, where each inner list contains the values of nodes at that level.",
    "If the tree is empty, return an empty list.",
    "The number of nodes is between 0 and 2000, and node values range from -1000 to 1000."
  ]
}