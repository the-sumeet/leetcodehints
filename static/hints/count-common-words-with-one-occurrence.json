{
  "hints": [
    {
      "content": "Start by understanding the requirements of the problem. You need to count words that appear exactly once in both arrays. Consider how you can track the occurrences of each word."
    },
    {
      "content": "Think about using a data structure that can help you count occurrences efficiently. A hash map (or dictionary) could be a good choice for this task."
    },
    {
      "content": "You will need to create two separate counts: one for `words1` and another for `words2`. Make sure to iterate through each array and update the counts accordingly."
    },
    {
      "content": "While counting occurrences, remember to focus only on words that appear exactly once. You can check this condition while populating your count structure."
    },
    {
      "content": "After counting, you will need to find the intersection of the two sets of words that have a count of one. Think about how you can efficiently check for common words between the two sets."
    },
    {
      "content": "Consider using a set to store the words that appear exactly once in each array. This will allow you to easily find common elements between the two sets."
    },
    {
      "content": "When you have both sets of unique words, you can use set operations to find the common words. What method can you use to get the intersection of two sets in Python?"
    },
    {
      "content": "Don't forget to return the count of common words, not the words themselves. How will you determine the size of the intersection set?"
    },
    {
      "content": "Think about edge cases, such as when one or both arrays are empty. What should your function return in those scenarios?"
    },
    {
      "content": "Finally, ensure that your solution adheres to the constraints provided. You should be able to handle the maximum input sizes efficiently, so consider the time complexity of your approach."
    }
  ],
  "questionNotes": [
    "You need to count words that appear exactly once in both arrays.",
    "Use a hash map or dictionary to count occurrences.",
    "Check for words that appear exactly once while populating counts.",
    "Use sets to find common words with one occurrence.",
    "Return the count of common words, not the words themselves.",
    "Consider edge cases like empty arrays.",
    "Constraints: 1 <= words1.length, words2.length <= 1000; 1 <= words1[i].length, words2[j].length <= 30."
  ]
}