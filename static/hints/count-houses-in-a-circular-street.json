{
  "hints": [
    {
      "content": "Start by understanding the input format. You are given an array representing houses on a circular street, where `0` indicates no house and `1` indicates a house. Make sure to visualize how the circular arrangement affects counting."
    },
    {
      "content": "Consider how to handle the circular nature of the street. If you reach the end of the array, you should also check the beginning of the array for continuity. This means you might need to think about the array as wrapping around."
    },
    {
      "content": "Think about how to traverse the array. A simple linear scan could work, but keep in mind that you need to identify groups of houses. You might want to maintain a count of contiguous `1`s."
    },
    {
      "content": "When counting groups of houses, consider using a variable to track the current count of contiguous `1`s. Reset this count when you encounter a `0`, and check if you need to update your maximum count."
    },
    {
      "content": "Edge cases are crucial. What happens if the array has no houses at all? Make sure to handle cases where the array is entirely `0`s or if it has only one element."
    },
    {
      "content": "Think about how to handle the transition from the last element back to the first element. If both are `1`, they should be counted as part of the same group. You might need to check this condition after your main loop."
    },
    {
      "content": "Consider how you will return the result. Are you simply returning the count of the largest group of houses? Make sure you understand the expected output format."
    },
    {
      "content": "When implementing your solution, ensure that your logic accounts for both the start and end of the array being `1`. This could be a common pitfall if not handled correctly."
    },
    {
      "content": "Before finalizing your solution, test it with various edge cases, such as an array with a single house, an array with all houses, and an array with no houses. This will help ensure your solution is robust."
    },
    {
      "content": "You are very close to the solution! Focus on combining the logic you've developed for counting contiguous `1`s with the special case of wrapping around from the end of the array back to the beginning."
    }
  ],
  "questionNotes": [
    "Input is an array of integers (0s and 1s) representing houses on a circular street.",
    "0 indicates no house, and 1 indicates a house.",
    "The output should be the count of the largest group of contiguous houses.",
    "Consider edge cases like empty arrays, arrays with all 0s, and arrays with all 1s.",
    "Be mindful of the circular nature when counting groups at the ends of the array."
  ]
}