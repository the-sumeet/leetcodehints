{
  "hints": [
    {
      "content": "Start by understanding the problem visually. Draw a circle and place 'n' points around it. Each point represents a person, and a handshake between two points is a line segment. Try connecting points to see how handshakes can intersect."
    },
    {
      "content": "Consider how many handshakes are possible with 'n' people. Each person can shake hands with every other person, but remember that a handshake is mutual. How would you calculate the total number of unique handshakes?"
    },
    {
      "content": "Think about the constraints of the problem. Handshakes that cross each other are not allowed. What does this mean for how you can connect the points? Can you identify any patterns or rules for valid connections?"
    },
    {
      "content": "Explore the concept of Catalan numbers, which often appear in combinatorial problems involving non-crossing partitions. The nth Catalan number counts the number of ways to connect 'n' points on a circle with non-crossing chords."
    },
    {
      "content": "The nth Catalan number can be calculated using the formula: C(n) = (2n)! / ((n + 1)!n!). Consider how you might implement this formula in code. What programming constructs will you need?"
    },
    {
      "content": "Before diving into the implementation, think about the base cases. What happens when there are 0 or 1 people? How many valid handshakes can occur in those scenarios?"
    },
    {
      "content": "Consider using dynamic programming to build up the solution. You can store previously computed Catalan numbers to avoid redundant calculations. What would your state transition look like?"
    },
    {
      "content": "If you decide to use recursion, remember to include memoization to optimize your solution. What data structure would you use to store previously calculated results?"
    },
    {
      "content": "When implementing the factorial calculation for the Catalan number formula, be cautious of integer overflow. How can you prevent this in your programming language of choice?"
    },
    {
      "content": "Think about edge cases, such as when 'n' is very large. How will your approach handle large inputs? Will it run efficiently within the time limits?"
    },
    {
      "content": "Consider testing your implementation with small values of 'n' first, like 2, 3, and 4. What results do you expect based on the Catalan number sequence?"
    },
    {
      "content": "Remember that the problem might require you to return the result in a specific format. Ensure your final output matches the expected return type and structure."
    },
    {
      "content": "As you finalize your solution, think about how to handle invalid inputs. What should your function do if 'n' is less than 0 or not an integer?"
    },
    {
      "content": "Keep in mind the time complexity of your solution. If you're using a recursive approach, analyze how the number of calls grows with 'n'. Can you optimize it further?"
    },
    {
      "content": "You're close to the solution! Try implementing the Catalan number calculation and test it against various cases. Remember to check both small and large values of 'n' to ensure correctness."
    }
  ],
  "questionNotes": [
    "The input 'n' represents the number of people, and it must be a non-negative integer.",
    "The output should be the number of ways to arrange handshakes without crossings.",
    "Consider using combinatorial mathematics, specifically Catalan numbers, for this problem.",
    "Ensure to handle edge cases, such as when n = 0 or n = 1, which should return 1."
  ]
}