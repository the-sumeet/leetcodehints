{
  "hints": [
    {
      "content": "Start by understanding the basic structure of JSON objects. JSON is essentially a collection of key-value pairs. Make sure you can differentiate between objects (enclosed in `{}`) and arrays (enclosed in `[]`)."
    },
    {
      "content": "Consider how to compare two JSON objects. You need to check if they have the same keys and if the values associated with those keys are equal. Remember that the order of keys does not matter."
    },
    {
      "content": "Think about the types of values that can be present in JSON. Values can be strings, numbers, booleans, null, arrays, or other objects. You will need to handle each type appropriately during comparison."
    },
    {
      "content": "When comparing values, ensure that you handle nested structures correctly. If a value is an object or an array, you will need to recursively check for equality within those structures."
    },
    {
      "content": "Pay attention to edge cases, such as comparing `null` values or different data types. For example, `null` is not equal to a string or a number, so you need to check for type consistency."
    },
    {
      "content": "Consider how to handle arrays in JSON. When comparing two arrays, they must have the same length and the same elements in the same order. You may need to implement a separate comparison function for arrays."
    },
    {
      "content": "Remember that the comparison should be deep, meaning that if a key's value is another object or array, you must dive into that structure and compare its contents as well."
    },
    {
      "content": "Think about how to structure your function. You might want to start with a base case for primitive types, then handle objects, and finally arrays. This way, you can build your solution incrementally."
    },
    {
      "content": "As you implement the comparison logic, make sure to return `false` immediately if any discrepancy is found. This will help optimize your function by avoiding unnecessary comparisons."
    },
    {
      "content": "Finally, ensure that your function returns `true` only when all checks pass. This includes checking for key presence, value equality, and handling nested structures correctly."
    }
  ],
  "questionNotes": [
    "The comparison must be deep, meaning nested objects and arrays should also be compared.",
    "Key order in JSON objects does not matter; only the keys and their corresponding values do.",
    "Different data types should not be considered equal (e.g., `null` is not equal to a string or number)."
  ]
}