{
  "hints": [
    {
      "content": "Start by understanding the data structure provided in the input. You have a list of students with their IDs, department IDs, and marks. Make sure to parse this data correctly before processing."
    },
    {
      "content": "Consider how you will determine the rank of each student based on their marks. Remember that a higher mark corresponds to a higher rank. Think about how you might sort the students."
    },
    {
      "content": "When sorting the students by marks, consider using a stable sorting algorithm to maintain the order of students with the same marks. This will help in handling ties appropriately."
    },
    {
      "content": "After sorting, think about how to compute the rank for each student. The rank can be determined by the position of the student in the sorted list. Remember to account for ties in marks."
    },
    {
      "content": "To compute the rank as a percentage, you need to determine the total number of students. The formula for rank percentage can be expressed as: `rank_percentage = (rank / total_students) * 100`."
    },
    {
      "content": "Be careful with the rank calculation for students with the same marks. If multiple students have the same score, they should receive the same rank, which could affect the subsequent ranks."
    },
    {
      "content": "Consider edge cases, such as all students having the same marks. In this case, all students should have the same rank and consequently the same rank percentage."
    },
    {
      "content": "Make sure to format your output correctly. The final result should be a list of dictionaries, each containing the student ID and their corresponding rank percentage."
    },
    {
      "content": "As you implement the solution, think about how to efficiently handle the sorting and ranking process. Using a single pass to calculate ranks after sorting can optimize your solution."
    },
    {
      "content": "Finally, ensure that your solution handles input validation. For example, check if the input list is empty or if there are any invalid entries in the student data."
    }
  ],
  "questionNotes": [
    "Input consists of a list of students with 'student_id', 'department_id', and 'mark'.",
    "Output should be a list of dictionaries with 'student_id' and their rank as a percentage.",
    "Tie-breaking: Students with the same marks should have the same rank.",
    "Rank percentage is calculated as (rank / total_students) * 100.",
    "Consider edge cases like all students having the same marks or an empty input list."
  ]
}