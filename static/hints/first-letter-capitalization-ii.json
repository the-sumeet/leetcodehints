{
  "hints": [
    {
      "content": "Start by understanding the requirements for capitalization. Each word in the `content_text` should have its first letter capitalized, while the rest of the letters should be in lowercase."
    },
    {
      "content": "Remember to handle special characters properly. Specifically, words connected by a hyphen ('-') should have both parts capitalized. For example, 'top-rated' should become 'Top-Rated'."
    },
    {
      "content": "Consider how you will split the `content_text` into individual words. You can use spaces and special characters as delimiters to identify the start of each word."
    },
    {
      "content": "When processing each word, check if it contains a hyphen. If it does, you will need to split it further into two parts, capitalize each part, and then join them back together."
    },
    {
      "content": "Think about how to maintain the original spacing and formatting. You might want to iterate through the string and build the new string character by character."
    },
    {
      "content": "Consider using a loop to process each word in the `content_text`. You can use a list to store the modified words before joining them back into a single string."
    },
    {
      "content": "Make sure to handle edge cases, such as single-word inputs or words that are entirely in uppercase. For example, 'SQL' should become 'Sql'."
    },
    {
      "content": "Pay attention to punctuation or special characters that may appear at the beginning or end of the words. Ensure that they do not affect the capitalization of the letters."
    },
    {
      "content": "You will need to return both the original text and the modified text in your output. Think about how you will structure your result set to include both versions."
    },
    {
      "content": "Use a data structure that allows you to easily map from `content_id` to both the original and modified text. A list of tuples or a dictionary could work well."
    },
    {
      "content": "Consider using Python's string methods like `capitalize()` and `lower()` to help with the transformation of each word."
    },
    {
      "content": "When constructing the final output, ensure that the order of the rows matches the original input. This is important for maintaining consistency in your results."
    },
    {
      "content": "Think about how to handle multiple spaces between words. Ensure that your solution does not accidentally remove or alter these spaces."
    },
    {
      "content": "You might want to write a helper function that takes a single word and returns the correctly capitalized version of that word. This can simplify your main logic."
    },
    {
      "content": "Finally, remember to test your solution with various edge cases, including strings with only special characters, mixed cases, and different lengths."
    }
  ],
  "questionNotes": [
    "content_id is unique for each row.",
    "content_text may contain only English letters and the characters ['\\', ' ', '@', '-', '/', '^', ','].",
    "Output must include both original_text and converted_text.",
    "Maintain the original order of rows in the output."
  ]
}