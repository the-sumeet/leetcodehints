{
  "hints": [
    {
      "content": "Remember that the array is sorted in non-decreasing order. This property is crucial for applying binary search effectively. Think about how you can leverage this order to find the target."
    },
    {
      "content": "Consider how you would normally find an element in a sorted array. A binary search approach is ideal here due to the O(log n) requirement. What modifications would you need to make to find both the first and last positions?"
    },
    {
      "content": "When implementing binary search, you need to keep track of the left and right indices. Think about how you can adjust these indices based on whether the target is less than or greater than the middle element."
    },
    {
      "content": "To find the first position of the target, you should continue searching in the left half even after finding the target. This means you need to adjust your search range accordingly. How would you do that?"
    },
    {
      "content": "For the last position, you will want to search in the right half after finding the target. Consider how you can modify your binary search to do this. What condition would you check to continue searching?"
    },
    {
      "content": "Think about edge cases, such as when the target is not present in the array or when the array is empty. What should your function return in these scenarios?"
    },
    {
      "content": "When implementing your binary search, ensure that you handle duplicate values correctly. How will you differentiate between the first and last occurrence of the target?"
    },
    {
      "content": "Your function should return the indices as a list. If the target is not found, remember to return [-1, -1]. What format will you use to return the indices?"
    },
    {
      "content": "As you implement your binary search, consider using two separate functions: one for finding the first position and another for the last position. This could help keep your code organized."
    },
    {
      "content": "To finalize your implementation, ensure that both functions return the correct indices and handle edge cases. Test your solution against the provided examples to verify its correctness."
    }
  ],
  "questionNotes": [
    "The array is sorted in non-decreasing order.",
    "You must achieve O(log n) runtime complexity.",
    "Return format should be a list of two integers: [first_index, last_index].",
    "If the target is not found, return [-1, -1].",
    "Consider edge cases like empty arrays and targets not present."
  ]
}