{
  "hints": [
    {
      "content": "Start by understanding the input format. You are given two matrices: one for flight costs and another for vacation days. Each row represents a city, and each column represents a week."
    },
    {
      "content": "Consider how to represent the problem. You might want to think about using dynamic programming to keep track of the maximum vacation days you can accumulate up to each city and week."
    },
    {
      "content": "Think about the base case. If you are at the first city, how many vacation days can you take in the first week? This will help you initialize your dynamic programming table."
    },
    {
      "content": "When transitioning from one city to another, remember to account for the flight cost. You can only travel if you have enough budget left after considering the flight cost."
    },
    {
      "content": "Make sure to handle the case where you cannot travel to a city due to high flight costs. You might want to set some values in your DP table to a minimum or negative value to represent that."
    },
    {
      "content": "As you fill out your DP table, consider how to update the maximum vacation days based on the previous city’s vacation days and the current city’s vacation days."
    },
    {
      "content": "Think about how to iterate through the weeks. You will need to check each week for each city and see if you can accumulate more vacation days by traveling."
    },
    {
      "content": "Pay attention to edge cases, such as when all flight costs are zero or when vacation days are the same across all cities. How would your algorithm handle these scenarios?"
    },
    {
      "content": "Consider the final step: how to extract the maximum vacation days from your DP table once it is fully populated. You may need to look at the last row of your table."
    },
    {
      "content": "Think about the constraints of the problem. The number of cities and weeks can affect the complexity of your solution. Make sure your approach is efficient enough for larger inputs."
    },
    {
      "content": "Remember to handle the case where you might not be able to reach all cities due to flight costs. This will affect how you calculate the maximum vacation days."
    },
    {
      "content": "As you implement your solution, consider using a 2D array to represent your DP table, where dp[i][j] represents the maximum vacation days at city i after j weeks."
    },
    {
      "content": "When updating your DP table, think about how to choose the best previous city to maximize vacation days. You might need to iterate through all cities for each update."
    },
    {
      "content": "Consider how to manage the vacation days count when switching cities. If you travel to a new city, you need to add the vacation days from that city to your total."
    },
    {
      "content": "Make sure to return the correct format for your answer. The problem may require you to return a single integer representing the maximum vacation days."
    }
  ],
  "questionNotes": [
    "Input is two matrices: flight costs and vacation days.",
    "Each row corresponds to a city, and each column corresponds to a week.",
    "You may not be able to travel to all cities due to flight costs.",
    "Return a single integer representing the maximum vacation days.",
    "Consider edge cases with zero costs or uniform vacation days."
  ]
}