{
  "hints": [
    {
      "content": "Start by understanding what a subsequence is. A subsequence can be derived by deleting some or no elements from the array while maintaining the order of the remaining elements. For example, from [2, 1, 3], you can form subsequences like [2], [1, 3], and [2, 3]."
    },
    {
      "content": "The width of a subsequence is defined as the difference between its maximum and minimum elements. This means you need to identify the min and max for each subsequence to calculate the width."
    },
    {
      "content": "Consider how many times each element in the array contributes to the total width. Each element can be the maximum or minimum in various subsequences. Think about how to count these contributions efficiently."
    },
    {
      "content": "When calculating the contribution of an element as a maximum, you can use its position in a sorted version of the array. The number of subsequences for which it is the maximum depends on the elements before it."
    },
    {
      "content": "For an element at index `i` in a sorted array, it can be the maximum of subsequences formed with any combination of the previous elements. The number of such combinations is `2^i`."
    },
    {
      "content": "Similarly, when considering an element as a minimum, you need to count how many subsequences can be formed with the elements after it. For an element at index `i`, this count is `2^(n-i-1)`."
    },
    {
      "content": "To compute the total contribution of an element at index `i`, calculate its contribution as a maximum and as a minimum, then combine these contributions. The total contribution can be expressed as: `contribution = (max_contrib - min_contrib)`."
    },
    {
      "content": "Remember to sort the array first. Sorting will help you easily identify the position of each element when calculating its contribution as a maximum or minimum."
    },
    {
      "content": "Keep in mind the modulo operation required by the problem. Since the results can be large, ensure you apply the modulo `10^9 + 7` at each step to prevent overflow."
    },
    {
      "content": "Consider edge cases like when the array has only one element. What would the width of the subsequence be in that case?"
    },
    {
      "content": "Make sure to handle the constraints properly. The length of the array can be up to `10^5`, so your solution should be efficient, ideally O(n log n) due to sorting."
    },
    {
      "content": "Think about how you can use pre-computed powers of 2 to speed up your calculations. You might want to calculate all powers of 2 up to `n` modulo `10^9 + 7` beforehand."
    },
    {
      "content": "As you implement your solution, ensure that you are correctly summing the contributions of all elements. You should iterate through the sorted array and accumulate the total width."
    },
    {
      "content": "Before finalizing your implementation, review the logic for calculating contributions. Ensure that you are correctly subtracting the minimum contribution from the maximum contribution for each element."
    },
    {
      "content": "Finally, remember to return the result as specified, which is the total sum of widths modulo `10^9 + 7`. Make sure your final return statement reflects this."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Element values: 1 <= nums[i] <= 10^5",
    "Return the result modulo 10^9 + 7.",
    "Consider edge cases, especially when the array has only one element."
  ]
}