{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. You are given an array representing houses on a circular street, where '1' indicates a house and '0' indicates no house. Make sure to visualize this circular arrangement."
    },
    {
      "content": "Consider how the circular nature of the street affects counting. For example, the first and last elements of the array are adjacent, which is not the case in a linear array."
    },
    {
      "content": "Think about how you might traverse the array. A simple loop might not suffice due to the circular nature. You might need to simulate the circular behavior by accessing indices in a specific way."
    },
    {
      "content": "When counting houses, consider how you would handle cases where the houses wrap around from the end of the array back to the beginning. This might involve duplicating the array or using modular arithmetic."
    },
    {
      "content": "Consider edge cases where there are no houses at all (all zeros) or where all the elements are houses (all ones). What should your function return in these scenarios?"
    },
    {
      "content": "Think about the constraints of the problem. For example, if the length of the array is very small (like 1 or 2), how would your logic change? Ensure your solution handles these small cases gracefully."
    },
    {
      "content": "You may need to keep track of the maximum count of houses found in any segment of the circular street. How would you update this count as you traverse the array?"
    },
    {
      "content": "Consider using a sliding window technique to count contiguous houses. This approach can help efficiently manage the counting as you move around the circular street."
    },
    {
      "content": "If using a sliding window, think about how you would expand and contract the window. You might need to adjust the window size based on the presence of '1's and '0's."
    },
    {
      "content": "When counting houses, also think about how you can handle the wrap-around condition. You might want to concatenate the array with itself to simplify the counting process."
    },
    {
      "content": "Remember to account for the total number of houses specified in the second parameter. How does this influence your counting logic? You might need to ensure that your count does not exceed this total."
    },
    {
      "content": "As you implement your logic, keep an eye on performance. The solution should ideally run in linear time, O(n), where n is the number of elements in the array."
    },
    {
      "content": "Make sure to handle cases where the array contains alternating houses and empty spaces. How does this affect your counting strategy?"
    },
    {
      "content": "If you find yourself stuck, try breaking down the problem into smaller parts. For example, first focus on counting houses in a linear array before adapting it to the circular case."
    },
    {
      "content": "You might also want to think about edge cases where the array has only one house or when there are multiple clusters of houses. What should your function return in these cases?"
    }
  ],
  "questionNotes": [
    "The input array represents a circular street with houses (1) and no houses (0).",
    "The second parameter indicates the maximum number of houses to count.",
    "Consider edge cases with all zeros or all ones in the array.",
    "The solution must handle circular indexing properly.",
    "Ensure the solution runs in O(n) time complexity."
  ]
}