{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of seats, each with a unique `seat_id` and a `free` status indicating whether the seat is available (1) or not (0)."
    },
    {
      "content": "Think about how you can iterate through the list of seats. You will need to check the `free` status of each seat to determine if it is available."
    },
    {
      "content": "Consider maintaining a count of consecutive available seats as you iterate through the list. Reset this count whenever you encounter a seat that is not free."
    },
    {
      "content": "What happens when you reach the end of the list? Make sure to check if the last sequence of available seats is the longest one you've found so far."
    },
    {
      "content": "You might want to store the maximum count of consecutive available seats and the starting index of that sequence. This will help you return the correct result later."
    },
    {
      "content": "Think about edge cases, such as when there are no available seats at all. How will your logic handle this situation?"
    },
    {
      "content": "Consider how you will return the result. Will you return just the count of the longest sequence, or do you need to return the indices of the seats as well?"
    },
    {
      "content": "Remember to account for cases where there are multiple sequences of the same maximum length. Decide how you will handle ties in your solution."
    },
    {
      "content": "As you implement your logic, keep track of the current sequence length and compare it to the maximum found so far. Use a simple if-condition to update your maximum when you find a longer sequence."
    },
    {
      "content": "Finally, ensure that your function handles both empty inputs and inputs where all seats are occupied. These scenarios should be tested to confirm your solution is robust."
    }
  ],
  "questionNotes": [
    "Input is a list of seats with unique seat_id and a free status (1 for available, 0 for occupied).",
    "You need to find the longest sequence of consecutive available seats.",
    "Consider edge cases like all seats occupied or no seats at all.",
    "Decide how to handle ties in maximum lengths of consecutive seats.",
    "Return format should be specified: either just the count or details about the seats."
  ]
}