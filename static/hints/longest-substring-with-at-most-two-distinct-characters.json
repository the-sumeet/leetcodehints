{
  "hints": [
    {
      "content": "Start by understanding the problem requirements. You need to find the length of the longest substring that contains at most two distinct characters. This means that in any valid substring, there should be no more than two different characters present."
    },
    {
      "content": "Consider how you might track the characters in your substring. You could use a data structure like a hashmap or dictionary to count occurrences of each character. This will help you keep track of how many distinct characters are in your current substring."
    },
    {
      "content": "Think about how you will expand and contract your substring. You might start with two pointers: one for the start and one for the end of your substring. As you move your end pointer to the right, you can include more characters."
    },
    {
      "content": "When you include a new character, check if it causes the substring to have more than two distinct characters. If it does, you will need to move your start pointer to the right until you are back to two distinct characters."
    },
    {
      "content": "Make sure to keep track of the maximum length of valid substrings you find during your traversal. You can update this maximum length whenever you have a valid substring with at most two distinct characters."
    },
    {
      "content": "Consider edge cases such as when the input string is empty or has fewer than two distinct characters. How will your approach handle these cases? You might want to return 0 for an empty string."
    },
    {
      "content": "Be mindful of the performance of your solution. A naive approach could lead to O(n^2) complexity. Aim for a more efficient solution, possibly O(n), by ensuring that each character is processed at most twice."
    },
    {
      "content": "As you implement your two-pointer approach, remember to update your character count in the hashmap each time you expand or contract the substring. This will help you maintain the count of distinct characters efficiently."
    },
    {
      "content": "When you reach a point where you have more than two distinct characters, you will need to move the start pointer to the right until you are back to two distinct characters. Make sure to update your character counts accordingly as you do this."
    },
    {
      "content": "Finally, ensure that your function returns the length of the longest substring found. You might want to return a variable that you've been updating throughout your traversal to keep track of this maximum length."
    }
  ],
  "questionNotes": [
    "The input string can be empty, and you should return 0 in that case.",
    "The substring must contain at most two distinct characters.",
    "You need to return the length of the longest valid substring, not the substring itself.",
    "Consider how to handle cases where the string has fewer than two distinct characters."
  ]
}