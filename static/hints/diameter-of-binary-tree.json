{
  "hints": [
    {
      "content": "To understand the diameter of a binary tree, first clarify what is meant by 'diameter'. The diameter is defined as the longest path between any two nodes, measured in edges. Remember that this path does not need to pass through the root."
    },
    {
      "content": "Consider how you can traverse the tree to find the longest path. A common approach is to use Depth First Search (DFS) to explore all paths. Think about how you can calculate the height of subtrees during this traversal."
    },
    {
      "content": "As you traverse the tree, keep track of the maximum diameter found. You can do this by calculating the height of the left and right subtrees for each node and summing them up to get the potential diameter at that node."
    },
    {
      "content": "Remember that the height of a node is defined as the number of edges on the longest path from that node down to a leaf. You will need to return this height to the parent node during your DFS."
    },
    {
      "content": "When calculating the diameter at each node, you should compare it with a global variable that keeps track of the maximum diameter found so far. Update this variable whenever you find a larger diameter."
    },
    {
      "content": "Be careful with edge cases, such as when the tree has only one node. In this case, the diameter should be 0 because there are no edges."
    },
    {
      "content": "Consider how you will handle null nodes in your recursive function. You should return a height of 0 for any null node to ensure that the calculations for height and diameter are correct."
    },
    {
      "content": "Your recursive function should return two things: the height of the current node and update the global maximum diameter. Think about how you can structure your return values effectively."
    },
    {
      "content": "As a reminder, the final output should be the length of the diameter in terms of edges. If you find the maximum number of nodes in the path, remember to convert that to edges by subtracting one."
    },
    {
      "content": "You are very close! Your function should look something like this: define a recursive function that takes a node, calculates the left and right heights, updates the diameter, and returns the height. Make sure to handle the base case and the global variable correctly."
    }
  ],
  "questionNotes": [
    "The diameter is the longest path between any two nodes, measured in edges.",
    "The path may or may not pass through the root.",
    "The number of nodes in the tree is in the range [1, 10^4].",
    "-100 <= Node.val <= 100.",
    "The output should be the length of the diameter, which is the number of edges."
  ]
}