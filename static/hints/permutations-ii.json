{
  "hints": [
    {
      "content": "Start by understanding what a permutation is. A permutation of a set is a rearrangement of its elements. For example, the permutations of [1, 2] are [1, 2] and [2, 1]."
    },
    {
      "content": "Since the input can contain duplicates, you need to ensure that your output only contains unique permutations. Think about how you can track which elements have been used in a permutation."
    },
    {
      "content": "Consider using backtracking to generate permutations. This involves exploring all possible arrangements by adding one number at a time and recursively generating further arrangements."
    },
    {
      "content": "To avoid generating duplicate permutations, sort the input array first. This way, you can easily skip over duplicates during your backtracking process."
    },
    {
      "content": "While generating permutations, maintain a boolean array to keep track of which elements are available for use in the current permutation. This helps in managing duplicates effectively."
    },
    {
      "content": "When you reach the base case of your backtracking (i.e., when the current permutation is of the same length as the input), add a copy of the current permutation to your results."
    },
    {
      "content": "Make sure to handle the case where you skip duplicates. After choosing an element, if the next element is the same as the previous one and the previous one hasn't been used, skip it."
    },
    {
      "content": "Remember to backtrack properly by unmarking the current element and removing it from the current permutation after exploring that path."
    },
    {
      "content": "Think about edge cases, such as when the input list is empty or when all elements are the same. What should your function return in those cases?"
    },
    {
      "content": "Finally, structure your function to return the list of unique permutations. Ensure that your output format matches the problem requirements, typically a list of lists."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 8",
    "Input can contain duplicates, so focus on generating unique permutations.",
    "Return format: A list of lists containing all unique permutations."
  ]
}