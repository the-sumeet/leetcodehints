{
  "hints": [
    {
      "content": "Start by understanding the structure of a Binary Search Tree (BST). Each node has a value, a left child, and a right child. The left child contains values less than the node's value, and the right child contains values greater."
    },
    {
      "content": "Think about how you can traverse the BST to access its values in sorted order. An in-order traversal (left-root-right) will give you the values in ascending order. You can use recursion or an iterative approach with a stack."
    },
    {
      "content": "As you traverse the BST, consider how you will create the doubly linked list nodes. Each node in the list should point to both the previous and next nodes. This means you'll need to keep track of the last node added to the list."
    },
    {
      "content": "Remember that the head of the doubly linked list should be the smallest value from the BST. You will need a way to keep track of the first node as you build the list during your traversal."
    },
    {
      "content": "When you're linking the nodes together, ensure that you set both the 'next' and 'prev' pointers correctly. After adding a new node to the list, update the last node's 'next' pointer to the new node and the new node's 'prev' pointer to the last node."
    },
    {
      "content": "Consider edge cases such as an empty BST. How will you handle this situation? Make sure your function can return a null or an appropriate response when there are no nodes to convert."
    },
    {
      "content": "Think about the return format of your function. You will likely need to return the head of the doubly linked list. Make sure this matches the expected output format specified in the problem statement."
    },
    {
      "content": "As you implement your solution, keep track of the time and space complexity. An in-order traversal of a BST is O(n) in time, where n is the number of nodes, and you will also need O(n) space for the doubly linked list."
    },
    {
      "content": "During your traversal, you can use a helper function to recursively link the nodes. This function can take the current node and the last node in the list as parameters, allowing you to build the list step by step."
    },
    {
      "content": "Finally, ensure that after your traversal is complete, you properly link the head and tail of the doubly linked list. The tail's 'next' should point to null, and the head's 'prev' should also point to null."
    }
  ],
  "questionNotes": [
    "The input is a Binary Search Tree represented as an array, where the array elements represent the values of the nodes in level order.",
    "The output should be the head of the sorted doubly linked list.",
    "Consider cases where the BST might be empty or have only one node."
  ]
}