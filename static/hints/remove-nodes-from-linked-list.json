{
  "hints": [
    {
      "content": "Start by understanding the structure of a linked list. Each node contains a value and a reference to the next node. You need to traverse the list to identify which nodes to keep and which to remove."
    },
    {
      "content": "Consider how you can determine if a node should be removed. A node should be removed if there exists a node with a greater value to its right. Think about how you can keep track of the maximum value you've seen as you traverse the list."
    },
    {
      "content": "You might want to traverse the linked list from the end to the beginning. This way, you can easily keep track of the maximum value seen so far without needing to look ahead multiple times."
    },
    {
      "content": "As you traverse the list backwards, maintain a variable to store the maximum value. If the current node's value is less than this maximum, you can mark it for removal."
    },
    {
      "content": "Remember that you need to adjust the pointers in the linked list when removing nodes. This means you will need to keep track of the previous node to link it to the next valid node."
    },
    {
      "content": "Think about edge cases, such as when the linked list has only one node or when all nodes have the same value. How should your function handle these scenarios?"
    },
    {
      "content": "After identifying which nodes to keep, you will need to construct the new linked list. Consider how to maintain the order of nodes that you want to keep while removing the others."
    },
    {
      "content": "You may want to create a new head for the modified linked list. Ensure that you return the correct head after all modifications are made."
    },
    {
      "content": "Consider the time complexity of your approach. You want to ensure that your solution is efficient, ideally O(n), where n is the number of nodes in the linked list."
    },
    {
      "content": "To finalize your approach, think about how you will implement the traversal and the logic for maintaining the maximum value. You can use a stack or an auxiliary list to help with this if you decide to traverse in reverse."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the linked list is in the range [1, 10^5].",
    "Node values are between 1 and 10^5.",
    "You must return the head of the modified linked list.",
    "Consider edge cases where all nodes have the same value or only one node exists."
  ]
}