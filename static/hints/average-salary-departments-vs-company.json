{
  "hints": [
    {
      "content": "Start by understanding the data structure provided. You have two tables: 'Salary' and 'Employee'. Each table has a specific set of columns that you will need to work with."
    },
    {
      "content": "Identify the relationships between the two tables. The 'Employee' table links employees to their respective departments via 'department_id'."
    },
    {
      "content": "Focus on the 'Salary' table first. You need to aggregate salary data based on employees and their departments."
    },
    {
      "content": "Consider how you will calculate the average salary. You will need to sum the salaries and then divide by the number of salaries for each department."
    },
    {
      "content": "Remember to filter the salaries by the relevant employees in each department. You can do this by matching 'employee_id' from the 'Salary' table to the 'Employee' table."
    },
    {
      "content": "Think about how you will group the salaries. You might want to group by 'department_id' to get the average salary for each department."
    },
    {
      "content": "When calculating averages, consider edge cases like departments with no employees or employees with no salary records. How will you handle these scenarios?"
    },
    {
      "content": "After calculating the averages for each department, remember that you also need to calculate the overall company average salary. This will be the average of all salaries across all departments."
    },
    {
      "content": "Ensure that the final output format matches the requirements. You may need to return a structured object that includes both department averages and the company average."
    },
    {
      "content": "Take note of how you will handle ties. If two departments have the same average salary, ensure your output reflects this correctly."
    },
    {
      "content": "Make sure to test your solution with different scenarios, including departments with varying numbers of employees and salaries."
    },
    {
      "content": "Consider using SQL-like operations if you're working in a language that supports them. This can simplify the aggregation and joining of data."
    },
    {
      "content": "As you implement your solution, keep an eye on performance, especially if the dataset is large. Efficiently grouping and aggregating data is key."
    },
    {
      "content": "Remember to validate your results against the sample test case provided. Ensure that your calculations align with the expected output."
    },
    {
      "content": "Finally, think about how you will structure your code. Clear functions for calculating averages and handling data will make your solution more readable."
    }
  ],
  "questionNotes": [
    "You have two tables: 'Salary' and 'Employee'.",
    "Link 'Employee' table to 'Salary' table using 'employee_id'.",
    "Calculate average salaries per department and overall company average.",
    "Handle edge cases like empty departments or employees with no salary records.",
    "Return the output in a structured format that includes both department and company averages."
  ]
}