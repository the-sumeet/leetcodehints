{
  "hints": [
    {
      "content": "Start by understanding the concept of rank in this context. The rank of an element is determined by how it compares to other elements in its row and column."
    },
    {
      "content": "Consider how you will store the ranks for each element in a new matrix. You will need a structure that allows you to reference the original matrix while assigning ranks."
    },
    {
      "content": "Think about how to compare elements within the same row and column. You could use nested loops to iterate through each element and compare it to others."
    },
    {
      "content": "Remember that the rank starts at 1 and is unique for each element unless they are equal. How will you handle elements that are equal?"
    },
    {
      "content": "To assign ranks correctly, you might want to create a list of all elements along with their positions. This way, you can sort them and determine their ranks based on their values."
    },
    {
      "content": "When sorting the elements, consider using a data structure that maintains their original positions. This will help you easily place the ranks back into the result matrix."
    },
    {
      "content": "As you assign ranks, ensure that you are checking both the row and column constraints. This means you need to validate ranks against all elements in the same row and column."
    },
    {
      "content": "Think about edge cases, such as when all elements in the matrix are the same. How will you ensure that all ranks are set to 1 in this case?"
    },
    {
      "content": "You might find it useful to create a helper function that can determine the rank of a single element based on the current state of ranks in its row and column."
    },
    {
      "content": "Consider how to efficiently update the ranks as you process each element. You may need to maintain a mapping of current ranks to ensure you don't miss any updates."
    },
    {
      "content": "When implementing your solution, be mindful of the time complexity. Sorting the elements will take O(m*n log(m*n)), and you need to ensure that your rank assignment is efficient."
    },
    {
      "content": "After sorting and assigning ranks, double-check that your final matrix adheres to the rank rules specified in the problem statement. This will ensure correctness."
    },
    {
      "content": "You may also want to implement a way to visualize the ranks as you build the result matrix. This can help you debug and verify that the ranks are being assigned correctly."
    },
    {
      "content": "As a final step, ensure that your function handles the input and output formats correctly. The output should be a matrix of the same dimensions as the input."
    },
    {
      "content": "Now, think about the final implementation. You have a sorted list of elements and their positions. How will you iterate through this list to assign ranks back into the result matrix?"
    }
  ],
  "questionNotes": [
    "The rank starts from 1 and is unique for each element unless they are equal.",
    "Constraints: 1 <= m, n <= 500 and -10^9 <= matrix[row][col] <= 10^9.",
    "The output should be a matrix of the same dimensions as the input matrix.",
    "Ensure to handle edge cases, such as all elements being the same."
  ]
}