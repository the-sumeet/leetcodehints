{
  "hints": [
    {
      "content": "First, understand the definition of a full binary tree. Each node must have either 0 or 2 children. This means that if a node has children, it cannot have just one child."
    },
    {
      "content": "Consider the base case where n = 1. What does a full binary tree look like with just one node? This will help you establish a starting point for your recursive solution."
    },
    {
      "content": "Notice that for a full binary tree with n nodes, n must be odd. Why is that? Think about how nodes are added in pairs when creating children."
    },
    {
      "content": "You can use recursion to build the trees. If you have a root node, how can you determine the number of nodes in the left and right subtrees? Remember that the total number of nodes is the root plus the nodes in the left and right subtrees."
    },
    {
      "content": "If you have a full binary tree with n nodes, and you choose k nodes for the left subtree, how many nodes will be in the right subtree? This will help you understand how to split the nodes."
    },
    {
      "content": "When building trees recursively, consider iterating through all possible sizes for the left subtree. For each size, calculate the size of the right subtree and recursively generate all combinations of left and right subtrees."
    },
    {
      "content": "Think about how to store the trees you generate. You will likely want to return a list of tree nodes, where each node is initialized with a value of 0."
    },
    {
      "content": "Remember to combine the left and right subtrees properly. You will need to create a new tree node for each combination of left and right subtrees you generate."
    },
    {
      "content": "As you build your solution, consider using memoization to store results for specific values of n. This can help avoid redundant calculations and improve performance."
    },
    {
      "content": "Finally, implement your recursive function to return all possible full binary trees for a given n. Ensure you handle the base case and correctly combine left and right subtrees in your final implementation."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= n <= 20",
    "A full binary tree has nodes with either 0 or 2 children.",
    "The output should be a list of tree roots, where each root node has a value of 0.",
    "n must be odd for a full binary tree to exist."
  ]
}