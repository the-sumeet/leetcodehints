{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a JSON object containing headers and rows. Focus on how to access the 'SeasonStats' data from the 'rows' key."
    },
    {
      "content": "Remember that the data is grouped by seasons. You may need to process each season separately. Think about how you can iterate through the seasons in the data."
    },
    {
      "content": "Each team's performance is defined by several metrics: wins, draws, losses, goals for, and goals against. Consider how you can use these metrics to calculate a team's ranking."
    },
    {
      "content": "When ranking teams, you need to establish a priority order. Typically, teams are ranked by the number of wins first, followed by goal difference (goals for minus goals against)."
    },
    {
      "content": "Be aware of tie-breaking rules. If two teams have the same number of points (wins), you should compare their goal difference next. If they are still tied, consider other metrics like goals scored."
    },
    {
      "content": "You will need to create a scoring system based on the matches played. A common approach is to assign 3 points for a win, 1 point for a draw, and 0 points for a loss."
    },
    {
      "content": "As you prepare to sort the teams, think about how to structure your data. You might want to create a list or a dictionary to hold the teams and their computed scores."
    },
    {
      "content": "After calculating the scores, use a sorting function to organize the teams based on the defined ranking criteria. Make sure to handle the sorting in a way that respects the tie-breaking rules."
    },
    {
      "content": "Ensure that your final output matches the expected format. You may need to return a list of dictionaries or a similar structure that includes the team_id, team_name, and ranking for each team in the season."
    },
    {
      "content": "Finally, consider edge cases such as seasons with no matches played or teams with identical statistics. How will your ranking logic handle these situations?"
    }
  ],
  "questionNotes": [
    "Input data is provided in JSON format with 'headers' and 'rows'.",
    "Focus on the 'SeasonStats' array for team data.",
    "Teams are ranked primarily by wins, then by goal difference, and finally by goals scored if necessary.",
    "Points system: 3 points for a win, 1 for a draw, and 0 for a loss.",
    "Handle tie-breaking carefully to ensure correct rankings.",
    "Output format should include team_id, team_name, and their rank."
  ]
}