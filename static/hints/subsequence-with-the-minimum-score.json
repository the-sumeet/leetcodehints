{
  "hints": [
    {
      "content": "Start by understanding what it means for `t` to be a subsequence of `s`. Remember, a subsequence can be formed by deleting some characters without changing the order of the remaining characters."
    },
    {
      "content": "Consider the score calculation: it is based on the indices of the removed characters. Think about how you can track these indices when removing characters from `t`."
    },
    {
      "content": "Identify the characters in `t` that exist in `s`. This will help you determine which characters you might not need to remove to maintain a subsequence."
    },
    {
      "content": "Use two pointers or a similar technique to traverse both strings. This can help you efficiently find matching characters between `s` and `t`."
    },
    {
      "content": "Remember that the score is calculated based on the leftmost and rightmost indices of the removed characters. Make sure to keep track of these indices as you modify `t`."
    },
    {
      "content": "Consider edge cases where `t` has no characters in common with `s`. What would the score be in this case? Think about how many characters you would need to remove."
    },
    {
      "content": "Think about how to minimize the score. If you can find a way to keep more characters from `t`, the score will decrease. What strategies can help you do this?"
    },
    {
      "content": "You might want to preprocess `s` to create a mapping of characters to their indices. This can help you quickly check if a character from `t` exists in `s`."
    },
    {
      "content": "When finding the left and right indices of removed characters, consider using a binary search approach to efficiently find the positions in `s`."
    },
    {
      "content": "If a character in `t` is not found in `s`, you will need to remove it. Think about how this impacts your left and right indices."
    },
    {
      "content": "Consider how to handle multiple occurrences of the same character in `s`. Does it affect your ability to match characters from `t`?"
    },
    {
      "content": "As you work through the problem, keep track of the minimum score you can achieve. Update this score whenever you find a new valid subsequence."
    },
    {
      "content": "Make sure to handle the case where you might need to remove all characters from `t`. What would the score be in that scenario?"
    },
    {
      "content": "You can optimize your approach by using a two-pass technique: first, find all matching characters from the start of `t`, then from the end. This helps in determining the optimal characters to keep."
    },
    {
      "content": "Finally, think about how to implement the logic to calculate the score based on the leftmost and rightmost indices of the removed characters. This will be key to solving the problem."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length, t.length <= 10^5",
    "Both strings consist of only lowercase English letters.",
    "The score is 0 if no characters are removed from `t`.",
    "The score is calculated as right - left + 1, where left and right are the indices of removed characters.",
    "If all characters are removed from `t`, the score will be equal to the length of `t`."
  ]
}