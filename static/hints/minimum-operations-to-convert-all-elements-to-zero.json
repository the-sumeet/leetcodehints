{
  "hints": [
    {
      "content": "Start by understanding the operation allowed: you can select a subarray and set all occurrences of the minimum element in that subarray to zero. Think about how you can identify the minimum element in a given range."
    },
    {
      "content": "Consider how the minimum element in the entire array affects your operations. If the minimum element is already zero, you might not need to perform any operations on that element."
    },
    {
      "content": "Try to visualize the process: after each operation, the array changes. Keep track of which elements have been set to zero, as this will help you determine the next minimum element to target."
    },
    {
      "content": "Think about the implications of selecting different subarrays. Are there cases where selecting a smaller subarray is more beneficial than a larger one? What happens if you select overlapping subarrays?"
    },
    {
      "content": "Consider how many unique non-zero elements are in the array. Each unique non-zero element will likely require at least one operation to set it to zero."
    },
    {
      "content": "You can maintain a frequency count of each unique element in the array. This will help you identify how many distinct operations you might need to perform."
    },
    {
      "content": "Remember that the order of operations can affect the final result. For example, setting a larger minimum element to zero before a smaller one might reduce the number of operations needed."
    },
    {
      "content": "Think about edge cases, such as when the array is already all zeros or when it contains only one unique non-zero element. How would your approach change in these scenarios?"
    },
    {
      "content": "To minimize operations, consider using a greedy approach: always target the smallest non-zero element first. This could lead to fewer total operations overall."
    },
    {
      "content": "Ultimately, you want to count the number of unique non-zero elements and ensure that you perform operations in a way that minimizes the number of selections. Consider how you can efficiently track and update the elements as you perform operations."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= n == nums.length <= 10^5",
    "0 <= nums[i] <= 10^5",
    "You can perform zero or more operations.",
    "Return the minimum number of operations required.",
    "Ensure to handle cases where the array may already contain zeros."
  ]
}