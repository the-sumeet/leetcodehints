{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have two main components: 'Products' and 'Discounts'. Each product has an ID, category, and price, while each discount is associated with a category and a percentage."
    },
    {
      "content": "Focus on how to access the product details. You will need to iterate through the 'Products' array to extract the necessary information for each product. Consider using a loop to go through each product."
    },
    {
      "content": "Next, think about how to apply discounts. You will need to match each product's category with the corresponding discount from the 'Discounts' array. This may require another loop or a way to map categories to their discounts."
    },
    {
      "content": "Pay attention to the data types. The price is likely a number, while the discount is a percentage. Make sure you convert the discount into a decimal format before applying it to the price."
    },
    {
      "content": "Consider edge cases, such as products that do not have a corresponding discount. You should ensure that you handle these products appropriately, perhaps by leaving their price unchanged."
    },
    {
      "content": "When calculating the final price after applying the discount, remember to subtract the discount amount from the original price. The formula can be: final_price = price - (price * (discount / 100))."
    },
    {
      "content": "Think about how to store the results. You might want to create a new array that holds the final prices along with the product IDs for easy reference."
    },
    {
      "content": "Ensure that your final output format matches the requirements. You may need to return an array of objects with product IDs and their corresponding final prices."
    },
    {
      "content": "Keep in mind the order of products in the output. If the order of products matters, maintain the original order from the input when constructing your output."
    },
    {
      "content": "Finally, ensure your code is efficient. If the number of products and discounts is large, consider using a dictionary or map to quickly look up discounts by category, which can reduce time complexity."
    }
  ],
  "questionNotes": [
    "Input consists of two arrays: 'Products' and 'Discounts'.",
    "Each product has a unique 'product_id'.",
    "Discounts are applied based on 'category'.",
    "Handle cases where a product's category has no associated discount.",
    "Final output should be an array of objects with 'product_id' and 'final_price'.",
    "Maintain the original order of products in the output."
  ]
}