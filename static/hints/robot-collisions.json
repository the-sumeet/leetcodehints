{
  "hints": [
    {
      "content": "Start by understanding the input arrays: `positions`, `healths`, and `directions`. Each robot has a unique position, a health value, and a direction of movement ('L' or 'R')."
    },
    {
      "content": "Consider how the robots will move based on their directions. Robots moving to the right ('R') will increase their position, while those moving to the left ('L') will decrease their position."
    },
    {
      "content": "Think about how to detect collisions. A collision occurs when two robots occupy the same position. This will happen when a robot moving right overtakes a robot moving left."
    },
    {
      "content": "You need to handle the health of the robots during collisions. If two robots collide, the one with lower health is removed, and the other loses 1 health."
    },
    {
      "content": "Remember to keep track of the order of robots as they are given in the input. The output must reflect the health of surviving robots in their original order."
    },
    {
      "content": "Consider using a data structure that allows you to efficiently manage the robots and their states. A stack might be useful to handle the robots as they collide."
    },
    {
      "content": "When processing the robots, sort them by their positions first. This will help you simulate their movements and check for collisions in the correct order."
    },
    {
      "content": "Implement a loop to process each robot based on their positions and directions. Keep track of the robots that are still in play after each collision."
    },
    {
      "content": "Pay attention to edge cases, such as when all robots are moving in the same direction. In such cases, no collisions will occur."
    },
    {
      "content": "Consider what happens if two robots collide and have the same health. Both should be removed from the line, which is a specific case you need to handle."
    },
    {
      "content": "After processing all possible collisions, you should have a list of surviving robots. Make sure to filter out any robots that were removed during the collision process."
    },
    {
      "content": "Once you have the surviving robots, extract their health values and return them in the order of the original input. This is crucial for meeting the problem's requirements."
    },
    {
      "content": "Think about the time complexity of your solution. You need to ensure that your approach can handle the upper limits of the constraints effectively."
    },
    {
      "content": "You might want to simulate the movement of the robots step-by-step, checking for collisions at each step until no more collisions can occur."
    },
    {
      "content": "Before finalizing your solution, test it with various edge cases, such as all robots having the same health or all robots moving in one direction."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= positions.length == healths.length == directions.length == n <= 10^5",
    "1 <= positions[i], healths[i] <= 10^9",
    "directions[i] == 'L' or 'R'",
    "All values in positions are distinct",
    "Return an empty array if no robots survive."
  ]
}