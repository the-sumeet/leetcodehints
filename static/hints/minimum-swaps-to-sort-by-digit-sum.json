{
  "hints": [
    {
      "content": "Start by understanding how to calculate the digit sum of a number. For example, for the number 37, the digit sum is 3 + 7 = 10. Write a function that takes a number and returns its digit sum."
    },
    {
      "content": "Once you can calculate the digit sum, apply this function to each element in the input array `nums`. This will help you create a mapping of each number to its corresponding digit sum."
    },
    {
      "content": "Next, think about how to sort the array based on the digit sums. Remember that if two numbers have the same digit sum, the smaller number should come first. You can use a sorting function that takes a custom comparator."
    },
    {
      "content": "After sorting, create a mapping of the original indices of the numbers in the sorted array. This will help you determine where each number needs to go to achieve the sorted order."
    },
    {
      "content": "To find the minimum number of swaps needed, consider using a visited array to keep track of which elements have already been placed correctly. This will help you avoid counting swaps multiple times."
    },
    {
      "content": "When you identify a cycle in the permutation of indices, the number of swaps needed to sort that cycle is equal to the length of the cycle minus one. Make sure to account for all cycles in your implementation."
    },
    {
      "content": "Remember that the input array contains distinct positive integers. This means that you don't need to handle duplicate values or negative numbers, simplifying your sorting logic."
    },
    {
      "content": "Consider edge cases, such as when the input array has only one element. In this case, no swaps are needed, so return 0 immediately."
    },
    {
      "content": "As you implement your solution, keep track of the time complexity. Sorting the array will take O(n log n), and processing the swaps should be linear, O(n). Ensure your solution is efficient given the constraints."
    },
    {
      "content": "Finally, implement the logic to count the swaps based on the cycles you identified. Make sure to return the total count of swaps as the final output of your function."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Constraints: 1 <= nums[i] <= 10^9",
    "All numbers in nums are distinct.",
    "Sorting is based on digit sum, with tie-breaking on the number itself.",
    "Return the minimum number of swaps required to achieve the sorted order."
  ]
}