{
  "hints": [
    {
      "content": "Start by understanding how to map the digits of a number according to the provided mapping array. For example, if mapping[9] = 6, then every '9' in the number should be replaced with '6'."
    },
    {
      "content": "Consider how to convert each number in the 'nums' array to its mapped value. You can do this by iterating through each digit of the number and replacing it using the mapping array."
    },
    {
      "content": "Remember that the mapped value of a number might have leading zeros. For instance, the number '338' maps to '007', which should be treated as '7'. Think about how to handle these leading zeros."
    },
    {
      "content": "You need to maintain the original order of elements in 'nums' that have the same mapped value. This means you should use a stable sorting algorithm or a method that preserves the order of equal elements."
    },
    {
      "content": "When sorting, consider creating a list of tuples where each tuple contains the original number and its mapped value. This will help you sort based on the mapped values while keeping track of the original numbers."
    },
    {
      "content": "Make sure to implement the mapping logic correctly. You can convert the number to a string, map each character to its corresponding digit using the mapping array, and then convert it back to an integer."
    },
    {
      "content": "Think about edge cases, such as when all numbers in 'nums' are the same or when 'nums' contains very large numbers. Ensure your solution can handle these cases without errors."
    },
    {
      "content": "After mapping all numbers, you can use the built-in sorting functions in your programming language. For example, in Python, you can use 'sorted()' with a custom key that extracts the mapped value."
    },
    {
      "content": "As you prepare to implement the sorting, remember that the final output should be an array of the original numbers, not their mapped values. Your sorting should only influence the order of the original numbers."
    },
    {
      "content": "To finalize your approach, consider how you will implement the sorting step. You might want to use a lambda function or a custom comparator that sorts based on the mapped values while preserving the original order."
    }
  ],
  "questionNotes": [
    "mapping.length == 10",
    "0 <= mapping[i] <= 9",
    "All values of mapping[i] are unique.",
    "1 <= nums.length <= 3 * 10^4",
    "0 <= nums[i] < 10^9",
    "Elements with the same mapped values should maintain their relative order."
  ]
}