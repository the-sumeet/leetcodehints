{
  "hints": [
    {
      "content": "Start by understanding the structure of the input arrays. `nums1` has a length of `m + n`, where the first `m` elements are valid, and the last `n` elements are placeholders (zeros). `nums2` contains `n` valid elements."
    },
    {
      "content": "Consider how you would merge two sorted arrays. You can use a two-pointer technique where one pointer traverses `nums1` and the other traverses `nums2`. This will help you keep track of the current elements being compared."
    },
    {
      "content": "Think about where to place the merged elements. Since `nums1` has extra space at the end, you can merge the arrays from the back to the front. This way, you do not overwrite elements in `nums1` that you still need to compare."
    },
    {
      "content": "Initialize three pointers: one for the end of the valid elements in `nums1` (i.e., `m - 1`), one for the end of `nums2` (i.e., `n - 1`), and one for the end of `nums1` (i.e., `m + n - 1`)."
    },
    {
      "content": "While both pointers for `nums1` and `nums2` are valid, compare the elements they point to. Place the larger element at the end of `nums1` and move the corresponding pointer backward."
    },
    {
      "content": "After the main merging loop, if there are any remaining elements in `nums2`, copy them over to `nums1`. This is necessary because `nums1` may still have unfilled leading elements if `nums2` has smaller elements."
    },
    {
      "content": "Consider edge cases where one of the arrays is empty. For example, if `m = 0`, `nums1` contains only zeros, and you should directly copy `nums2` into `nums1`."
    },
    {
      "content": "Remember to handle the case where `n = 0`. In this situation, `nums1` is already sorted and contains all the elements you need, so no further action is required."
    },
    {
      "content": "Ensure your algorithm runs in O(m + n) time. This means you should traverse each array only once, making sure your merging logic is efficient."
    },
    {
      "content": "Finally, implement the merging logic using the pointers. Start from the back and fill `nums1` until all elements from both arrays have been merged correctly."
    }
  ],
  "questionNotes": [
    "nums1 has a length of m + n, where the first m elements are valid.",
    "nums2 has a length of n and contains only valid elements.",
    "Final merged array should be stored in nums1, not returned.",
    "Handle edge cases where either m or n is 0.",
    "Aim for O(m + n) time complexity."
  ]
}