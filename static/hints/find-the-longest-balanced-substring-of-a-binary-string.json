{
  "hints": [
    {
      "content": "Start by understanding what a balanced substring is. A substring is balanced if it contains an equal number of '0's and '1's, with all '0's appearing before any '1's. For example, in '0011', the substring is balanced."
    },
    {
      "content": "Consider how you might identify substrings in the binary string. Remember that a substring is a contiguous part of the string, so you can use two nested loops to explore all possible substrings."
    },
    {
      "content": "As you explore substrings, keep track of the counts of '0's and '1's. You can use two variables to count these characters as you iterate through each substring."
    },
    {
      "content": "Think about the conditions that must be satisfied for a substring to be considered balanced. Specifically, check if the count of '0's equals the count of '1's and that all '0's come before any '1's."
    },
    {
      "content": "Consider edge cases, such as strings that contain only '0's or only '1's. These cases should return a length of 0 for the longest balanced substring, since no valid substrings exist."
    },
    {
      "content": "To optimize your search, you can break out of the inner loop early if you find that the number of '1's exceeds the number of '0's in the substring you're currently examining."
    },
    {
      "content": "While iterating through substrings, maintain a variable to store the maximum length of any balanced substring found so far. Update this variable whenever you find a balanced substring."
    },
    {
      "content": "Remember to check for the empty substring, which is always considered balanced. You should return 0 if no other balanced substrings are found."
    },
    {
      "content": "As you implement your solution, consider using a helper function to determine if a given substring is balanced. This can help keep your code organized and improve readability."
    },
    {
      "content": "Finally, ensure that your code correctly handles all possible substrings. You might want to iterate through all starting indices and then through all ending indices for each starting index to cover all cases."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 50",
    "The input string consists only of '0's and '1's.",
    "An empty substring is considered balanced.",
    "Return the length of the longest balanced substring."
  ]
}