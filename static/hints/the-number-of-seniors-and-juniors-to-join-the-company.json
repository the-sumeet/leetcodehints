{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of candidates, each with an employee ID, experience level (either 'Junior' or 'Senior'), and a salary. Make sure you can access these values correctly."
    },
    {
      "content": "Consider how you will differentiate between 'Junior' and 'Senior' candidates. You might want to create separate lists or counters for each experience level as you process the candidates."
    },
    {
      "content": "Think about how you will store the total salary for each experience level. You could use two variables, one for juniors and one for seniors, to accumulate their salaries as you iterate through the candidate list."
    },
    {
      "content": "When calculating the average salary for each experience level, remember that the average is the total salary divided by the number of candidates in that group. Make sure to handle cases where there might be no candidates in one of the groups."
    },
    {
      "content": "Consider edge cases where all candidates might be of the same experience level. How will your logic handle this situation when calculating averages?"
    },
    {
      "content": "You may want to think about how to handle candidates with the same salary. If two seniors earn the same amount, how does that affect your calculations or results?"
    },
    {
      "content": "As you work through the candidates, remember to keep track of the count of juniors and seniors separately. This will be essential for calculating averages later."
    },
    {
      "content": "When you have your totals and counts, how will you format the output? Make sure you know how to structure your final result to match the expected output format."
    },
    {
      "content": "Check if there are any constraints on the number of candidates or their salaries. This could affect how you implement your solution, especially regarding performance."
    },
    {
      "content": "Think about using a loop to iterate over the candidates. For each candidate, check their experience level and update the corresponding total salary and count."
    },
    {
      "content": "If you encounter a candidate with an experience level not accounted for (e.g., neither 'Junior' nor 'Senior'), how will you handle that? Consider adding validation."
    },
    {
      "content": "Remember to handle potential division by zero when calculating averages. If there are no juniors or seniors, what will your code return?"
    },
    {
      "content": "As you prepare to return your results, consider how you will structure the output. Will you return a dictionary, a list, or some other structure?"
    },
    {
      "content": "Make sure to test your solution with various scenarios, including edge cases like all juniors, all seniors, and mixed cases with varying salaries."
    },
    {
      "content": "Finally, think about how you can optimize your solution. Are there any unnecessary computations that can be avoided? Can you reduce the number of loops?"
    }
  ],
  "questionNotes": [
    "Input data consists of a list of candidates with employee_id, experience, and salary.",
    "Experience can only be 'Junior' or 'Senior'.",
    "You need to calculate the total and average salary for each experience level.",
    "Handle cases with no candidates in one of the experience levels to avoid division by zero.",
    "Output format should be clear and structured, possibly as a dictionary or list."
  ]
}