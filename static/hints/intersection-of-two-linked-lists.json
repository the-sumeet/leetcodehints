{
  "hints": [
    {
      "content": "Start by understanding what it means for two linked lists to intersect. They intersect at a node if both lists share the same node reference, not just the same value."
    },
    {
      "content": "Consider how you can traverse both linked lists. You need to find a way to compare nodes from both lists to identify the intersection point."
    },
    {
      "content": "Think about the lengths of both linked lists. If one list is longer than the other, you may need to skip some nodes in the longer list to align both pointers for comparison."
    },
    {
      "content": "You can calculate the lengths of both linked lists first. This will help you determine how many nodes to skip in the longer list before starting the comparison."
    },
    {
      "content": "When traversing the lists, use two pointers, one for each list. Move each pointer at the same pace after adjusting for the length difference."
    },
    {
      "content": "If the pointers meet at a node, that node is the intersection. If they reach the end of their respective lists without meeting, then there is no intersection."
    },
    {
      "content": "Consider edge cases, such as when either of the lists is empty. If one list is null, the intersection must also be null."
    },
    {
      "content": "Make sure to handle the case where there is no intersection. The problem specifies that if the two lists do not intersect, you should return null."
    },
    {
      "content": "Remember that the function should run in O(m + n) time and use O(1) space. This means you should avoid using additional data structures like arrays or hash maps."
    },
    {
      "content": "To implement the solution, start by calculating the lengths of both lists, then align the starting points of both lists before comparing nodes one by one."
    }
  ],
  "questionNotes": [
    "The intersection is defined by node reference, not value.",
    "If lists do not intersect, return null.",
    "Constraints: 1 <= m, n <= 30,000; 1 <= Node.val <= 100,000.",
    "intersectVal is 0 if there is no intersection.",
    "skipA and skipB indicate how many nodes to skip to reach the intersection."
  ]
}