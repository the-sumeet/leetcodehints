{
  "hints": [
    {
      "content": "Start by understanding what a circular array is. In a circular array, the first and last elements are considered adjacent. This means when you check differences, you need to account for the wrap-around from the last element back to the first."
    },
    {
      "content": "To find the maximum absolute difference, you will need to compare each element with its adjacent elements. Remember to include the comparison between the last element and the first element due to the circular nature of the array."
    },
    {
      "content": "Consider how you can loop through the array. You can use a for loop that runs from 0 to the length of the array, and for each index, calculate the absolute difference with the next index. Don't forget to handle the last index properly."
    },
    {
      "content": "When calculating the absolute difference, use the formula `|nums[i] - nums[j]|`. This will help you find the difference between any two elements in the array. Make sure to define what `j` will be for each `i`."
    },
    {
      "content": "Think about how you will keep track of the maximum difference you find. You can initialize a variable to hold the maximum difference and update it whenever you find a larger difference."
    },
    {
      "content": "Remember that the constraints tell you that the array will always have at least 2 elements. This simplifies some of your edge case considerations, as you won't need to handle empty arrays."
    },
    {
      "content": "As you loop through the array, consider using the modulo operator to handle the circular nature. For example, when checking the element after the last one, you can use `(i + 1) % length` to wrap around."
    },
    {
      "content": "When comparing elements, ensure you are using absolute values. This can be done using the `abs()` function in many programming languages. This is crucial for correctly calculating the maximum difference."
    },
    {
      "content": "Make sure to test your solution with edge cases, such as arrays with negative numbers or arrays where all elements are the same. These will help ensure your logic is robust."
    },
    {
      "content": "Finally, after you have implemented the logic, remember to return the maximum difference you found. This should be a single integer value representing the maximum absolute difference between adjacent elements."
    }
  ],
  "questionNotes": [
    "The array is circular, meaning the first and last elements are adjacent.",
    "You need to find the maximum absolute difference between adjacent elements.",
    "Constraints: 2 <= nums.length <= 100, -100 <= nums[i] <= 100.",
    "Return format: a single integer representing the maximum difference."
  ]
}