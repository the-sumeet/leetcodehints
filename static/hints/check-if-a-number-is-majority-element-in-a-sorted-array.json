{
  "hints": [
    {
      "content": "Start by understanding what a 'majority element' means. A majority element in an array is an element that appears more than n/2 times, where n is the size of the array."
    },
    {
      "content": "Since the array is sorted, consider how this property can help you identify the majority element more efficiently. For example, if an element is a majority element, it must occupy a certain range of indices."
    },
    {
      "content": "Think about how you can find the first and last occurrence of the target element in the sorted array. This can help you determine how many times it appears."
    },
    {
      "content": "You can use binary search to find the first occurrence of the target element. This will allow you to quickly locate the range of indices where the element appears."
    },
    {
      "content": "Once you find the first occurrence, you can calculate the last occurrence by using the properties of the sorted array. If the first index is `firstIndex`, the last index can be found by checking subsequent elements."
    },
    {
      "content": "Consider edge cases where the target element may not exist in the array. What should your function return in such cases?"
    },
    {
      "content": "After determining the first and last indices of the target element, calculate the total count of occurrences. You can do this by subtracting the indices and adding one."
    },
    {
      "content": "Remember to compare the count of occurrences with n/2 to check if it qualifies as a majority element. What happens if the count is exactly n/2?"
    },
    {
      "content": "Make sure to handle cases where the input array is empty or has only one element. What should your function return in these scenarios?"
    },
    {
      "content": "Finally, implement your logic to return true if the count of the target element is greater than n/2, and false otherwise. Ensure your code is efficient, ideally O(log n) due to the binary search."
    }
  ],
  "questionNotes": [
    "The input array is sorted.",
    "A majority element appears more than n/2 times.",
    "Return true if the number is a majority element, false otherwise.",
    "Consider edge cases like empty arrays or arrays with one element."
  ]
}