{
  "hints": [
    {
      "content": "Start by understanding the structure of a binary tree. Each node can have up to two children: a left child and a right child. Familiarize yourself with how to traverse the tree."
    },
    {
      "content": "Consider what defines a 'leaf' node. A leaf node is one that has no children. In this problem, you specifically need to identify left leaves, which are leaf nodes that are also the left child of their parent."
    },
    {
      "content": "Think about how you can traverse the tree. You can use either Depth-First Search (DFS) or Breadth-First Search (BFS). Which method do you think would make it easier to keep track of whether a node is a left child?"
    },
    {
      "content": "When traversing the tree, keep track of the current node's parent. This will help you determine if the current node is a left child. You can pass this information along as you recurse or iterate."
    },
    {
      "content": "As you traverse the tree, check if the current node is a leaf. If it is a leaf and it is also a left child, add its value to a running total. How will you maintain this total as you traverse?"
    },
    {
      "content": "Consider edge cases, such as when the tree only has one node. What should your function return in that scenario? Make sure your implementation handles this gracefully."
    },
    {
      "content": "You might want to define a helper function to handle the recursion. This function can take the current node and a flag indicating whether it's a left child. How would you structure this function?"
    },
    {
      "content": "Remember to check for null nodes in your traversal. If a node is null, you should return immediately without doing any further processing. How will you implement this check?"
    },
    {
      "content": "As you build your solution, think about how you will return the final sum. Will you return it from your helper function or store it in a variable that you return at the end of the main function?"
    },
    {
      "content": "Your final implementation should clearly separate the logic for traversing the tree and the logic for summing the left leaves. Consider how you will organize your code to maintain clarity and readability."
    }
  ],
  "questionNotes": [
    "A leaf is defined as a node with no children.",
    "A left leaf is specifically a leaf that is the left child of its parent.",
    "The input is a binary tree represented as an array, where 'null' indicates the absence of a node.",
    "The function should return an integer representing the sum of all left leaves.",
    "Constraints: The number of nodes is between 1 and 1000, and node values range from -1000 to 1000."
  ]
}