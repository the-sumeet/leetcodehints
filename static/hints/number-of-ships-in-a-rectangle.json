{
  "hints": [
    {
      "content": "Start by understanding the input format. You are given a list of ship coordinates, a rectangle's top-right corner, and a bottom-left corner. Make sure to visualize how these points relate to each other."
    },
    {
      "content": "Consider how to determine if a ship is inside the rectangle. A ship is represented by its coordinates [x, y]. The condition for being inside the rectangle defined by [bottomLeftX, bottomLeftY] and [topRightX, topRightY] is: bottomLeftX <= x <= topRightX and bottomLeftY <= y <= topRightY."
    },
    {
      "content": "Think about the edge cases where the rectangle might be very small or even degenerate, such as when the top-right corner is the same as the bottom-left corner. How should your solution handle these cases?"
    },
    {
      "content": "What should you return if no ships are found within the rectangle? Make sure your function has a clear return value that matches the expected output format."
    },
    {
      "content": "Consider how to efficiently count the number of ships within the rectangle. A simple approach would be to iterate through each ship and check if it falls within the rectangle's bounds. What is the time complexity of this approach?"
    },
    {
      "content": "Think about optimizing your solution. If the list of ships is large, a brute-force approach may not be efficient. Can you think of any data structures that could help you reduce the number of checks?"
    },
    {
      "content": "Remember to handle duplicate ship coordinates. If multiple ships are at the same position, how should your counting logic treat them? Should they be counted once or multiple times?"
    },
    {
      "content": "What if the rectangle is entirely outside the range of the ship coordinates? You should ensure that your solution handles cases where no ships can possibly be inside the rectangle."
    },
    {
      "content": "Consider edge cases where the rectangle only touches the edges of the ship coordinates. Should ships on the boundary be included in your count? Clarify the inclusion criteria."
    },
    {
      "content": "Think about how you would test your solution. Create a variety of test cases, including edge cases, to ensure your solution is robust. What scenarios could break your logic?"
    },
    {
      "content": "If you're using a loop to check each ship, remember to initialize your count variable before the loop starts. How will you increment this count when a ship is found inside the rectangle?"
    },
    {
      "content": "When implementing your solution, consider using meaningful variable names for better readability. For instance, use 'shipCount' for the variable that tracks the number of ships found."
    },
    {
      "content": "You may want to sort the ships based on their coordinates if you plan to implement a more advanced search method. How would sorting help in reducing the number of checks?"
    },
    {
      "content": "As you finalize your solution, double-check that your return statement is correctly formatted to match the expected output. Are you returning just the count of ships, or do you need to return something else?"
    },
    {
      "content": "Before submitting, review your code for any potential off-by-one errors, especially when dealing with coordinate boundaries. Ensure your conditions accurately reflect whether a ship is inside the rectangle."
    }
  ],
  "questionNotes": [
    "Input is a list of ship coordinates, each represented as [x, y].",
    "The rectangle is defined by two points: bottom-left and top-right.",
    "Ensure to handle cases where ships are at the same coordinates.",
    "Consider edge cases where the rectangle may not contain any ships.",
    "Return the count of ships within the rectangle."
  ]
}