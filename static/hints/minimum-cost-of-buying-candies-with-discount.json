{
  "hints": [
    {
      "content": "Start by understanding how the discount works. For every two candies you buy, you can choose one candy for free. This means that the strategy for selecting which candies to buy is crucial."
    },
    {
      "content": "Consider how you can group the candies into pairs. Since you can only take one candy for free for every two you buy, think about how to maximize the value of the free candy by choosing the right pairs."
    },
    {
      "content": "Notice that the free candy must have a cost less than or equal to the minimum cost of the two candies you are purchasing. This is a key restriction that will affect your selection."
    },
    {
      "content": "Sort the array of candy costs. By sorting, you can easily identify the cheapest candies to take for free after buying the more expensive ones."
    },
    {
      "content": "When iterating through the sorted costs, consider how to group them into sets of three. Each set will consist of two candies you buy and one candy you can take for free."
    },
    {
      "content": "As you form groups of three, remember that if you have an odd number of candies, the last candy will not have a pair to buy with. Make sure to account for this in your total cost."
    },
    {
      "content": "Keep track of the total cost as you iterate through the sorted list. For each pair of candies, add their costs to the total, and then determine which candy can be taken for free."
    },
    {
      "content": "Think about how you can efficiently find the minimum cost candy that qualifies as a free candy after selecting a paid pair. You might want to maintain a list of available candies."
    },
    {
      "content": "Consider edge cases, such as when all candies have the same cost or when there are only two candies. How will your logic adapt to these scenarios?"
    },
    {
      "content": "Finally, implement the logic to calculate the total minimum cost while ensuring you follow the rules for selecting the free candy from the pairs you buy. This will involve looping through the sorted costs and applying your grouping strategy."
    }
  ],
  "questionNotes": [
    "The input is a 0-indexed integer array `cost`.",
    "For every two candies bought, one candy can be taken for free.",
    "The cost of the free candy must be less than or equal to the minimum of the two purchased candies.",
    "Return the total minimum cost to buy all candies.",
    "Constraints: 1 <= cost.length <= 100, 1 <= cost[i] <= 100."
  ]
}