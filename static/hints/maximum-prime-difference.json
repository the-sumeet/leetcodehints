{
  "hints": [
    {
      "content": "Start by understanding what a prime number is. A prime number is greater than 1 and has no divisors other than 1 and itself. Make sure you can identify prime numbers in the range given (1 to 100)."
    },
    {
      "content": "Create a helper function to determine if a number is prime. This function should return a boolean indicating whether a number is prime or not. For example: `isPrime(num) { return num > 1 && ... }`."
    },
    {
      "content": "Iterate through the `nums` array and collect the indices of all prime numbers. You can use a list or array to store these indices for later use."
    },
    {
      "content": "Consider edge cases where there is only one prime number in the array. In such cases, the maximum distance will always be zero since the index of the prime number will be the same."
    },
    {
      "content": "Once you have the indices of all prime numbers, calculate the maximum distance between the first and last index in this list. Remember, the distance is calculated as the absolute difference between two indices."
    },
    {
      "content": "Think about how you can optimize your solution. Since the maximum size of the array can be quite large (up to 300,000), ensure your prime-checking function is efficient."
    },
    {
      "content": "Keep in mind that the maximum distance can also be between the same index (if there are duplicate prime numbers). Ensure your logic accounts for this."
    },
    {
      "content": "When calculating the maximum distance, you might want to use a simple loop to find the min and max indices of the prime numbers instead of storing all indices if you're only interested in the extremes."
    },
    {
      "content": "Consider edge cases where all elements are prime. The maximum distance in such cases will be between the first and last index of the array."
    },
    {
      "content": "Finally, implement the logic to return the maximum distance calculated. Ensure you test your solution with various inputs to cover all edge cases."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 3 * 10^5",
    "Constraints: 1 <= nums[i] <= 100",
    "There will always be at least one prime number in the input array.",
    "The indices are zero-based.",
    "The output should be the maximum distance between indices of prime numbers."
  ]
}