{
  "hints": [
    {
      "content": "Start by understanding the basic movements of the cars. Each car can either move left ('L'), move right ('R'), or stay still ('S'). Consider how these movements interact with each other, especially when cars are adjacent."
    },
    {
      "content": "When two cars moving in opposite directions ('R' and 'L') meet, they will collide. Remember that this type of collision counts as 2 towards the total collisions. Think about how you can identify these pairs in the string."
    },
    {
      "content": "Cars that are stationary ('S') can also be involved in collisions. If a moving car collides with a stationary car, it adds 1 to the total collision count. Be sure to account for these stationary cars when calculating collisions."
    },
    {
      "content": "Consider iterating through the string of directions. You might want to keep track of the current state of each car as you process them from left to right. This will help you determine when collisions occur."
    },
    {
      "content": "As you iterate through the string, pay attention to the transitions between different car states. For example, if you encounter 'R' followed by 'L', a collision is imminent. How would you handle this scenario in your code?"
    },
    {
      "content": "Make sure to handle cases where multiple collisions occur in sequence. For instance, if a car moving left collides with a stationary car, and then another car moving right collides with the same stationary car, how will you update the collision count?"
    },
    {
      "content": "Think about edge cases, such as when all cars are moving in the same direction or when there are no moving cars at all. What would your function return in these scenarios?"
    },
    {
      "content": "You should also consider the constraints provided in the problem. The length of the directions string can be quite large (up to 100,000). How will you ensure your solution is efficient enough to handle the maximum input size?"
    },
    {
      "content": "As you approach the final implementation, consider how you will store the collision count. You might want to initialize a variable to keep track of the total number of collisions and update it as you identify collisions during your iteration."
    },
    {
      "content": "Finally, remember to return the total number of collisions after processing the entire string. Make sure your function returns this value in the correct format as specified in the problem statement."
    }
  ],
  "questionNotes": [
    "1 <= directions.length <= 100000",
    "directions[i] is either 'L', 'R', or 'S'",
    "Cars are numbered from 0 to n - 1 from left to right.",
    "Collisions increase by 2 for opposite directions and by 1 for stationary cars.",
    "After a collision, involved cars do not move."
  ]
}