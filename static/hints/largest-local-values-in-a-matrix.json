{
  "hints": [
    {
      "content": "Start by understanding the dimensions of the output matrix. Since you're generating a matrix of size (n - 2) x (n - 2), think about how the indices of the original matrix relate to the indices of the new matrix."
    },
    {
      "content": "To find the maximum value in each 3 x 3 submatrix, you'll need to iterate through the original matrix. Consider how you can use nested loops to access the elements of each 3 x 3 region."
    },
    {
      "content": "Remember that for each position (i, j) in the maxLocal matrix, you will be looking at the elements from grid[i:i+3][j:j+3]. Make sure to handle the indices correctly."
    },
    {
      "content": "When iterating through the original matrix, note that you should only go up to n - 2 for both rows and columns. This is because you need to ensure you can form a complete 3 x 3 matrix."
    },
    {
      "content": "As you examine each 3 x 3 matrix, think about how you can keep track of the maximum value. You might want to initialize a variable to hold the maximum and update it as you check each element."
    },
    {
      "content": "Consider edge cases where all elements in the grid are the same. How would your algorithm handle this? Would it still return the correct output?"
    },
    {
      "content": "When you extract the maximum value from the 3 x 3 matrix, ensure that you are correctly assigning this value to the corresponding position in the maxLocal matrix."
    },
    {
      "content": "Think about the efficiency of your solution. You will be performing a nested loop for the original matrix and another loop for the 3 x 3 submatrix. How can you ensure this runs efficiently within the given constraints?"
    },
    {
      "content": "As a final step, remember to return the maxLocal matrix in the correct format. Ensure that your output matches the expected structure as described in the problem statement."
    },
    {
      "content": "You are almost there! To summarize, iterate over the grid, extract each 3 x 3 matrix, find the maximum, and store it in the corresponding position in maxLocal. Don't forget to handle the indexing carefully!"
    }
  ],
  "questionNotes": [
    "Constraints: n == grid.length == grid[i].length, 3 <= n <= 100",
    "1 <= grid[i][j] <= 100",
    "The output matrix maxLocal will have dimensions (n - 2) x (n - 2).",
    "Make sure to handle indexing correctly when accessing submatrices."
  ]
}