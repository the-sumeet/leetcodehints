{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of problems, each represented by an ID, likes, and dislikes. Make sure you can access these values correctly."
    },
    {
      "content": "Consider how you might define 'low-quality' problems. A good starting point is to think about the ratio of dislikes to likes. What threshold would you use to classify a problem as low-quality?"
    },
    {
      "content": "Think about edge cases. For example, if a problem has a high number of likes but also a high number of dislikes, how would you categorize it? Would you only look at the ratio, or would you set specific limits?"
    },
    {
      "content": "You might want to calculate the ratio of dislikes to likes for each problem. This could be done using a simple formula: `ratio = dislikes / likes`. Remember to handle cases where likes might be zero to avoid division by zero errors."
    },
    {
      "content": "Consider how to store the results of your calculations. You might want to create a list or dictionary to hold the problems that meet your criteria for being low-quality."
    },
    {
      "content": "As you iterate through the problems, think about how to determine which problems to include in your final result. Will you need to sort them based on their dislike ratio, or just filter them?"
    },
    {
      "content": "Don't forget about the output format. You might need to return a list of problem IDs that are classified as low-quality. Make sure you understand how to structure this output correctly."
    },
    {
      "content": "When filtering the problems, consider if there are any specific thresholds for the dislike ratio that you want to apply. For instance, you might decide that a dislike ratio greater than 1 indicates a low-quality problem."
    },
    {
      "content": "Keep in mind the possibility of ties. If two problems have the same dislike ratio, how will you decide which one to include, if at all? Will you include both, or prioritize one over the other?"
    },
    {
      "content": "Finally, implement your logic to filter and collect the low-quality problems. Ensure that you test your solution with various inputs to confirm it behaves as expected, especially with edge cases like zero likes."
    }
  ],
  "questionNotes": [
    "Input is a list of problems with problem_id, likes, and dislikes.",
    "You need to classify problems as low-quality based on a ratio of dislikes to likes.",
    "Handle division by zero if likes are zero.",
    "Output should be a list of problem IDs that are classified as low-quality.",
    "Consider tie-breaking rules for problems with the same dislike ratio."
  ]
}