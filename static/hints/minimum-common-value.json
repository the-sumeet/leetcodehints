{
  "hints": [
    {
      "content": "Start by understanding the input arrays. Both `nums1` and `nums2` are sorted in non-decreasing order. This property can be leveraged to find common elements efficiently."
    },
    {
      "content": "Consider using a two-pointer technique. Initialize one pointer for each array. This way, you can traverse both arrays simultaneously and compare elements."
    },
    {
      "content": "When comparing elements from both arrays, if the element in `nums1` is less than the element in `nums2`, move the pointer in `nums1` forward. This helps in finding the common elements without unnecessary comparisons."
    },
    {
      "content": "If the elements at both pointers are equal, you have found a common element. Keep track of the minimum common value found so far."
    },
    {
      "content": "Make sure to handle cases where there are multiple common elements. You need to return the smallest one, so always compare with the current minimum common value."
    },
    {
      "content": "If at any point the pointers go out of bounds of their respective arrays, you should stop the process as there are no more elements to compare."
    },
    {
      "content": "Don't forget to handle the case where no common elements are found. If your minimum common value remains unchanged, return -1."
    },
    {
      "content": "Consider edge cases, such as when one of the arrays is empty or when all elements are unique. How will your algorithm handle these situations?"
    },
    {
      "content": "Remember that both arrays can contain large numbers, so ensure your solution handles the constraints efficiently. Aim for a time complexity better than O(n*m)."
    },
    {
      "content": "As a final step, implement the logic to return the minimum common value or -1 if no common value exists. Ensure your function signature matches the expected format."
    }
  ],
  "questionNotes": [
    "Both `nums1` and `nums2` are sorted in non-decreasing order.",
    "Return the smallest common integer or -1 if none exists.",
    "Constraints: 1 <= nums1.length, nums2.length <= 10^5; 1 <= nums1[i], nums2[j] <= 10^9."
  ]
}