{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. Each sub-array represents a threat, where the first element is an ID, the second is severity, and the third is exploitability. Make sure you can access these elements correctly."
    },
    {
      "content": "Consider how you might want to sort the threats. You need to prioritize based on severity first, and then exploitability. Think about how you can use a sorting function that allows for multi-level sorting."
    },
    {
      "content": "Remember that in Python, you can use the `sorted()` function with a custom key. You can define the key as a tuple that includes both severity and exploitability. For example: `sorted(threats, key=lambda x: (x[1], x[2]))`."
    },
    {
      "content": "Pay attention to the order of sorting. You might want to sort severity in descending order and exploitability in ascending order. Make sure to adjust your sorting key accordingly."
    },
    {
      "content": "Consider edge cases where multiple threats have the same severity and exploitability. You need to ensure that your sorting still maintains a consistent order for these cases. Think about how Python handles tuples in sorting."
    },
    {
      "content": "Think about how you will return the sorted list. The output should maintain the same structure as the input, so ensure you are not altering the format of the sub-arrays."
    },
    {
      "content": "Before implementing the sorting, write down test cases that include edge cases, such as all threats having the same severity or exploitability, to ensure your solution handles these correctly."
    },
    {
      "content": "Make sure to test your function with various inputs, including the provided examples and your own edge cases. This will help you confirm that your sorting logic is robust."
    },
    {
      "content": "As you implement the sorting, remember to check the final output format. It should be a list of lists, just like the input, and maintain the integrity of the original data."
    },
    {
      "content": "Finally, implement the sorting logic and test it with the sample test case. Ensure that the output is as expected, and consider adding print statements to debug if necessary."
    }
  ],
  "questionNotes": [
    "Input is a list of lists where each inner list contains three elements: [ID, severity, exploitability].",
    "Sorting should be primarily by severity (descending) and then by exploitability (ascending).",
    "Ensure the output maintains the same list of lists structure as the input.",
    "Consider edge cases where multiple threats have the same severity and exploitability."
  ]
}