{
  "hints": [
    {
      "content": "Start by thinking about how to identify a battleship in the board. Remember that battleships are represented by 'X' and can be either horizontal or vertical."
    },
    {
      "content": "Consider how you can traverse the matrix. A common approach is to use nested loops to iterate through each cell in the 2D array."
    },
    {
      "content": "When you encounter an 'X', check if it is the start of a new battleship. This can be determined by checking the cell above and to the left of the current cell."
    },
    {
      "content": "If the current cell is an 'X' and the cell above it is either out of bounds or '.', then it is the start of a new battleship in the vertical direction."
    },
    {
      "content": "Similarly, check the left cell of the current 'X'. If it is out of bounds or '.', then it is the start of a new battleship in the horizontal direction."
    },
    {
      "content": "Keep a counter to track the number of battleships you find. Each time you identify a starting 'X', increment this counter."
    },
    {
      "content": "Make sure to handle edge cases, such as when the board has only one cell or when there are no battleships at all."
    },
    {
      "content": "Remember that you need to ensure that your solution runs in one pass. This means you should not revisit any cell once it has been processed."
    },
    {
      "content": "To achieve O(1) extra memory, avoid using any additional data structures like arrays or lists to store results. Use a simple counter instead."
    },
    {
      "content": "As a final step, ensure your implementation correctly accounts for the constraints of the problem, such as the maximum dimensions of the board."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= m, n <= 200",
    "Each cell is either 'X' (part of a battleship) or '.' (empty).",
    "Battleships are separated by at least one empty cell.",
    "You should do this in one pass with O(1) extra memory."
  ]
}