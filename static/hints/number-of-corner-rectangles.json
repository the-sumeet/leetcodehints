{
  "hints": [
    {
      "content": "Start by understanding what a corner rectangle is. A corner rectangle is formed by two pairs of '1's in the grid, where the '1's are located at the corners of the rectangle."
    },
    {
      "content": "Consider how to identify pairs of '1's in each row. You can iterate through each row and store the indices of '1's in a list. This will help you find potential corners."
    },
    {
      "content": "Think about how to count rectangles formed by pairs of rows. If you have two rows with '1's in the same columns, you can form rectangles between those columns. How would you track these pairs?"
    },
    {
      "content": "When you find two rows with the same column indices for '1's, you can count how many pairs of columns there are. This can be done using combinations. Remember to use the combination formula: C(n, 2) = n * (n - 1) / 2."
    },
    {
      "content": "You might want to use a dictionary to store the count of column pairs for each row. This way, you can easily access and update the counts as you process each row."
    },
    {
      "content": "Consider edge cases where there are no '1's or where all elements are '0's. How will your solution handle these cases? Make sure to test your logic against these scenarios."
    },
    {
      "content": "As you implement the counting of rectangles, remember to only consider pairs of rows that have at least two '1's. This will help you avoid counting invalid rectangles."
    },
    {
      "content": "Think about the time complexity of your solution. You want to ensure that your approach is efficient enough, especially if the grid is large. Aim for a solution better than O(n^3)."
    },
    {
      "content": "When you have your counts of column pairs, sum them up to get the total number of rectangles. Make sure to double-check your counting logic to avoid off-by-one errors."
    },
    {
      "content": "Finally, integrate all your parts together. Ensure that your final implementation correctly returns the total number of corner rectangles based on the processed data from the grid."
    }
  ],
  "questionNotes": [
    "The input is a 2D grid of 0s and 1s, where 1 represents a point that can be a corner of a rectangle.",
    "You need to count unique rectangles formed by 1s in the grid.",
    "Each rectangle is defined by two rows and two columns of 1s.",
    "The output should be a single integer representing the number of corner rectangles."
  ]
}