{
  "hints": [
    {
      "content": "Start by understanding the grid structure. Each cell in the grid can either be a `0` (cleanable space) or a `1` (obstacle). Make sure you can identify these values in your implementation."
    },
    {
      "content": "Consider how the robot moves. It can only move to adjacent cells (up, down, left, right). Think about how you would implement this movement in your code."
    },
    {
      "content": "You may want to keep track of the cells the robot has already cleaned. A simple way to do this is by using a set or a boolean array to mark cleaned spaces."
    },
    {
      "content": "Think about the starting position of the robot. Ensure that your code can handle different starting points and that it checks whether that position is valid (i.e., within bounds and cleanable)."
    },
    {
      "content": "Consider edge cases, such as when the grid is empty or when all cells are obstacles. What should your function return in these scenarios?"
    },
    {
      "content": "You might want to use a depth-first search (DFS) or breadth-first search (BFS) approach to explore the grid. This will help you systematically visit each cleanable cell."
    },
    {
      "content": "When implementing your search algorithm, make sure to check for out-of-bounds conditions. This is crucial to avoid errors when the robot reaches the edge of the grid."
    },
    {
      "content": "As you explore the grid, remember to count the number of unique cleanable cells the robot visits. This will be your final output."
    },
    {
      "content": "Think about how to handle cells that have already been cleaned. You should skip these cells during your search to avoid counting them multiple times."
    },
    {
      "content": "Finally, ensure that your function returns the correct count of cleaned spaces. The return value should be an integer representing the total number of unique `0` cells cleaned by the robot."
    }
  ],
  "questionNotes": [
    "The grid is represented as a 2D list with `0` for cleanable spaces and `1` for obstacles.",
    "The robot can only move to adjacent cells (up, down, left, right).",
    "You need to count unique cleanable cells that the robot can reach.",
    "Consider edge cases like empty grids or grids filled with obstacles.",
    "The return format should be a single integer representing the count of cleaned spaces."
  ]
}