{
  "hints": [
    {
      "content": "Start by understanding the definition of a peak. A peak is an element that is strictly greater than its immediate neighbors. Remember that the first and last elements cannot be peaks."
    },
    {
      "content": "When iterating through the array to find peaks, you only need to check elements from index 1 to index length-2. This is because the first and last elements are excluded from being peaks."
    },
    {
      "content": "Consider using a loop to traverse the array. You can use a for loop that starts from index 1 and ends at index length-2. For each element, check if it is greater than its left and right neighbors."
    },
    {
      "content": "As you check for peaks, think about the conditions you need to satisfy. For an element at index `i`, it should satisfy: `mountain[i] > mountain[i-1]` and `mountain[i] > mountain[i+1]`."
    },
    {
      "content": "Make sure to collect the indices of the peaks you find. You can use a list to store these indices as you identify them during your loop."
    },
    {
      "content": "Don't forget to handle cases where there might be no peaks at all. Your function should return an empty list in such cases."
    },
    {
      "content": "Consider edge cases where two consecutive elements are equal. In such cases, the middle element cannot be a peak. Ensure your conditions account for strict inequality."
    },
    {
      "content": "Think about the return format. You need to return a list of indices of peaks, and the order does not matter. You can return the list directly after collecting the indices."
    },
    {
      "content": "Remember to test your solution with various inputs, including edge cases like arrays with all equal elements or strictly increasing/decreasing sequences."
    },
    {
      "content": "Finally, write your loop and conditions clearly. For example, a potential structure could look like this: `for i in range(1, len(mountain) - 1): if mountain[i] > mountain[i-1] and mountain[i] > mountain[i+1]: peaks.append(i)`."
    }
  ],
  "questionNotes": [
    "A peak is strictly greater than its neighbors.",
    "The first and last elements cannot be peaks.",
    "Return an array of indices of peaks in any order.",
    "Array length is between 3 and 100.",
    "Elements are between 1 and 100."
  ]
}