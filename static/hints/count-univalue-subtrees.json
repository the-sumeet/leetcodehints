{
  "hints": [
    {
      "content": "Start by understanding what a univalue subtree is. A univalue subtree is a subtree where all nodes have the same value. For example, in the tree with root value 5 and children 5, 5, 5, the left subtree is a univalue subtree."
    },
    {
      "content": "Think about how you would traverse the tree. A common approach is to use Depth-First Search (DFS) or a recursive method to explore each node and its children."
    },
    {
      "content": "Consider how to determine if a subtree rooted at a given node is a univalue subtree. You will need to compare the values of the node with its children's values."
    },
    {
      "content": "Remember to handle the base case in your recursion. If a node is null, it should not contribute to the count of univalue subtrees."
    },
    {
      "content": "As you traverse the tree, keep a count of the univalue subtrees you find. You might want to use a helper variable to maintain this count."
    },
    {
      "content": "When you check if a subtree is univalue, you should return a boolean indicating whether the current node's value matches its children's values. This will help you build the count correctly."
    },
    {
      "content": "Think about how you will return the count. You might want to increment your count variable each time you find a univalue subtree and return this count at the end of your traversal."
    },
    {
      "content": "Consider edge cases such as an empty tree. What should your function return in this case? Make sure your function handles this gracefully."
    },
    {
      "content": "When implementing your solution, remember that you need to check both left and right children of each node. If both children are null or have the same value as the current node, then you have a univalue subtree."
    },
    {
      "content": "Finally, ensure your function has the correct return type and format. You should return the total count of univalue subtrees found in the entire tree. Think about how to structure your recursive function to achieve this."
    }
  ],
  "questionNotes": [
    "A univalue subtree is defined as a subtree where all nodes have the same value.",
    "Use DFS or recursion to traverse the tree.",
    "Handle null nodes as base cases in your recursion.",
    "Return the total count of univalue subtrees found.",
    "Consider edge cases, such as an empty tree."
  ]
}