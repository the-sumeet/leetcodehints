{
  "hints": [
    {
      "content": "Start by understanding what a lucky integer is. A lucky integer has a frequency in the array that matches its value. For example, if the integer is 3, it should appear exactly 3 times in the array."
    },
    {
      "content": "Consider how you will count the frequency of each integer in the array. You might want to use a dictionary or a list to keep track of how many times each integer appears."
    },
    {
      "content": "Remember that the integers in the array are constrained between 1 and 500. This means you can use a list of size 501 to store the frequency of integers directly, where the index represents the integer itself."
    },
    {
      "content": "As you count the frequencies, think about how you will identify lucky integers. You need to check each integer's frequency against its value."
    },
    {
      "content": "When checking for lucky integers, keep track of the largest lucky integer you find. You can initialize a variable to store this value and update it whenever you find a new lucky integer."
    },
    {
      "content": "Don't forget to handle the case where there are no lucky integers found. You should return -1 in that case, so make sure to check if your largest lucky integer variable was updated."
    },
    {
      "content": "Consider edge cases, such as when the array contains only one element. What if that element is 1? Would it be considered a lucky integer?"
    },
    {
      "content": "As you implement your solution, ensure that you iterate through the frequency list to find the largest lucky integer. You can loop through indices from 1 to 500 and check if the index equals the frequency at that index."
    },
    {
      "content": "Make sure to account for the possibility of multiple lucky integers. If you find a lucky integer that is larger than your current maximum, update your maximum. If you find one that is equal, you can skip updating."
    },
    {
      "content": "Finally, once you have completed your checks, return the largest lucky integer you found or -1 if none were found. This will be the last step in your implementation."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= arr.length <= 500",
    "Constraints: 1 <= arr[i] <= 500",
    "Return the largest lucky integer or -1 if none exist.",
    "Lucky integer: frequency of integer equals its value."
  ]
}