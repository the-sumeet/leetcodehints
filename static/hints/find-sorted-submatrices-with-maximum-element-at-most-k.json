{
  "hints": [
    {
      "content": "Start by understanding the structure of the input matrix. It's a 2D array where each sub-array represents a row. Consider how to access elements using row and column indices."
    },
    {
      "content": "Think about how to define a submatrix. A submatrix is defined by two rows and two columns. You need to iterate through all possible pairs of rows and columns to form these submatrices."
    },
    {
      "content": "Since the problem specifies that the submatrices must be sorted, consider what it means for a matrix to be sorted. A matrix is sorted if each row is in non-decreasing order and each column is in non-decreasing order."
    },
    {
      "content": "Before checking if a submatrix is valid, you need to find the maximum element within it. Think about how you can efficiently calculate the maximum element in a submatrix."
    },
    {
      "content": "You may want to use a nested loop to iterate through all possible starting points for your submatrices. For each starting point, you will need to check various ending points."
    },
    {
      "content": "When checking if a submatrix is sorted, you can maintain a flag that tracks whether the current submatrix meets the sorted criteria as you expand it."
    },
    {
      "content": "Remember to check the maximum element of the submatrix against K. You can do this while you are checking for sorted order, which may save you some computation."
    },
    {
      "content": "Consider edge cases such as matrices with only one element or matrices where all elements are greater than K. How will your implementation handle these cases?"
    },
    {
      "content": "Think about the time complexity of your approach. If you are checking every possible submatrix, how can you optimize this process to avoid redundant calculations?"
    },
    {
      "content": "You might want to use a data structure to keep track of the maximum elements efficiently, such as a priority queue or a segment tree, especially if you are dealing with larger matrices."
    },
    {
      "content": "As you implement your solution, make sure to test with different matrix sizes and values of K. This will help you identify any edge cases that could break your code."
    },
    {
      "content": "Consider how you will return the result. The problem asks for the count of valid submatrices. Ensure your method for counting is clear and accurate."
    },
    {
      "content": "Make sure to handle cases where no submatrices meet the criteria. Your function should return 0 in such scenarios."
    },
    {
      "content": "As you finalize your solution, think about how you can simplify your code. Are there any repeated patterns or calculations that you can refactor into a separate function?"
    },
    {
      "content": "Before concluding, review the constraints of the problem. Ensure that your solution adheres to any limits on matrix size and element values."
    }
  ],
  "questionNotes": [
    "The input matrix is a 2D array of integers.",
    "Each submatrix must be sorted in non-decreasing order both row-wise and column-wise.",
    "You need to count how many such sorted submatrices have their maximum element at most K.",
    "Consider edge cases like single-element matrices or matrices where all elements exceed K.",
    "The output should be a single integer representing the count of valid submatrices."
  ]
}