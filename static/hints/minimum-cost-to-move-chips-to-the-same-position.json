{
  "hints": [
    {
      "content": "Start by understanding the movement costs. Moving a chip by 2 positions costs 0, while moving it by 1 position costs 1. This means you can move chips between even positions or odd positions without any cost."
    },
    {
      "content": "Consider how the positions of the chips can be categorized. You can group them into two categories: chips at even positions and chips at odd positions. This will help you analyze the costs more effectively."
    },
    {
      "content": "Think about the implications of moving all chips to either an even or an odd position. If you move all chips to an even position, only those at odd positions will incur a cost, and vice versa."
    },
    {
      "content": "Count how many chips are at even positions and how many are at odd positions. This will help you determine the minimum cost based on which group has fewer chips."
    },
    {
      "content": "Use a simple loop to iterate through the `position` array. For each position, check if it's even or odd and increment your respective counters."
    },
    {
      "content": "Once you have the counts of chips at even and odd positions, the minimum cost to move all chips to the same position will be the smaller of these two counts."
    },
    {
      "content": "Remember that the constraints specify that the number of chips can be up to 100. This means your solution should be efficient, but a simple O(n) solution is acceptable given the constraints."
    },
    {
      "content": "Consider edge cases, such as when all chips are already at the same position. In this case, the cost should be 0, regardless of the positions."
    },
    {
      "content": "Make sure to handle the input correctly. The `position` array can contain very large numbers, so ensure your solution can handle the maximum constraints without overflow."
    },
    {
      "content": "Finally, implement the logic to return the minimum cost. You should return the smaller count of chips at even or odd positions as your result."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= position.length <= 100",
    "Constraints: 1 <= position[i] <= 10^9",
    "Movement costs: +2/-2 = cost 0, +1/-1 = cost 1",
    "Return the minimum cost needed to move all chips to the same position."
  ]
}