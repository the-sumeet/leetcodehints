{
  "hints": [
    {
      "content": "Start by understanding how the toggling works. In the first round, all bulbs are turned on. In the second round, every second bulb is toggled (turned off). Can you see a pattern in how many times each bulb is toggled?"
    },
    {
      "content": "Consider how many times each bulb gets toggled. A bulb at position `k` is toggled in every round that is a divisor of `k`. For example, bulb 6 is toggled in rounds 1, 2, 3, and 6."
    },
    {
      "content": "Think about the divisors of a number. Most numbers have an even number of divisors because they come in pairs. However, perfect squares have an odd number of divisors. Why is this important for the bulbs?"
    },
    {
      "content": "If a bulb is toggled an odd number of times, it will end up on. If it is toggled an even number of times, it will end up off. How does this relate to perfect squares?"
    },
    {
      "content": "Given the relationship between toggles and perfect squares, can you determine how many perfect squares are there up to `n`? This will directly relate to how many bulbs remain on."
    },
    {
      "content": "Recall that the perfect squares up to `n` are 1, 4, 9, ..., k^2 where k^2 <= n. The largest integer k satisfying this is `floor(sqrt(n))`. How can you compute this in code?"
    },
    {
      "content": "Make sure to handle edge cases. For instance, what happens when `n` is 0? What should your function return in this case?"
    },
    {
      "content": "Consider the constraints given in the problem. Since `n` can be as large as 10^9, what is the most efficient way to compute `floor(sqrt(n))`? Think about the time complexity of your approach."
    },
    {
      "content": "You can use the built-in function to compute the square root in most programming languages. For example, in Python, you can use `math.isqrt(n)` to get the integer square root directly."
    },
    {
      "content": "Now, combine your findings. The final step is to return the count of bulbs that are on, which corresponds to the count of perfect squares up to `n`. This is `floor(sqrt(n))`."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= n <= 10^9",
    "Return the number of bulbs that are on after n rounds.",
    "Remember that indexing starts from 1 for the bulbs.",
    "Consider edge cases like n = 0 and n = 1."
  ]
}