{
  "hints": [
    {
      "content": "Start by understanding what a height-balanced binary search tree (BST) is. A BST is a tree where for each node, all elements in the left subtree are less, and all elements in the right subtree are greater. A height-balanced tree means the depth of the two subtrees of any node never differs by more than one."
    },
    {
      "content": "Consider how you can use the properties of a sorted array to build the BST. The middle element of the array can serve as the root of the BST, ensuring balance. This is because it divides the array into two halves."
    },
    {
      "content": "Think about how you can recursively apply the same logic to the left and right halves of the array. After choosing the middle element as the root, the left half will form the left subtree and the right half will form the right subtree."
    },
    {
      "content": "When implementing the recursive function, remember to define the base case. What should happen when the input array (or subarray) is empty? You might want to return null in that case."
    },
    {
      "content": "Consider the indices of the array that you will pass to the recursive function. You will need to keep track of the start and end indices of the current subarray you're working with."
    },
    {
      "content": "When selecting the middle element, use integer division to find the index. For an array with indices from `start` to `end`, the middle index can be calculated as `(start + end) / 2`."
    },
    {
      "content": "As you build the tree, ensure that each node is created correctly. You will need to create a new node for each middle element and recursively assign its left and right children."
    },
    {
      "content": "Keep in mind the constraints of the problem, especially with the input size. The maximum length of the array is 10,000, so your solution should be efficient, ideally O(n) time complexity."
    },
    {
      "content": "Consider edge cases, such as when the input array has only one element or when it is empty. Your function should handle these gracefully and return the correct tree structure."
    },
    {
      "content": "Finally, think about how you will return the result. You might need to define a specific class for the tree nodes and ensure you return the root of the constructed BST at the end of your function."
    }
  ],
  "questionNotes": [
    "The input array is sorted in strictly increasing order.",
    "The output should be a height-balanced binary search tree.",
    "You need to return the root of the tree, which may require defining a TreeNode class.",
    "Constraints: 1 <= nums.length <= 10^4 and -10^4 <= nums[i] <= 10^4."
  ]
}