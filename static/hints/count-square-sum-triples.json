{
  "hints": [
    {
      "content": "Start by understanding the equation for square triples: a² + b² = c². This means that for any valid triple (a, b, c), the sum of the squares of a and b must equal the square of c."
    },
    {
      "content": "Remember that a, b, and c must all be integers within the range of 1 to n. This means you should iterate through possible values for a and b, and then calculate c based on those values."
    },
    {
      "content": "Since the equation is symmetric in a and b, you can reduce the number of combinations you need to check by only considering a ≤ b. This will help avoid counting duplicates."
    },
    {
      "content": "To find c, you can rearrange the equation: c = sqrt(a² + b²). Make sure to check if c is an integer and falls within the range of 1 to n."
    },
    {
      "content": "When checking if c is an integer, you can use the property that if c² is a perfect square, then c is an integer. You can check this by comparing c with the integer value of sqrt(a² + b²)."
    },
    {
      "content": "Consider the maximum value for a and b. Since both a and b must be at least 1, you can start your loops from 1 and go up to n."
    },
    {
      "content": "Keep track of the count of valid triples you find. Each time you find a valid (a, b, c), increment your count. Don't forget to account for the symmetry in a and b when counting."
    },
    {
      "content": "Think about edge cases, such as the smallest values for n. For n = 1, there should be no valid triples, while for n = 2 or 3, you should verify manually what valid triples exist."
    },
    {
      "content": "Once you have your loops set up, ensure that your conditions for counting are clear: only count when both a and b are valid and c is also valid and within the range."
    },
    {
      "content": "Your final implementation should return the total count of unique square triples found. Make sure to test your code with different values of n to ensure it works for all cases."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= n <= 250",
    "a, b, c must be integers within the range of 1 to n.",
    "Count each unique (a, b, c) where a ≤ b to avoid duplicates.",
    "Check if c is an integer by verifying if c² is a perfect square."
  ]
}