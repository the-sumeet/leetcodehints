{
  "hints": [
    {
      "content": "Start by understanding what it means for a word to match the pattern. A word matches if you can create a one-to-one mapping of characters from the pattern to characters in the word."
    },
    {
      "content": "Consider how you can represent the mapping of characters. You might want to use a data structure like a dictionary or a list to keep track of which character in the pattern corresponds to which character in the word."
    },
    {
      "content": "Remember that the mapping must be bijective. This means that if character 'a' in the pattern maps to 'm' in the word, then no other character in the pattern can map to 'm'."
    },
    {
      "content": "Think about how you can check for existing mappings while iterating through the characters of the pattern and the word. You will need to ensure that both the pattern and the word maintain a consistent mapping throughout their lengths."
    },
    {
      "content": "You might want to create a helper function that checks if a single word matches the pattern. This function should return true or false based on whether the word can be formed by the pattern's character mappings."
    },
    {
      "content": "Consider edge cases, such as when the pattern or words contain repeated characters. How will your mapping handle these cases? Ensure that your mapping accounts for uniqueness."
    },
    {
      "content": "As you implement your matching function, remember to handle both the pattern and the word simultaneously. Use loops to iterate through each character in both strings."
    },
    {
      "content": "You can use two dictionaries: one for mapping characters from the pattern to the word, and another for the reverse mapping. This will help you maintain the bijection property."
    },
    {
      "content": "Once you have your matching function, iterate through the list of words and apply this function to each word. Collect all the words that return true from your matching function."
    },
    {
      "content": "Finally, ensure your function returns the results in the specified format. You can return the list of matching words directly after collecting them."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= pattern.length <= 20",
    "Constraints: 1 <= words.length <= 50",
    "words[i].length == pattern.length",
    "Both pattern and words[i] consist of lowercase English letters.",
    "Return the answer in any order."
  ]
}