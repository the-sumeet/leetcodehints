{
  "hints": [
    {
      "content": "Start by understanding the properties of a binary search tree (BST). In a BST, for any given node, values in the left subtree are less than the node's value, and values in the right subtree are greater."
    },
    {
      "content": "Consider how many unique BSTs can be formed with a single node. What does this tell you about the base case of your recursive function?"
    },
    {
      "content": "Think about how you can use recursion to build the trees. If you choose a root node, how will you determine the values for the left and right subtrees?"
    },
    {
      "content": "You can use a loop to select each number from 1 to n as the root. For each root, recursively generate all possible left and right subtrees using the remaining numbers."
    },
    {
      "content": "Remember to handle the trees' structure correctly. When you generate left and right subtrees, make sure to connect them to the chosen root node properly."
    },
    {
      "content": "Consider using a helper function that takes a range of numbers to generate the trees. This function can take two parameters: the start and end of the range of values."
    },
    {
      "content": "When generating trees for a given range, ensure you create combinations of left and right subtrees for each root. For example, if the root is 'i', the left subtree will use values from 'start' to 'i-1', and the right subtree will use values from 'i+1' to 'end'."
    },
    {
      "content": "Think about how to represent the trees in your output. You could use nested lists or a specific tree node structure. Ensure that your output format matches the requirements."
    },
    {
      "content": "Consider edge cases, such as when n = 1. What should your function return in this case? How does this affect your recursive function?"
    },
    {
      "content": "Finally, implement the recursive function to combine the results of all left and right subtree combinations for each root. Make sure to return the final list of unique BSTs."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= n <= 8",
    "Return format: A list of lists representing the unique BSTs.",
    "Each BST must be structurally unique.",
    "Consider the base case when n = 1."
  ]
}