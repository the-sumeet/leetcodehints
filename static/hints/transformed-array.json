{
  "hints": [
    {
      "content": "Start by understanding how to access elements in a circular array. Remember that when you reach the end of the array, you can wrap around to the beginning using the modulo operator."
    },
    {
      "content": "Consider how to handle positive and negative values in the array. For positive values, you will move to the right, while for negative values, you will move to the left. Think about how you can compute the new index based on these values."
    },
    {
      "content": "For a positive number at index `i`, the new index can be calculated as `(i + nums[i]) % nums.length`. What happens if the result of this operation is negative or exceeds the array length?"
    },
    {
      "content": "When dealing with negative numbers, remember that moving left can be thought of as moving forward in the array but counting backwards. How would you adjust the formula for negative values?"
    },
    {
      "content": "Don't forget to handle the case when `nums[i]` is zero. In this case, the result should simply be zero. Make sure your logic accounts for this condition."
    },
    {
      "content": "As you implement the logic, consider edge cases, such as when `nums` contains all zeros or when it has maximum and minimum values. How will your solution handle these scenarios?"
    },
    {
      "content": "Think about initializing your result array. You will need to create a new array of the same size as `nums`. What will you fill it with initially?"
    },
    {
      "content": "You might want to iterate through each index of `nums` and apply your movement logic. Consider using a loop to go through the indices from `0` to `nums.length - 1`."
    },
    {
      "content": "As you compute the new indices, ensure that you are storing the results correctly in the `result` array. How will you assign the computed index to the correct position in `result`?"
    },
    {
      "content": "Finally, after you have filled the `result` array, remember to return it. What is the correct return statement you should use?"
    }
  ],
  "questionNotes": [
    "The array is circular, so use modulo for index calculations.",
    "Handle positive, negative, and zero values distinctly.",
    "Constraints: 1 <= nums.length <= 100, -100 <= nums[i] <= 100.",
    "Return the new array of indices, not the values from nums."
  ]
}