{
  "hints": [
    {
      "content": "Start by understanding the basic requirements: each child must receive at least one candy. This is your base case."
    },
    {
      "content": "Consider how the ratings affect the candy distribution. If a child has a higher rating than their neighbor, they should receive more candies than that neighbor."
    },
    {
      "content": "Think about the implications of the ratings being equal. If two children have the same rating, they should receive the same number of candies."
    },
    {
      "content": "You might want to visualize the problem. Draw a line of children with their ratings and think about how you would distribute candies based on their ratings."
    },
    {
      "content": "A two-pass algorithm can be useful here. In the first pass, you can ensure that children with higher ratings than their left neighbor receive more candies."
    },
    {
      "content": "In the second pass, check from right to left to ensure that children with higher ratings than their right neighbor also receive more candies."
    },
    {
      "content": "Make sure to initialize an array for candies where each child starts with one candy. This will help you meet the minimum requirement."
    },
    {
      "content": "When making your first pass from left to right, compare each child to their left neighbor. If the current child's rating is higher, increment their candy count."
    },
    {
      "content": "During the second pass from right to left, do the same comparison but with the right neighbor. Adjust the candy count accordingly."
    },
    {
      "content": "After both passes, sum up the candies in your candies array to get the total number of candies needed."
    },
    {
      "content": "Consider edge cases: What happens if there's only one child? Or if all children have the same rating?"
    },
    {
      "content": "Think about the time complexity of your solution. You should aim for O(n) time complexity since you are making two linear passes."
    },
    {
      "content": "Remember to handle large inputs efficiently. The constraints allow for up to 20,000 children, so avoid nested loops."
    },
    {
      "content": "As a final check, ensure that your solution respects the constraints provided in the problem statement, particularly the range of ratings."
    },
    {
      "content": "Now, try to implement the two-pass algorithm you have in mind. Start with initializing the candies array and then proceed with the passes."
    }
  ],
  "questionNotes": [
    "Each child must have at least one candy.",
    "Children with a higher rating get more candies than their neighbors.",
    "If ratings are equal, children receive the same number of candies.",
    "Constraints: 1 <= n <= 20,000; 0 <= ratings[i] <= 20,000."
  ]
}