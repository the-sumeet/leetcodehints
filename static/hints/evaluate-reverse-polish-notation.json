{
  "hints": [
    {
      "content": "Start by understanding what Reverse Polish Notation (RPN) is. In RPN, operators follow their operands. For example, '2 1 +' means '2 + 1'."
    },
    {
      "content": "Think about how you can use a stack to evaluate the expression. Push numbers onto the stack until you encounter an operator."
    },
    {
      "content": "When you encounter an operator, pop the required number of operands from the stack. For binary operators like +, -, *, and /, you'll need to pop two operands."
    },
    {
      "content": "After popping the operands, apply the operator and push the result back onto the stack. Remember to handle the order of operands correctly, especially for subtraction and division."
    },
    {
      "content": "Consider how you will handle integer division. In Python, for example, using '//' will give you floor division, but you need to ensure it truncates towards zero."
    },
    {
      "content": "Make sure to account for negative numbers in your calculations. For example, if you divide a negative number by a positive number, the result should still be negative."
    },
    {
      "content": "Think about edge cases, such as when the input contains only one number. What should your function return in that case?"
    },
    {
      "content": "Implement your stack operations carefully. Ensure that you check the size of the stack before popping to avoid errors."
    },
    {
      "content": "As you process the tokens, keep track of the final result. Once all tokens are processed, the result should be the only element left in the stack."
    },
    {
      "content": "Finally, ensure your function returns the result as an integer. You might want to add some print statements to debug the stack's state at various points."
    }
  ],
  "questionNotes": [
    "Valid operators are '+', '-', '*', and '/'.",
    "Operands can be integers in the range [-200, 200].",
    "The division truncates towards zero.",
    "Input represents a valid RPN expression.",
    "The result and intermediate calculations fit in a 32-bit integer."
  ]
}