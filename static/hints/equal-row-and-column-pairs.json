{
  "hints": [
    {
      "content": "Start by understanding the structure of the matrix. Each row and column can be thought of as a list of integers. How can you represent a row and a column for comparison?"
    },
    {
      "content": "Consider how you can iterate through the matrix. You will need to access both rows and columns. What nested loops might you use to achieve this?"
    },
    {
      "content": "Think about how to compare a row and a column. You can use a simple equality check, but how will you ensure that you are comparing the correct row with the correct column?"
    },
    {
      "content": "To efficiently compare rows and columns, consider using a data structure that allows for quick lookups. What about using a dictionary or a hash map to store the rows?"
    },
    {
      "content": "When storing rows in a dictionary, you can use the tuple representation of the row as the key. How will you construct this tuple from a list?"
    },
    {
      "content": "Once you have the rows stored in a dictionary, you can iterate through the columns. For each column, convert it to a tuple as well. How will you check if this column tuple exists in your dictionary?"
    },
    {
      "content": "Remember to count the occurrences of each row in your dictionary. If a row appears multiple times, how will this affect your count of equal pairs?"
    },
    {
      "content": "Consider edge cases such as when the matrix has only one row and one column. What should your function return in this scenario?"
    },
    {
      "content": "Don't forget about the constraints given in the problem. How does the size of the matrix (up to 200x200) affect your approach? Would a brute force solution be feasible?"
    },
    {
      "content": "Finally, make sure to return the total count of equal row and column pairs. How will you accumulate this count as you find matches?"
    }
  ],
  "questionNotes": [
    "Constraints: n == grid.length == grid[i].length",
    "1 <= n <= 200",
    "1 <= grid[i][j] <= 10^5",
    "Return the number of equal row and column pairs.",
    "Indexing is 0-based."
  ]
}