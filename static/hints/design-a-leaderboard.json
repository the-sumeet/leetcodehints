{
  "hints": [
    {
      "content": "Start by defining a class called `Leaderboard`. This class will hold the scores for each player. Consider using a dictionary to map player IDs to their scores."
    },
    {
      "content": "Implement the `addScore(playerId, score)` method. This method should add the score to the player's current score. Remember to check if the player already exists in your data structure."
    },
    {
      "content": "For the `top(K)` method, you need to return the sum of the top K scores. Think about how you can efficiently retrieve the top scores from your data structure."
    },
    {
      "content": "Consider using a list to store the scores and sorting it to get the top K scores. However, keep in mind that sorting can be costly, especially if you have many players."
    },
    {
      "content": "When implementing `reset(playerId)`, ensure that you set the player's score back to zero. Also, check how you will handle players who have never scored."
    },
    {
      "content": "Think about edge cases, such as when `top(K)` is called with K greater than the number of players. How will you handle this situation?"
    },
    {
      "content": "Remember that player IDs are unique, but scores can be tied. Decide how you will handle ties when calculating the top K scores."
    },
    {
      "content": "You might want to maintain a sorted list of scores or use a max-heap to efficiently retrieve the top K scores without sorting the entire list every time."
    },
    {
      "content": "Consider the performance implications of your chosen data structure. For example, using a dictionary for scores allows O(1) updates, but retrieving top scores might require additional work."
    },
    {
      "content": "Finally, think about how you will structure the output of the `top(K)` method. It should return a single integer representing the sum of the top K scores."
    }
  ],
  "questionNotes": [
    "Player IDs are unique integers.",
    "Scores can be added multiple times for the same player.",
    "The `top(K)` method should return the sum of the top K scores.",
    "If there are fewer than K players, return the sum of all scores.",
    "The `reset(playerId)` method sets the player's score to zero.",
    "Consider performance for large numbers of players and scores."
  ]
}