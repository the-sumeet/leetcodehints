{
  "hints": [
    {
      "content": "Start by understanding what a factorial is. The factorial of a non-negative integer n, denoted as n!, is the product of all positive integers less than or equal to n. For example, 5! = 5 × 4 × 3 × 2 × 1."
    },
    {
      "content": "Consider the base case for your factorial function. What should the function return when n is 0? Remember that 0! is defined to be 1."
    },
    {
      "content": "Think about how you can compute the factorial of n using a loop. You can initialize a variable to hold the result and then multiply it by each integer up to n."
    },
    {
      "content": "If you are using recursion, identify the recursive relation. How would you express n! in terms of (n-1)!? For example, n! = n × (n-1)!"
    },
    {
      "content": "Make sure to handle edge cases. What happens if the input is a negative number? How should your function respond in that case?"
    },
    {
      "content": "Consider the data type you will use to store the result. Factorials grow very quickly, so think about whether you need to use a larger data type to handle big numbers."
    },
    {
      "content": "If you're implementing an iterative solution, think about how to structure your loop. You will likely need a variable to keep track of the current product as you iterate."
    },
    {
      "content": "For a recursive solution, ensure you have a proper base case and a way to reduce the problem size with each recursive call. What will your function look like?"
    },
    {
      "content": "Test your function with various inputs, including edge cases like 0 and 1, as well as larger numbers like 5 or 10. What results do you expect?"
    },
    {
      "content": "Finally, think about the return format. Should your function return the factorial as an integer, or do you need to format it in a specific way? Make sure to check the requirements."
    }
  ],
  "questionNotes": [
    "Input is a non-negative integer.",
    "0! is defined to be 1.",
    "Factorials grow rapidly, consider data types carefully.",
    "Handle negative inputs appropriately."
  ]
}