{
  "hints": [
    {
      "content": "Start by defining the `ParkingSystem` class and its constructor. You need to store the number of available slots for each type of car (big, medium, small). Consider using three instance variables to hold these values."
    },
    {
      "content": "In the constructor, initialize the instance variables with the values provided as parameters. Make sure to correctly assign the values for big, medium, and small parking slots."
    },
    {
      "content": "Next, implement the `addCar` method. This method should take an integer `carType` as an argument, which indicates the type of car trying to park. Remember that `carType` can be 1, 2, or 3."
    },
    {
      "content": "Before parking the car, check if there is an available slot for the given `carType`. You can use simple conditional statements to determine this based on the instance variables you created."
    },
    {
      "content": "If a slot is available for the car type, decrement the corresponding instance variable to indicate that a slot has been occupied. If no slot is available, return `false`."
    },
    {
      "content": "Think about how to handle the return value of the `addCar` method. It should return `true` if the car was successfully parked and `false` otherwise. Make sure to test both scenarios."
    },
    {
      "content": "Consider edge cases when initializing the parking system. What happens if all slots are set to zero? Ensure that your `addCar` method handles this gracefully."
    },
    {
      "content": "Remember to validate the `carType` input in the `addCar` method. If an invalid type is provided (not 1, 2, or 3), you should decide how to handle it. Consider returning `false` for invalid types."
    },
    {
      "content": "When testing your implementation, create several scenarios with different numbers of cars trying to park. Ensure to cover cases where the parking lot is full, partially full, or empty."
    },
    {
      "content": "Finally, make sure to write test cases that include all possible car types trying to park in varying slot availability. This will help ensure that your logic for decrementing slots works correctly."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= big, medium, small <= 1000",
    "carType is 1 (big), 2 (medium), or 3 (small)",
    "At most 1000 calls will be made to addCar",
    "Return format for addCar: true if parked, false if not"
  ]
}