{
  "hints": [
    {
      "content": "Start by understanding what a Binary Search Tree (BST) is. Remember that in a BST, for any given node, all values in the left subtree are less than the node's value, and all values in the right subtree are greater."
    },
    {
      "content": "Consider how you can traverse the BST. A common method is to use in-order traversal, which gives you the elements in sorted order. This might help you visualize the split operation."
    },
    {
      "content": "Think about how you can identify the node that contains the value you want to split at. You can use a simple search function to find this node in the BST."
    },
    {
      "content": "Once you find the node with the split value, consider how you can separate the left and right subtrees. You might want to create two new trees: one for values less than the split value and another for values greater than or equal to it."
    },
    {
      "content": "Pay attention to edge cases. What happens if the split value is not present in the BST? How should you handle this situation while still returning two valid BSTs?"
    },
    {
      "content": "When splitting, remember to maintain the properties of the BST in the new trees. This means you need to ensure that all nodes in the left tree are less than the root of the right tree."
    },
    {
      "content": "Consider how to construct the new BSTs after the split. You may need to write a helper function to insert nodes into a new BST while maintaining the BST properties."
    },
    {
      "content": "Think about the return format. You need to return two trees. In many programming languages, you might return them as an array or a tuple of tree nodes, so plan your function signature accordingly."
    },
    {
      "content": "Remember that the input BST can be empty or contain only one node. Make sure your function handles these cases gracefully."
    },
    {
      "content": "Finally, implement the logic to connect the new trees back to their respective roots after the split. You can return them as a pair, ensuring that the left tree's root is less than the right tree's root."
    }
  ],
  "questionNotes": [
    "The input is a BST represented as an array, where the array elements are unique.",
    "The split value may or may not be present in the BST.",
    "Return format should be two separate BSTs, often represented as a tuple or an array.",
    "Ensure to handle edge cases like an empty tree or a tree with a single node."
  ]
}