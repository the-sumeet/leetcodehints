{
  "hints": [
    {
      "content": "Start by understanding the definition of a subarray. A subarray is a contiguous part of the array. For example, in the array [1, -1, -3, -2, 3], the subarrays of size 3 are [1, -1, -3], [-1, -3, -2], and [-3, -2, 3]."
    },
    {
      "content": "Focus on how to extract subarrays of size k from the given array. You can use a sliding window approach to efficiently move through the array and generate these subarrays."
    },
    {
      "content": "Remember to keep track of negative integers within each subarray. You will need to identify and sort these negative integers to find the x-th smallest one."
    },
    {
      "content": "Consider edge cases where there might be fewer negative integers than x in the subarray. In such cases, the beauty of that subarray should be 0."
    },
    {
      "content": "Think about how you can maintain a sorted list of negative integers as you slide your window. You might want to use a data structure that allows you to efficiently insert and remove elements, such as a balanced binary search tree or a sorted list."
    },
    {
      "content": "When calculating the beauty, ensure you handle the case where there are exactly x negative integers. You should return the x-th smallest negative integer correctly."
    },
    {
      "content": "You will need to return an array of results, where each entry corresponds to the beauty of the respective subarray. Make sure to initialize your result array correctly."
    },
    {
      "content": "Consider the constraints given in the problem, such as the size of the input array and the limits on k and x. This can help you optimize your solution."
    },
    {
      "content": "As you implement your solution, ensure that you are correctly indexing into the array and the result array. Off-by-one errors are common when dealing with subarrays."
    },
    {
      "content": "Finally, your approach should efficiently handle the maximum constraints. Aim for a time complexity that is better than O(n*k) to ensure your solution runs within the limits."
    }
  ],
  "questionNotes": [
    "Constraints: n == nums.length, 1 <= n <= 10^5, 1 <= k <= n, 1 <= x <= k, -50 <= nums[i] <= 50.",
    "Return an integer array of size n - k + 1.",
    "The beauty is the x-th smallest negative integer or 0 if there are fewer than x negative integers."
  ]
}