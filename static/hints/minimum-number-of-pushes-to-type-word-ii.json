{
  "hints": [
    {
      "content": "Start by counting the frequency of each letter in the given word. This will help you understand how many times each letter needs to be pushed. For example, for the word 'abcde', each letter appears once."
    },
    {
      "content": "Remember that you can remap the keys to minimize the total number of pushes. Think about how you can distribute the letters across the keys to reduce the number of times you push each key."
    },
    {
      "content": "Consider the maximum number of letters that can be mapped to each key. Since keys can be remapped, think about how to balance the letters across the available keys (2 to 9)."
    },
    {
      "content": "When mapping letters to keys, the goal is to minimize the total pushes. If a letter appears multiple times, it may be beneficial to assign it to a key that requires fewer pushes."
    },
    {
      "content": "If a letter appears 'n' times in the word and is assigned to a key that requires 'k' pushes, the total pushes contributed by that letter will be 'n * k'. Keep this in mind while assigning letters."
    },
    {
      "content": "Think about how to prioritize letters based on their frequency. You might want to assign the most frequent letters to the keys that require the least pushes."
    },
    {
      "content": "Consider edge cases, such as when all letters are unique versus when some letters are repeated many times. How would your mapping strategy change in these scenarios?"
    },
    {
      "content": "You can use a greedy approach to assign letters to keys. Start by sorting the letters based on their frequency and then assign them to keys from least to most pushes required."
    },
    {
      "content": "After assigning letters to keys, calculate the total pushes by iterating through the frequency of each letter and summing up the total pushes based on your mapping."
    },
    {
      "content": "Finally, ensure that your solution handles the constraints effectively. For instance, the maximum length of the word is 10^5, so your solution should be efficient to process large inputs."
    }
  ],
  "questionNotes": [
    "1 <= word.length <= 10^5",
    "The word consists of lowercase English letters.",
    "Each letter must be mapped to exactly one key.",
    "Keys can be remapped to any amount of letters, but not all keys need to be used."
  ]
}