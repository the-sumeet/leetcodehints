{
  "hints": [
    {
      "content": "Start by understanding what a permutation is. A permutation of a set is a rearrangement of its elements. For example, the permutations of [1, 2] are [1, 2] and [2, 1]."
    },
    {
      "content": "Consider how you can generate permutations recursively. You can fix one element and recursively generate permutations of the remaining elements. This is a common approach for permutation problems."
    },
    {
      "content": "Think about the base case for your recursion. When you have only one element left in your list, the only permutation is the list itself. This will help you stop the recursion."
    },
    {
      "content": "You need to keep track of which elements have been used in your current permutation. A common way to do this is by using a boolean array or a set."
    },
    {
      "content": "As you build your permutations, you can use a temporary list to hold the current permutation. When you reach the base case, add a copy of this list to your result."
    },
    {
      "content": "Remember to backtrack after exploring one branch of your recursion. This means you need to remove the last added element from your current permutation before trying the next element."
    },
    {
      "content": "Consider edge cases such as when the input array has only one element or when it contains the maximum number of elements (6). Ensure your solution handles these cases efficiently."
    },
    {
      "content": "Think about the time complexity of your approach. Generating all permutations of n elements has a factorial time complexity (O(n!)). Ensure your solution can handle the upper limit of n = 6."
    },
    {
      "content": "When constructing your final result, remember that the order of permutations does not matter. You can return them in any order, so focus on generating them correctly."
    },
    {
      "content": "To finalize your approach, you might want to write a recursive function that takes the current permutation and the list of numbers as parameters, and then call it to start generating permutations."
    }
  ],
  "questionNotes": [
    "1 <= nums.length <= 6",
    "-10 <= nums[i] <= 10",
    "All integers in nums are unique.",
    "Return format: a list of lists containing all permutations."
  ]
}