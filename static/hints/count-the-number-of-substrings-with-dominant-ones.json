{
  "hints": [
    {
      "content": "Start by understanding what it means for a substring to have dominant ones. A substring has dominant ones if the count of '1's is greater than or equal to the square of the count of '0's."
    },
    {
      "content": "Consider how to efficiently count the number of '0's and '1's in any given substring. You might want to use a sliding window or prefix sums to help with this."
    },
    {
      "content": "Think about how to iterate through all possible substrings. You can use two nested loops to generate all substrings, but be cautious about performance due to the constraints."
    },
    {
      "content": "When counting substrings, remember that the total number of substrings in a string of length n is n * (n + 1) / 2. This will help you understand the upper limit of your solution."
    },
    {
      "content": "As you check each substring, maintain a count of '0's and '1's. You can update these counts as you expand or contract your substring window."
    },
    {
      "content": "To check the dominant condition, you need to compare the count of '1's with the square of the count of '0's. Ensure that your comparison handles cases where the count of '0's is zero."
    },
    {
      "content": "Consider edge cases, such as strings that consist entirely of '0's or '1's. How would these cases affect your count of dominant substrings?"
    },
    {
      "content": "You may want to optimize your solution by avoiding recalculating counts for every substring. Think about how you can reuse counts as you expand or contract your window."
    },
    {
      "content": "As you implement your solution, keep track of the total count of dominant substrings found so far. You will need to return this count at the end."
    },
    {
      "content": "Finally, after implementing your logic, test your solution with various inputs, including edge cases, to ensure it behaves as expected and meets the performance requirements."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length <= 4 * 10^4",
    "s consists only of characters '0' and '1'.",
    "Return the number of substrings with dominant ones.",
    "A substring has dominant ones if count('1') >= count('0')^2."
  ]
}