{
  "hints": [
    {
      "content": "Start by understanding the structure of the matrix. Each row can have different lengths, but you will always be selecting the largest number from each row in every iteration."
    },
    {
      "content": "Remember that your score starts at 0. After each round of selecting the largest numbers, you need to add the highest of those selected numbers to your score."
    },
    {
      "content": "Think about how you can efficiently find the maximum number from each row. You might want to iterate through each row and keep track of the maximum value."
    },
    {
      "content": "Consider how you will remove the maximum number from each row after selecting it. You may need to adjust your data structure to facilitate this removal."
    },
    {
      "content": "When you are done with a round of selections, you will need to determine the highest number among the selected maximums. Keep track of this value for adding to your score."
    },
    {
      "content": "Pay attention to the case of ties. The problem states that it does not matter which number you choose in the event of a tie, so you can simplify your logic accordingly."
    },
    {
      "content": "You will need to repeat the process until the matrix is empty. Think about how you can check for the empty state of the matrix efficiently."
    },
    {
      "content": "Consider edge cases, such as when the matrix has only one row or one column. How would your logic handle these scenarios?"
    },
    {
      "content": "Make sure to account for the constraints given in the problem. The maximum size of the matrix is 300 rows and 500 columns, which means efficiency is important."
    },
    {
      "content": "To summarize your approach: Loop through the matrix, select the maximum from each row, determine the highest of those, add it to your score, and remove the selected numbers. Implement this in a way that handles the matrix becoming empty."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 300",
    "Constraints: 1 <= nums[i].length <= 500",
    "Values: 0 <= nums[i][j] <= 10^3",
    "Indexing: The matrix is 0-indexed.",
    "Tie-breaking: In case of a tie, any of the tied values can be chosen."
  ]
}