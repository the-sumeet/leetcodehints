{
  "hints": [
    {
      "content": "Start by understanding the concept of beauty for a string. The beauty is defined as the difference between the highest frequency and the lowest frequency of characters in that string."
    },
    {
      "content": "Consider how to generate all possible substrings of the given string. You can use two nested loops: the outer loop to fix the starting index and the inner loop to fix the ending index."
    },
    {
      "content": "When you extract a substring, think about how to count the frequency of each character efficiently. A frequency array (or dictionary) can help you keep track of character counts."
    },
    {
      "content": "Remember that the beauty of a substring is zero if a character appears only once (since the least frequent character's frequency would also be one). Make sure to handle these cases."
    },
    {
      "content": "As you calculate the beauty for each substring, consider using a sliding window approach to avoid recomputing frequencies from scratch for overlapping substrings."
    },
    {
      "content": "To optimize, you can maintain a frequency count as you expand or contract your substring. This way, you can update the counts instead of recalculating them entirely."
    },
    {
      "content": "Think about how to efficiently find the maximum and minimum frequencies from your frequency count. You might want to use a data structure that allows for quick retrieval of these values."
    },
    {
      "content": "Keep in mind the constraints: the string length can go up to 500. This means that a naive O(n^3) solution might be too slow. Aim for O(n^2) or better."
    },
    {
      "content": "Consider edge cases, such as strings with all identical characters or strings with all unique characters. How does the beauty calculation change in these scenarios?"
    },
    {
      "content": "Finally, ensure you are summing the beauty values of all substrings correctly. After calculating the beauty for each substring, add it to a total sum that you will return at the end."
    }
  ],
  "questionNotes": [
    "1 <= s.length <= 500",
    "s consists of only lowercase English letters.",
    "The beauty is the difference between the highest and lowest character frequencies.",
    "Return the sum of beauty for all substrings."
  ]
}