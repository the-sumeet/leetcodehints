{
  "hints": [
    {
      "content": "Start by understanding how negative bases work. In base -2, the place values are powers of -2, which means the digits can represent both positive and negative contributions to the overall value."
    },
    {
      "content": "Consider how you would convert a number to a positive base first. For example, converting to base 2 is straightforward, but with base -2, the process is slightly different because of the alternating signs."
    },
    {
      "content": "When converting to base -2, remember that you will need to handle both division and modulus operations carefully. The modulus operation will help you determine the current digit, while the division will help you reduce the number."
    },
    {
      "content": "Think about how the remainder behaves when dividing by -2. For example, if you have a positive number, the remainder when divided by -2 will be non-negative, but you might need to adjust the quotient accordingly."
    },
    {
      "content": "As you perform the division, keep track of the current digit. If the remainder is negative, you will need to adjust it to ensure that the digit is either 0 or 1, which are the only valid binary digits."
    },
    {
      "content": "Remember to continue the process until the number is reduced to zero. Each time you compute a digit, prepend it to your result string to build the final representation."
    },
    {
      "content": "Consider edge cases, such as when n is 0. The output should simply be '0', as this is a special case that does not follow the usual conversion process."
    },
    {
      "content": "After constructing your binary string, ensure that there are no leading zeros unless the string is exactly '0'. This is important for the output format."
    },
    {
      "content": "You might want to encapsulate your conversion logic in a loop or a recursive function. Think about how you can use a while loop to keep dividing the number until it reaches zero."
    },
    {
      "content": "Finally, piece everything together: use a loop to repeatedly divide n by -2, adjust the quotient and remainder as necessary, and build your binary string until n is fully converted."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= n <= 10^9",
    "Return format: A binary string representation without leading zeros unless the string is '0'."
  ]
}