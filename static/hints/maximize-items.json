{
  "hints": [
    {
      "content": "Start by understanding the structure of the inventory data. Each item has an `item_id`, `item_type`, `item_category`, and `square_footage`. Familiarize yourself with how to access these values in your code."
    },
    {
      "content": "Consider filtering the inventory based on the `item_type`. Since only 'prime_eligible' items can be maximized, think about how you can extract just those items from the list."
    },
    {
      "content": "Once you have the filtered list of 'prime_eligible' items, think about how you would sort these items. What criteria will you use to maximize the number of items? Consider sorting by `square_footage`."
    },
    {
      "content": "Remember that you may need to keep track of the total square footage as you select items. Define a variable to accumulate the square footage as you iterate through the sorted list."
    },
    {
      "content": "As you select items, consider what condition must be met to continue adding items. You want to maximize the count of items while keeping the total square footage within a certain limit."
    },
    {
      "content": "Think about how you can implement a loop to go through the sorted list of 'prime_eligible' items. You will need to check if adding the next item exceeds your allowed square footage."
    },
    {
      "content": "What should happen if adding an item exceeds the limit? You may need to break out of the loop or skip that item. Plan your loop's exit condition carefully."
    },
    {
      "content": "Consider edge cases, such as when there are no 'prime_eligible' items. How will your solution handle this scenario? Ensure that it returns a sensible output."
    },
    {
      "content": "Think about the return format of your solution. Should you return just the count of items, or do you need to return the items themselves? Clarify what the output should be."
    },
    {
      "content": "You may also want to keep track of the individual items you have selected. Create a list to store these items as you add them to your total."
    },
    {
      "content": "What if two items have the same `square_footage`? How will you handle tie-breaking? Consider whether the order of items matters in your selection process."
    },
    {
      "content": "As you finalize your approach, think about the time complexity of your solution. Sorting the items will take time, but how efficient can your selection process be?"
    },
    {
      "content": "Before implementing, sketch out your algorithm step-by-step. This will help you visualize the flow and ensure you havenâ€™t missed any important details."
    },
    {
      "content": "When implementing, make sure to test your solution with various cases, especially edge cases like an empty inventory or all items being 'not_prime'."
    },
    {
      "content": "Finally, ensure your code is clean and well-commented. This will help you communicate your thought process during the interview."
    }
  ],
  "questionNotes": [
    "You can only maximize 'prime_eligible' items.",
    "The goal is to maximize the count of items without exceeding a specified square footage limit.",
    "Pay attention to sorting criteria and tie-breaking rules.",
    "Return format may require either the count of items or the items themselves."
  ]
}