{
  "hints": [
    {
      "content": "Start by understanding how to identify the maximum length prefix of a single character in the string. You can use a loop to iterate through the string and count consecutive characters until you hit a different character."
    },
    {
      "content": "Remember that you can only count up to 9 consecutive characters for your prefix. Make sure to handle cases where there are more than 9 consecutive characters correctly by capping the count at 9."
    },
    {
      "content": "As you identify each prefix, think about how you will append the count and the character to your compressed string. You might want to use a temporary variable to build this part before adding it to your final result."
    },
    {
      "content": "Consider using a while loop to process the string until it is empty. Each time you find a prefix, you should remove it from the original string before continuing to find the next prefix."
    },
    {
      "content": "Make sure to handle edge cases, such as when the string consists of a single repeated character or when it has no repeated characters at all. How would your algorithm behave in these scenarios?"
    },
    {
      "content": "Think about how to manage the index while iterating through the string. You will need to keep track of where you are in the string as you compress it."
    },
    {
      "content": "When appending to your compressed string, format it as 'length + character'. For example, if your prefix is 'aaaa', you will append '4a' to your compressed string."
    },
    {
      "content": "As you build your compressed string, consider initializing it as an empty string at the start of your function. This will allow you to concatenate results easily as you find each prefix."
    },
    {
      "content": "After processing all characters in the string, ensure that you return the final compressed string. Double-check that it meets the specified return format."
    },
    {
      "content": "Your final implementation should efficiently handle the upper constraint of the input size. Think about the time complexity of your approach and how to optimize it if necessary."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= word.length <= 2 * 10^5",
    "The string consists only of lowercase English letters.",
    "You can only count up to 9 consecutive characters for each prefix."
  ]
}