{
  "hints": [
    {
      "content": "Start by understanding what a path in a binary tree is. A path consists of nodes connected by edges, and it can start and end at any node, not just the root."
    },
    {
      "content": "Think about how to traverse the binary tree. A common approach is to use Depth-First Search (DFS) to explore each node and its children."
    },
    {
      "content": "As you traverse the tree, consider the value of each node. You will need to calculate the sum of values along different paths."
    },
    {
      "content": "Remember that a path can include both left and right children of a node. This means you might need to consider paths that go through the parent node to both children."
    },
    {
      "content": "You will need to keep track of the maximum path sum found so far. Think about how you can update this value as you explore different paths."
    },
    {
      "content": "When calculating the path sum at a node, you should consider the maximum path sum that can be formed using either the left child or the right child, but not both."
    },
    {
      "content": "Make sure to handle negative values correctly. A path sum can still be maximized even if some node values are negative."
    },
    {
      "content": "Consider edge cases, such as when the binary tree has only one node. The maximum path sum in this case is simply the value of that node."
    },
    {
      "content": "Think about how to define a recursive function that returns the maximum path sum that can be obtained from a given node down to its children."
    },
    {
      "content": "As you return from the recursive calls, calculate the potential maximum path sum that includes the current node and possibly both children."
    },
    {
      "content": "You need to maintain a global variable to store the maximum path sum found during the traversal. This variable should be updated whenever a new maximum is found."
    },
    {
      "content": "When calculating the maximum path sum for a node, consider the scenario where the path goes through the node and both children, as well as paths that only go through one child."
    },
    {
      "content": "Remember to consider paths that only include one side of the tree (either left or right) when calculating the maximum path sum for each node."
    },
    {
      "content": "Ensure your function handles null nodes correctly. If a node is null, it should contribute a path sum of 0."
    },
    {
      "content": "The final return value should be the maximum path sum found during the entire traversal of the tree. Make sure to return this value from your main function."
    }
  ],
  "questionNotes": [
    "A path can start and end at any node, not just the root.",
    "The maximum path sum must be calculated for non-empty paths only.",
    "The number of nodes is in the range [1, 3 * 10^4].",
    "-1000 <= Node.val <= 1000."
  ]
}