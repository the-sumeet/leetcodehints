{
  "hints": [
    {
      "content": "Start by understanding what a subarray is. A subarray is a contiguous part of an array. For example, in the array [1, 2, 3], the subarrays include [1], [1, 2], [1, 2, 3], [2], [2, 3], and [3]."
    },
    {
      "content": "Focus on the conditions for a valid subarray in this problem. The first and last elements of the subarray must be equal to the maximum element in that subarray."
    },
    {
      "content": "Consider how you can identify the maximum element in a subarray. You might want to iterate through the subarray and keep track of the maximum value as you go."
    },
    {
      "content": "Think about how to generate all possible subarrays. You can use two nested loops: the outer loop to select the starting index and the inner loop to select the ending index."
    },
    {
      "content": "When calculating the maximum element of a subarray, remember that you only need to check the elements between the start and end indices. This will help you avoid unnecessary comparisons."
    },
    {
      "content": "Keep in mind that the maximum element can appear multiple times in the array. You need to ensure that the first and last elements of the subarray match this maximum value."
    },
    {
      "content": "To optimize your solution, consider how you can avoid recalculating the maximum for overlapping subarrays. You might store previously computed maximum values."
    },
    {
      "content": "As you iterate through potential subarrays, count how many of them meet the criteria. You can maintain a counter that increments whenever you find a valid subarray."
    },
    {
      "content": "Edge cases are important. For example, consider what happens when the input array has only one element. This should return 1 since the only subarray is the array itself."
    },
    {
      "content": "Think about how to handle arrays where all elements are the same. In this case, every subarray will be valid. You can derive a formula for counting these subarrays."
    },
    {
      "content": "Remember to check the constraints: the length of the array can be up to 100,000 and the values can be as large as 1 billion. This means your solution needs to be efficient."
    },
    {
      "content": "Consider using a sliding window technique or two pointers to help reduce the time complexity when finding valid subarrays."
    },
    {
      "content": "You might want to create a helper function to determine the maximum value of a subarray. This can help keep your code organized and readable."
    },
    {
      "content": "When counting valid subarrays, ensure that you only count those where the first and last elements are equal to the maximum. This is crucial for the correctness of your solution."
    },
    {
      "content": "As a final step, think about how you will return the count. The problem specifies that you need to return an integer representing the number of valid subarrays."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 10^5",
    "Constraints: 1 <= nums[i] <= 10^9",
    "First and last elements of the subarray must be equal to the maximum element in the subarray.",
    "The output should be a single integer representing the count of valid subarrays."
  ]
}