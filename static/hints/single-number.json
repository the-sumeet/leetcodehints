{
  "hints": [
    {
      "content": "Consider how the properties of numbers can help you identify the unique element. What happens when you combine numbers using bitwise operations?"
    },
    {
      "content": "Think about how you can use the XOR operation. Remember that `a ^ a = 0` and `a ^ 0 = a`. How might this property help you find the single number?"
    },
    {
      "content": "If you XOR all the numbers in the array together, what do you think the result will be? Can you explain why this works?"
    },
    {
      "content": "Make sure to iterate through the entire array. What kind of loop would you use to accomplish this? Consider using a simple for loop."
    },
    {
      "content": "As you implement the XOR operation, remember that you only need a single variable to keep track of the result. This will help you maintain constant space complexity."
    },
    {
      "content": "What will happen if you encounter the same number twice during your iteration? Can you describe how the XOR operation will handle this?"
    },
    {
      "content": "Consider edge cases, such as when the array has the minimum length. What should your function return if `nums` contains only one element?"
    },
    {
      "content": "Make sure to handle negative numbers correctly. The XOR operation should work the same way regardless of the sign of the integers."
    },
    {
      "content": "Once you've finished iterating through the array and applying the XOR operation, what will the final value represent? This is the number you need to return."
    },
    {
      "content": "Try implementing your solution step by step. Start by initializing a variable to hold the result, then loop through the array to apply the XOR operation. Finally, return the result."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 3 * 10^4",
    "Value range: -3 * 10^4 <= nums[i] <= 3 * 10^4",
    "Every element appears twice except for one unique element.",
    "You must achieve linear runtime complexity O(n) and use constant space O(1)."
  ]
}