{
  "hints": [
    {
      "content": "Start by understanding the structure of the input. You will be given a binary tree represented as an array. Each element corresponds to a node, and its children can be found using the indices: left child at index 2*i + 1 and right child at index 2*i + 2."
    },
    {
      "content": "Consider how to traverse the tree to calculate the sum and count of nodes in each subtree. Depth-first search (DFS) is a common approach for this type of problem. You can use recursion to explore each node and its children."
    },
    {
      "content": "As you traverse the tree, you need to compute two values for each subtree: the total sum of the nodes and the number of nodes in that subtree. This will help you calculate the average later."
    },
    {
      "content": "Remember that the average of a subtree is defined as the total sum of the subtree divided by the number of nodes in that subtree. Pay attention to how you handle integer division to avoid losing precision."
    },
    {
      "content": "Think about how to keep track of the maximum average found during your traversal. You might want to use a variable to store the maximum average and update it whenever you find a new average that is higher."
    },
    {
      "content": "Consider edge cases, such as when the tree is empty or has only one node. How will your function handle these scenarios? Ensure that your code can return a valid result in these situations."
    },
    {
      "content": "When calculating the average, be mindful of floating-point precision. You might want to cast your integers to floats before performing the division to ensure accurate results."
    },
    {
      "content": "As you implement your DFS, think about the base case for your recursion. When should you stop traversing? For example, if you reach a null node, you should return a sum of 0 and a count of 0."
    },
    {
      "content": "After calculating the sum and count for a subtree, compute the average and compare it to your current maximum average. If it's greater, update your maximum average variable."
    },
    {
      "content": "Finally, ensure that your function returns the maximum average found after the entire tree has been traversed. Consider returning this value as a float to match the expected output format."
    }
  ],
  "questionNotes": [
    "The input is a binary tree represented as an array.",
    "You must calculate the average for each subtree and find the maximum average.",
    "Edge cases include empty trees and trees with only one node.",
    "The output should be a float representing the maximum average.",
    "Pay attention to floating-point precision when calculating averages."
  ]
}