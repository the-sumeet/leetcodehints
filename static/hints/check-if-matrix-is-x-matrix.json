{
  "hints": [
    {
      "content": "Start by understanding the structure of the matrix. An X-Matrix is square, meaning it has the same number of rows and columns. This will help you navigate the indices correctly."
    },
    {
      "content": "Focus on the diagonals of the matrix. The main diagonal consists of elements where the row index equals the column index (i.e., grid[i][i]). The secondary diagonal consists of elements where the row index and column index sum to n-1 (i.e., grid[i][n-1-i])."
    },
    {
      "content": "Remember that all diagonal elements must be non-zero for the matrix to qualify as an X-Matrix. You can iterate through the indices of the matrix to check these conditions."
    },
    {
      "content": "While checking the diagonals, don't forget to ensure that all non-diagonal elements are zero. This means you should check every element in the matrix that isn't part of the diagonals."
    },
    {
      "content": "You can use nested loops to iterate through the matrix. The outer loop can go through each row, while the inner loop can go through each column. This will allow you to access every element."
    },
    {
      "content": "When checking each element, use a condition to determine if it's on a diagonal. If it is, check if it's non-zero. If it’s not on a diagonal, check if it’s zero."
    },
    {
      "content": "Consider edge cases where the matrix size is the minimum allowed (3x3). Ensure your logic holds true for these smaller matrices as well."
    },
    {
      "content": "Pay attention to the constraints. The values in the matrix range from 0 to 100,000. This means you should be careful with comparisons, especially since zero is a significant value in this problem."
    },
    {
      "content": "Think about how you will return the result. You need to return 'true' if the matrix is an X-Matrix and 'false' otherwise. Make sure your checks are comprehensive before you return."
    },
    {
      "content": "As a final step, implement your checks in a way that allows for early exits. If you find any element that violates the X-Matrix conditions, you can immediately return false."
    }
  ],
  "questionNotes": [
    "The matrix is square: n == grid.length == grid[i].length.",
    "Diagonals must have non-zero values.",
    "All non-diagonal elements must be zero.",
    "Constraints: 3 <= n <= 100 and 0 <= grid[i][j] <= 10^5."
  ]
}