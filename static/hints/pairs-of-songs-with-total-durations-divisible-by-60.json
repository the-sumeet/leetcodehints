{
  "hints": [
    {
      "content": "Start by understanding the problem statement clearly. You need to find pairs of songs such that the sum of their durations is divisible by 60. Remember, a pair consists of two distinct songs, so make sure you don't count the same song twice."
    },
    {
      "content": "Consider how you can determine if a sum is divisible by 60. You can use the modulo operator. Specifically, for two durations `a` and `b`, check if `(a + b) % 60 == 0`. Think about how you can use this property to find pairs."
    },
    {
      "content": "Instead of checking every possible pair, which would take O(n^2) time, think about reducing the problem's complexity. You can use the concept of remainders when dividing by 60. Each song's duration can be represented by its remainder when divided by 60."
    },
    {
      "content": "Create an array or a dictionary to count how many songs fall into each remainder category (0 to 59). This will help you quickly find how many songs can pair with a given song to form a valid pair."
    },
    {
      "content": "When you have the count of songs for each remainder, think about how to find pairs. For example, if you have a song with a remainder of `r`, what remainder would you need to pair it with to make the sum divisible by 60? Consider both cases: `r` and `60 - r`."
    },
    {
      "content": "Pay special attention to the case where the remainder is 0. Songs with a duration that gives a remainder of 0 can only pair with each other. Use the combination formula to calculate the number of ways to choose pairs from this group."
    },
    {
      "content": "Don't forget about the special case when the remainder is 30. Similar to the remainder 0 case, you can only pair songs with a remainder of 30 with each other. Make sure to handle this case correctly."
    },
    {
      "content": "As you iterate through the list of song durations, update your remainder counts and calculate valid pairs simultaneously. This way, you can achieve a more efficient solution rather than storing all pairs."
    },
    {
      "content": "Consider edge cases such as the smallest input size (1 song) and the maximum input size (60,000 songs). Think about how your solution will perform with these extremes and whether it handles them correctly."
    },
    {
      "content": "Finally, once you have your counts and logic in place, ensure your final count of pairs is returned correctly. Remember to return the total number of valid pairs found."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= time.length <= 60,000",
    "Each song duration is between 1 and 500 seconds.",
    "You need to find pairs (i, j) such that i < j.",
    "Ensure that the sum of durations is divisible by 60."
  ]
}