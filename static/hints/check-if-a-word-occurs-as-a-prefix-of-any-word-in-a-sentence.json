{
  "hints": [
    {
      "content": "Start by splitting the sentence into individual words. You can use a method like `split()` in Python to achieve this. For example, `words = sentence.split()` will give you a list of words."
    },
    {
      "content": "Remember that the problem requires you to check if `searchWord` is a prefix of any of the words in the sentence. A prefix is a substring that appears at the start of a string. Think about how you can check this condition."
    },
    {
      "content": "You can use the `startswith()` method in Python to check if a word starts with `searchWord`. For example, `word.startswith(searchWord)` will return `True` if `word` begins with `searchWord`."
    },
    {
      "content": "Since the output requires a 1-indexed position, you need to keep track of the index while iterating through the list of words. Remember to add 1 to the index when you find a match."
    },
    {
      "content": "Consider what you should do when you find a word that matches the prefix. You should return the index immediately instead of continuing to check the rest of the words."
    },
    {
      "content": "Think about what to return if no words match the prefix. You will need to return -1 in this case, so make sure to have a way to check if you found a match after checking all words."
    },
    {
      "content": "Make sure to handle edge cases, such as when the sentence is empty or when `searchWord` is longer than any word in the sentence. What should your function return in these scenarios?"
    },
    {
      "content": "When implementing your solution, consider using a loop to go through each word in the list. You can use `enumerate()` to get both the index and the word at the same time."
    },
    {
      "content": "As you iterate through the words, remember to check the length of `searchWord` against the length of each word to avoid unnecessary checks. If a word is shorter than `searchWord`, it can't be a prefix."
    },
    {
      "content": "Finally, your function should return the first index where a match is found, or -1 if no matches exist. Make sure your return statements are correctly placed to handle these cases."
    }
  ],
  "questionNotes": [
    "The sentence consists of lowercase English letters and spaces.",
    "searchWord consists of lowercase English letters.",
    "Return the index of the word in sentence (1-indexed).",
    "If no match is found, return -1.",
    "If searchWord is a prefix of multiple words, return the index of the first occurrence."
  ]
}