{
  "hints": [
    {
      "content": "Start by identifying the positions of the people in the array. This will help you understand where the empty seats are located. You can loop through the array and store the indices of the occupied seats."
    },
    {
      "content": "Consider the distances between the occupied seats. For any empty seat, the distance to the closest person will depend on the nearest occupied seat on either side. Think about how you can calculate these distances efficiently."
    },
    {
      "content": "When calculating the distance for an empty seat, remember that the distance is defined as the number of seats between Alex and the closest person. For example, if Alex sits in seat 2 and the closest person is in seat 0, the distance is 2."
    },
    {
      "content": "You might want to handle edge cases where the empty seats are at the beginning or the end of the row. In these cases, the distance to the closest person will only be from one side."
    },
    {
      "content": "To maximize the distance to the closest person, you should check each empty seat and calculate the minimum distance to the nearest occupied seat. Keep track of the maximum distance found during this process."
    },
    {
      "content": "Use two pointers or a single pass to find the closest person on the left and right for each empty seat. This can help you efficiently compute the distance without needing nested loops."
    },
    {
      "content": "Consider using a variable to keep track of the maximum distance found so far as you iterate through the empty seats. Update this variable whenever you find a greater distance."
    },
    {
      "content": "Make sure to account for cases where the empty seat is at the ends of the array. The distance to the closest person should be calculated differently for these seats."
    },
    {
      "content": "After calculating the distances for all empty seats, return the maximum distance. Ensure that your function handles the edge cases correctly and returns the expected output format."
    },
    {
      "content": "Finally, remember that your solution should run efficiently, ideally in linear time O(n), since the input size can be large (up to 20,000). Think about how to minimize the number of passes through the array."
    }
  ],
  "questionNotes": [
    "Constraints: 2 <= seats.length <= 20,000",
    "seats[i] is either 0 or 1.",
    "There is at least one empty seat and at least one occupied seat.",
    "Return the maximum distance as an integer."
  ]
}