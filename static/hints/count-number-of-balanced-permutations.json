{
  "hints": [
    {
      "content": "Start by understanding what a balanced permutation is. A permutation is balanced if the sum of digits at even indices equals the sum of digits at odd indices."
    },
    {
      "content": "Consider how you can generate all distinct permutations of the input string. You might want to use a data structure that can handle duplicates efficiently, such as a set."
    },
    {
      "content": "Think about how to calculate the sum of digits at even and odd indices for a given permutation. You can use a simple loop to iterate through the characters of the permutation."
    },
    {
      "content": "Remember that the input string can contain duplicate digits. This will affect the number of distinct permutations you can generate. How will you account for this?"
    },
    {
      "content": "You might want to use a factorial function to calculate the number of distinct permutations, especially considering the frequency of each digit."
    },
    {
      "content": "When calculating the number of permutations, remember to divide by the factorial of the counts of each digit to avoid overcounting."
    },
    {
      "content": "Consider edge cases where the input string has only two characters. What are the possible balanced permutations in such cases?"
    },
    {
      "content": "Think about the modulo operation. Since the result can be very large, how will you apply modulo 10^9 + 7 during your calculations?"
    },
    {
      "content": "As you generate permutations, keep track of how many of them are balanced. You can maintain a counter that increments whenever you find a balanced permutation."
    },
    {
      "content": "You may want to optimize your approach by breaking early when you know a permutation cannot be balanced. For instance, if the total sum of digits is odd, what can you conclude?"
    },
    {
      "content": "Consider using recursion or backtracking to generate permutations, especially if you want to avoid generating duplicates."
    },
    {
      "content": "You could also explore using a fixed-size array to count occurrences of each digit, which can simplify the generation of permutations."
    },
    {
      "content": "When checking if a permutation is balanced, ensure that you are correctly identifying even and odd indices. Remember that indexing starts at 0 in programming."
    },
    {
      "content": "Make sure to handle input strings that contain leading zeros properly. How would this affect the distinct permutations?"
    },
    {
      "content": "Before finalizing your solution, test it with edge cases, such as strings with all identical digits or strings with varying lengths."
    }
  ],
  "questionNotes": [
    "Constraints: 2 <= num.length <= 80",
    "num consists of digits '0' to '9' only.",
    "A permutation is a rearrangement of all characters of a string.",
    "Return the number of distinct balanced permutations modulo 10^9 + 7."
  ]
}