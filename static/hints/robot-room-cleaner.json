{
  "hints": [
    {
      "content": "Start by understanding the problem's requirements. The robot needs to clean a room represented as a 2D grid, where '1' indicates a cleanable space and '0' indicates an obstacle."
    },
    {
      "content": "Consider how the robot will navigate the grid. It can move in four directions: up, down, left, and right. Think about how you will represent these movements in your code."
    },
    {
      "content": "You will need to keep track of which cells have been cleaned. How will you store this information? A separate grid or a set of coordinates could work."
    },
    {
      "content": "Remember that the robot starts at a specific position. Make sure to account for this initial position in your implementation."
    },
    {
      "content": "Think about how to implement the robot's movement. You may want to use a depth-first search (DFS) or breadth-first search (BFS) approach to explore the grid."
    },
    {
      "content": "When the robot moves, it should mark the cell as cleaned. How will you update your cleaned cells data structure after each move?"
    },
    {
      "content": "Consider edge cases, such as when the robot starts in a corner of the grid or when there are no cleanable spaces around it."
    },
    {
      "content": "You might need to define a way to backtrack when the robot reaches a dead end. What conditions will trigger backtracking?"
    },
    {
      "content": "Think about how to handle the robot's boundaries. Ensure that your movement logic checks for grid limits to avoid out-of-bounds errors."
    },
    {
      "content": "How will you represent the robot's current direction? You could use an integer to represent each direction (0 for up, 1 for right, etc.)."
    },
    {
      "content": "Consider using a queue or stack to manage the robot's position and direction as it explores the grid. This will help in implementing the search algorithm."
    },
    {
      "content": "As you implement the cleaning logic, ensure that the robot does not revisit cells. This is crucial for efficiency and correctness."
    },
    {
      "content": "You may want to implement a function to check if a cell is valid for movement (i.e., within bounds and not an obstacle). This can simplify your movement logic."
    },
    {
      "content": "Once the robot has explored all reachable cells, ensure that your function returns the correct output format. What should the function return after cleaning?"
    },
    {
      "content": "Finally, review your implementation for any potential infinite loops or unvisited cells. Test your code with various grid configurations to ensure robustness."
    }
  ],
  "questionNotes": [
    "The grid is a 2D array where '1' represents cleanable space and '0' represents obstacles.",
    "The robot starts at a specific coordinate (row, col) provided as input.",
    "Ensure to handle edge cases such as starting positions near edges or corners of the grid.",
    "The function should return the total number of cells cleaned by the robot."
  ]
}