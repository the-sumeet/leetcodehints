{
  "hints": [
    {
      "content": "Start by defining the Robot class and initializing its position at (0, 0) facing 'East'. Remember to store the width and height of the grid as well."
    },
    {
      "content": "Consider using a list or an array to represent the possible directions: ['East', 'North', 'West', 'South']. This will help you easily manage the robot's direction changes."
    },
    {
      "content": "When implementing the `step` method, remember that the robot needs to check if the next position is out of bounds. If it is, you'll need to change the robot's direction."
    },
    {
      "content": "Think about how to handle the direction change. You might want to use modulo arithmetic to cycle through your direction list when the robot turns 90 degrees."
    },
    {
      "content": "As you move the robot, keep track of its current position using two variables, x and y. Update these variables based on the direction the robot is facing."
    },
    {
      "content": "Make sure to handle the case where the robot turns. If it can't move in the current direction, it should turn and attempt to move again. This may require a loop within the `step` method."
    },
    {
      "content": "Don't forget to implement the `getPos` method, which should return the current position as an array [x, y]. Ensure that you are returning the correct values from your position variables."
    },
    {
      "content": "In the `getDir` method, return the current direction as a string. You can use the same list of directions you created earlier to map the index to the corresponding direction name."
    },
    {
      "content": "Consider edge cases such as when the robot is at the corners of the grid or when it is facing a wall. Make sure your logic accounts for these scenarios to avoid infinite loops."
    },
    {
      "content": "Finally, review your code to ensure that all methods are correctly interacting. Test your implementation with various step counts and directions to confirm that the robot behaves as expected."
    }
  ],
  "questionNotes": [
    "The robot starts at (0, 0) and can only move within the bounds of the grid defined by width and height.",
    "The robot turns left (90 degrees counterclockwise) when it encounters a wall.",
    "The return format for getPos is an array of two integers [x, y].",
    "The getDir method should return a string representing the current direction: 'North', 'East', 'South', or 'West'.",
    "Constraints: 2 <= width, height <= 100; 1 <= num <= 10; total calls <= 10^4."
  ]
}