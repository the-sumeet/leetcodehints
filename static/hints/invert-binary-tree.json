{
  "hints": [
    {
      "content": "Start by understanding what it means to 'invert' a binary tree. Inverting a tree means swapping the left and right children of every node in the tree."
    },
    {
      "content": "Consider how you would traverse the tree. You can use either a depth-first search (DFS) or breadth-first search (BFS) approach to visit each node."
    },
    {
      "content": "If you're using recursion, think about how you would handle the base case. What should happen when you reach a leaf node or an empty tree?"
    },
    {
      "content": "When you visit a node, you will need to swap its left and right children. Make sure to do this before you recursively invert the subtrees."
    },
    {
      "content": "Remember to check for edge cases. What should your function return if the input tree is empty? How will you handle nodes that do not have both children?"
    },
    {
      "content": "Consider the structure of your tree. You might want to define a simple TreeNode class if itâ€™s not already provided, with properties for the value, left child, and right child."
    },
    {
      "content": "When implementing the inversion, think about the order of operations. You might want to first store the left child in a temporary variable before performing the swap."
    },
    {
      "content": "If you're using an iterative approach, consider using a queue or stack to keep track of nodes that need to be processed. This will help you manage which nodes to invert."
    },
    {
      "content": "After inverting the left and right children of a node, don't forget to call the function recursively on those children to ensure the entire tree is inverted."
    },
    {
      "content": "Finally, make sure your function returns the root of the inverted tree. This is crucial as the problem statement specifically asks for the root of the modified tree."
    }
  ],
  "questionNotes": [
    "The number of nodes in the tree is in the range [0, 100].",
    "Node values are between -100 and 100.",
    "The input tree may be empty, in which case the output should also be an empty tree.",
    "The output format should be a representation of the tree in level order."
  ]
}