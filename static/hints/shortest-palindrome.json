{
  "hints": [
    {
      "content": "Start by understanding what a palindrome is. A palindrome reads the same forwards and backwards, like 'racecar' or 'level'. Your goal is to make the given string a palindrome by adding characters only to the front."
    },
    {
      "content": "Consider the simplest cases first. What happens if the string is already a palindrome? For example, if `s = 'a'`, the shortest palindrome is just 'a'."
    },
    {
      "content": "Think about how you can check if a string is a palindrome. You can compare characters from the start and end of the string moving towards the center. If they all match, it's a palindrome."
    },
    {
      "content": "Identify the longest palindromic prefix of the string. This will help you determine how many characters you need to add in front to make the entire string a palindrome."
    },
    {
      "content": "To find the longest palindromic prefix, you can iterate through the string from the start and check for palindromic properties. Keep track of the maximum length of the palindrome found."
    },
    {
      "content": "Consider using a two-pointer technique to efficiently find the longest palindromic prefix. Start one pointer at the beginning and another at the end of the string."
    },
    {
      "content": "Remember to handle edge cases, such as an empty string. An empty string is already a palindrome, so the output should also be an empty string."
    },
    {
      "content": "Once you identify the longest palindromic prefix, you can determine the characters that need to be added. These characters are the non-palindromic suffix of the string, reversed."
    },
    {
      "content": "Think about how to construct the final palindrome. If `prefixLength` is the length of the longest palindromic prefix, the characters to add are `s[prefixLength:]` reversed."
    },
    {
      "content": "Consider the time complexity of your approach. A naive solution might take O(n^2) time, but you can aim for a more efficient solution, ideally O(n)."
    },
    {
      "content": "You might want to explore string manipulation functions or libraries that can help with reversing strings or checking for palindromes."
    },
    {
      "content": "If you're stuck, think about how you can use the KMP (Knuth-Morris-Pratt) algorithm to preprocess the string and find the longest palindromic prefix efficiently."
    },
    {
      "content": "As you build your solution, ensure that you are correctly handling the indices of the string when adding characters to the front. Off-by-one errors are common."
    },
    {
      "content": "Before finalizing your solution, test it with various inputs, including edge cases like single characters, two identical characters, and completely different characters."
    },
    {
      "content": "Finally, remember to format your output correctly. The result should be the shortest palindrome constructed from the original string by adding characters at the front."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= s.length <= 5 * 10^4",
    "s consists of lowercase English letters only.",
    "Return the shortest palindrome by adding characters only to the front."
  ]
}