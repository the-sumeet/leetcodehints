{
  "hints": [
    {
      "content": "Start by understanding the problem constraints. You have two arrays of equal length, and you can only drink one energy drink per hour. If you switch drinks, you lose the energy boost for that hour."
    },
    {
      "content": "Consider the base case where you only drink from one energy drink for the entire duration. What would the total energy boost be for each drink? This will help you establish a baseline for your calculations."
    },
    {
      "content": "Think about how you can keep track of the maximum energy boost for each hour. You might want to maintain two separate totals: one for continuing with the current drink and another for switching drinks."
    },
    {
      "content": "When switching drinks, remember that you lose the energy boost for that hour. How will you account for this loss in your calculations? You may want to create a temporary variable to handle this situation."
    },
    {
      "content": "Consider using dynamic programming to store the maximum energy boost at each hour. You can create an array where each index represents the maximum energy boost achievable up to that hour."
    },
    {
      "content": "Define two states for your dynamic programming approach: one for the current drink and one for the switched drink. This will help you manage the energy boosts effectively."
    },
    {
      "content": "Make sure to initialize your dynamic programming structure correctly. You might start with the first hour's energy boosts directly from the input arrays."
    },
    {
      "content": "As you iterate through the hours, update your dynamic programming states based on whether you continue with the same drink or switch to the other one, while considering the cleanse hour."
    },
    {
      "content": "Don't forget to handle edge cases, such as when the energy boosts are equal or when one drink consistently outperforms the other. How will these scenarios affect your total?"
    },
    {
      "content": "Finally, ensure that you return the maximum value from your dynamic programming structure after processing all hours. This will give you the optimal total energy boost you can achieve."
    }
  ],
  "questionNotes": [
    "Constraints: n == energyDrinkA.length == energyDrinkB.length",
    "3 <= n <= 10^5",
    "1 <= energyDrinkA[i], energyDrinkB[i] <= 10^5",
    "You can start with either drink.",
    "Switching drinks incurs a one-hour penalty where no energy is gained."
  ]
}