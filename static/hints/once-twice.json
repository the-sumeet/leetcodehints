{
  "hints": [
    {
      "content": "Start by understanding the problem. You need to identify which numbers appear exactly once in the given list. Think about how you would count occurrences of each number."
    },
    {
      "content": "Consider using a data structure that allows you to keep track of the count of each number. A dictionary or hash map could be useful here, where the keys are the numbers and the values are their counts."
    },
    {
      "content": "As you iterate through the list, update your count for each number. Remember to initialize your dictionary properly before counting."
    },
    {
      "content": "After counting, you'll need to filter the dictionary to find which numbers have a count of exactly one. This is an important step to focus on."
    },
    {
      "content": "Think about the order of the numbers in your output. Do you need to return them in the order they appeared in the input list, or can they be in any order?"
    },
    {
      "content": "Edge cases are important! Consider what happens if the input list is empty or if all numbers appear more than once. How should your function handle these cases?"
    },
    {
      "content": "When filtering the dictionary for numbers that appear once, you might want to create a new list to store these numbers. This will be your final output."
    },
    {
      "content": "Remember to consider the constraints of the problem. Are there limits on the size of the input list or the range of numbers? How will these affect your approach?"
    },
    {
      "content": "Before finalizing your solution, think about the time complexity of your approach. Is it efficient enough for larger inputs? A linear time solution would be ideal."
    },
    {
      "content": "Finally, put together your logic: iterate through the list to count occurrences, then filter for numbers with a count of one, and return that list. Make sure to test with the provided examples!"
    }
  ],
  "questionNotes": [
    "You need to find numbers that appear exactly once in the list.",
    "Consider using a hash map to count occurrences.",
    "Output should maintain the order of first appearance.",
    "Handle edge cases like empty lists or all duplicates.",
    "Aim for a linear time complexity solution."
  ]
}