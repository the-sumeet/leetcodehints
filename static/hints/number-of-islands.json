{
  "hints": [
    {
      "content": "Start by understanding the structure of the grid. Each cell can either be '1' (land) or '0' (water). Your goal is to count how many distinct groups of '1's are connected either horizontally or vertically."
    },
    {
      "content": "Think about how you can traverse the grid. You might want to use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the connected components of '1's."
    },
    {
      "content": "When you find a '1', you should mark it as visited to avoid counting it again. Consider how you will change the state of the grid or keep track of visited cells."
    },
    {
      "content": "Remember to check the boundaries of the grid when exploring adjacent cells. You should not go out of the grid's limits while checking for connected '1's."
    },
    {
      "content": "As you traverse the grid, maintain a counter to keep track of the number of islands. Increment this counter each time you start a new DFS/BFS from an unvisited '1'."
    },
    {
      "content": "Consider edge cases, such as when the grid is empty or when all cells are '0'. What should your function return in these scenarios?"
    },
    {
      "content": "Make sure to handle the input format correctly. The grid is a 2D array of strings, so you may need to convert '1's and '0's to integers if necessary for your logic."
    },
    {
      "content": "Think about how you can implement the DFS/BFS. You could use a stack for DFS or a queue for BFS. Both methods will help you explore all connected '1's efficiently."
    },
    {
      "content": "When implementing your search function, remember to check all four possible directions (up, down, left, right) from the current cell. You can use direction vectors for simplicity."
    },
    {
      "content": "Once you have explored all connected '1's, return the counter that represents the number of islands found. Ensure your function adheres to the expected return type (an integer)."
    }
  ],
  "questionNotes": [
    "Constraints: m == grid.length, n == grid[i].length, 1 <= m, n <= 300.",
    "Input format: grid is a 2D array of strings, where grid[i][j] is '0' or '1'.",
    "Assume all four edges of the grid are surrounded by water.",
    "An island is defined as a group of '1's connected horizontally or vertically."
  ]
}