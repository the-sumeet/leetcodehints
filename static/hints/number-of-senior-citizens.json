{
  "hints": [
    {
      "content": "Start by understanding the structure of each string in the `details` array. Each string has a fixed length of 15 characters, where specific sections represent different attributes of the passenger."
    },
    {
      "content": "Focus on extracting the age from each string. The age is represented by the 12th and 13th characters (indices 11 and 12). You will need to convert these characters into an integer to compare them with 60."
    },
    {
      "content": "Remember that the age is represented as a two-digit number. This means that the characters at indices 11 and 12 can be combined to form a number between 00 and 99."
    },
    {
      "content": "As you iterate through the `details` array, consider using a counter to keep track of how many passengers are older than 60. Initialize this counter to zero before starting your loop."
    },
    {
      "content": "Make sure to check each age strictly against 60. You should only increment your counter if the age is greater than 60, not equal to it."
    },
    {
      "content": "When converting the age characters to an integer, you can use a method like `int(details[i][11:13])` to easily extract and convert the substring to an integer."
    },
    {
      "content": "Consider edge cases such as the minimum and maximum values for age. The problem states that ages are represented as two characters, so ensure your logic handles all possible two-digit combinations correctly."
    },
    {
      "content": "After processing all passengers, remember to return the final count of senior citizens. This should be the value of your counter after the loop completes."
    },
    {
      "content": "Don't forget to handle the constraints mentioned in the problem. For instance, the length of the `details` array can be between 1 and 100, and each string is guaranteed to be 15 characters long."
    },
    {
      "content": "Finally, ensure that your solution is efficient enough to handle the upper limits of the constraints. A single loop through the `details` array should suffice, resulting in a time complexity of O(n)."
    }
  ],
  "questionNotes": [
    "Each string in `details` is exactly 15 characters long.",
    "The age is found at indices 11 and 12 (12th and 13th characters).",
    "You need to count passengers who are strictly older than 60.",
    "The array length can range from 1 to 100.",
    "Each passenger's phone number and seat number are unique."
  ]
}