{
  "hints": [
    {
      "content": "Start by understanding how the strings can be visualized as columns in a grid. Each character in the strings represents a cell in the grid. For example, the first character of each string forms the first column."
    },
    {
      "content": "Consider how you can iterate through the columns of the grid. You can use a loop to check each column one by one. Remember that the number of columns is equal to the length of the strings."
    },
    {
      "content": "For each column, you need to compare the characters in that column from the top string to the bottom string. If any character in the column is greater than the one below it, that column is not sorted."
    },
    {
      "content": "Think about how you can keep track of the number of unsorted columns. You can initialize a counter to zero and increment it whenever you find a column that is not sorted."
    },
    {
      "content": "When checking if a column is sorted, you can use a nested loop: the outer loop for the columns and the inner loop for the rows. This way, you can compare each character in the current column."
    },
    {
      "content": "Consider edge cases, such as when there is only one string in the input array. In this case, there will be no columns to delete since a single column is always sorted."
    },
    {
      "content": "Remember that the strings are guaranteed to be of the same length. This simplifies your logic since you wonâ€™t have to handle varying lengths when checking columns."
    },
    {
      "content": "You might want to use a boolean flag to indicate whether a column is sorted or not as you iterate through the characters. Reset this flag for each column before you start checking."
    },
    {
      "content": "As you check each column, you can break out of the inner loop early if you find that the column is not sorted. This can save some unnecessary comparisons."
    },
    {
      "content": "Finally, after iterating through all columns, return the count of unsorted columns. Make sure to test your solution with different inputs to cover edge cases."
    }
  ],
  "questionNotes": [
    "Constraints: n == strs.length, 1 <= n <= 100, 1 <= strs[i].length <= 1000.",
    "All strings consist of lowercase English letters.",
    "Return the number of columns that need to be deleted."
  ]
}