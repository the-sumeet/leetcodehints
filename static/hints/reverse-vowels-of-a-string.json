{
  "hints": [
    {
      "content": "Start by identifying what the vowels are in the string. Remember, the vowels are 'a', 'e', 'i', 'o', 'u' in both lowercase and uppercase. You can create a set to store these characters for quick lookup."
    },
    {
      "content": "Consider how you will iterate through the string. You might want to use two pointers: one starting from the beginning of the string and the other from the end. This will help you reverse the vowels efficiently."
    },
    {
      "content": "As you iterate with the two pointers, check if the characters at both pointers are vowels. If both are vowels, you will need to swap them."
    },
    {
      "content": "Make sure to handle the case where one pointer is at a vowel and the other is not. In such cases, you should move the pointer that is not at a vowel closer to the center of the string."
    },
    {
      "content": "Think about how you will store the result. Since strings are immutable in most programming languages, you might want to convert the string to a list of characters for easier manipulation."
    },
    {
      "content": "Don't forget to check for edge cases, such as a string with no vowels or a string that is entirely made up of vowels. How will your solution handle these scenarios?"
    },
    {
      "content": "Once you have swapped the vowels, you will need to convert your list of characters back into a string. Make sure to return the modified string as the final output."
    },
    {
      "content": "Consider the time complexity of your approach. Since you are iterating through the string potentially twice (once for each pointer), think about how this impacts performance, especially with the maximum constraint of string length."
    },
    {
      "content": "Before finalizing your solution, test it with a variety of inputs, including mixed case, no vowels, and all vowels. This will help ensure your implementation is robust."
    },
    {
      "content": "Your final implementation should look something like this: initialize two pointers, use a loop to check for vowels, swap them when found, and finally return the modified string. Remember to handle the pointers carefully to avoid skipping characters."
    }
  ],
  "questionNotes": [
    "Vowels are 'a', 'e', 'i', 'o', 'u' (case insensitive).",
    "The string length can be up to 300,000 characters.",
    "Ensure to handle strings with no vowels or all vowels correctly.",
    "Return the modified string after reversing the vowels."
  ]
}