{
  "hints": [
    {
      "content": "Start by understanding the structure of the transactions. Each transaction has a unique ID, a customer ID, a date, and an amount. You will need to group transactions by customer ID to analyze their transaction history."
    },
    {
      "content": "Consider how to iterate through the transactions for each customer. You might want to sort the transactions by date to ensure you are processing them in chronological order."
    },
    {
      "content": "As you process each customer's transactions, think about how to keep track of the previous transaction's amount. This will help you determine if the current transaction amount is greater than the previous one."
    },
    {
      "content": "Use a loop to go through each transaction for a customer. You can initialize a counter to track how many consecutive transactions have increasing amounts."
    },
    {
      "content": "Remember to reset your counter whenever you encounter a transaction that does not have an increasing amount compared to the previous one. This is crucial for accurately counting sequences."
    },
    {
      "content": "Consider edge cases such as customers with only one transaction or customers with transactions that do not increase at all. How will your logic handle these scenarios?"
    },
    {
      "content": "Think about how to store the results of your findings. You could use a list to keep track of the maximum count of consecutive increasing transactions for each customer."
    },
    {
      "content": "When you find a sequence of increasing transactions, make sure to compare it with the maximum count you have recorded for that customer. Update it if the current count is greater."
    },
    {
      "content": "As you implement your solution, keep an eye on performance. If you have many transactions, ensure that your approach is efficient enough to handle larger datasets."
    },
    {
      "content": "Consider how you will return the results. Will you return a list of customers with their maximum counts, or do you need to format it differently?"
    },
    {
      "content": "If two customers have the same maximum count of consecutive transactions, decide how you will handle this. Will you return all customers with that count, or just one?"
    },
    {
      "content": "Make sure to test your solution with various scenarios, including edge cases. For example, what happens if all transactions for a customer are the same amount?"
    },
    {
      "content": "Think about how you can optimize your solution further. Are there any unnecessary calculations or data structures that can be simplified?"
    },
    {
      "content": "As you finalize your solution, double-check that you are correctly handling the date format. Ensure that your sorting is based on actual date values, not string comparisons."
    },
    {
      "content": "Before concluding, ensure that your solution accounts for any potential duplicates in transaction IDs or other fields, even if they are not explicitly mentioned in the problem."
    }
  ],
  "questionNotes": [
    "Transactions are grouped by customer_id.",
    "Transactions must be sorted by transaction_date for accurate processing.",
    "You need to count consecutive transactions with strictly increasing amounts.",
    "Handle edge cases like single transactions or non-increasing sequences.",
    "Decide how to format the output and handle tie-breaking for maximum counts."
  ]
}