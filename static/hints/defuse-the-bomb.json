{
  "hints": [
    {
      "content": "Start by understanding the problem requirements. You need to replace each element in the circular array based on the value of k. Remember that the replacement depends on whether k is positive, negative, or zero."
    },
    {
      "content": "For k == 0, the output is straightforward. What happens to each element when k is 0? Think about how you would handle this case in your code."
    },
    {
      "content": "When k > 0, you need to sum the next k elements for each position in the array. Make sure to account for the circular nature of the array when accessing elements beyond the last index."
    },
    {
      "content": "If k < 0, you will sum the previous k elements. Again, consider how to wrap around to the end of the array when summing elements before the first index."
    },
    {
      "content": "You can use a loop to iterate through the array. For each index i, you'll need to calculate the sum based on the value of k. How will you determine which indices to sum?"
    },
    {
      "content": "Think about how to handle the circular indexing. You can use the modulo operator to wrap around the indices when accessing elements. For example, (i + j) % n can be useful."
    },
    {
      "content": "Consider initializing a new array to store the results. As you calculate the new values, make sure to store them in the correct position in this new array."
    },
    {
      "content": "Before implementing the full solution, write down the logic for calculating the sum for a single index based on k. How would you do this in pseudocode?"
    },
    {
      "content": "Make sure to test your implementation with edge cases, such as when k is equal to -n + 1 or n - 1. These cases will help ensure your circular logic is robust."
    },
    {
      "content": "Finally, once you have the sums calculated, remember to return the new array as your result. How will you format the return statement?"
    }
  ],
  "questionNotes": [
    "Constraints: n == code.length, 1 <= n <= 100, 1 <= code[i] <= 100",
    "k can range from -(n - 1) to (n - 1).",
    "The output should be an array of the same length as the input.",
    "When k == 0, all elements in the output should be 0."
  ]
}