{
  "hints": [
    {
      "content": "Start by understanding what defines a hill and a valley in the context of the array. A hill is when an element is greater than its closest non-equal neighbors, while a valley is when it is smaller. Make sure to keep this definition in mind as you analyze the array."
    },
    {
      "content": "Consider how to identify the closest non-equal neighbors for each index. You will need to traverse the array both left and right from the current index until you find a non-equal value. Think about how you can efficiently implement this search."
    },
    {
      "content": "Remember that you need to check both sides of an index to determine if it is a hill or a valley. If either side does not have a non-equal neighbor, that index cannot be classified as a hill or valley."
    },
    {
      "content": "As you traverse the array, keep track of the last non-equal neighbor found on both sides. You might want to use a loop to go left and another loop to go right from the current index to find these neighbors."
    },
    {
      "content": "When counting hills and valleys, ensure that you do not count adjacent indices that are part of the same hill or valley. You can keep a flag or a marker to indicate when you have already counted a hill or valley."
    },
    {
      "content": "Consider edge cases where the array has repeated elements. For example, if the entire array consists of the same number, there can be no hills or valleys. Think about how your logic would handle such cases."
    },
    {
      "content": "Pay attention to the constraints given in the problem. The length of the array is guaranteed to be at least 3, which means you will always have enough elements to check for hills and valleys."
    },
    {
      "content": "When implementing your solution, think about how you will return the final count of hills and valleys. You can initialize a counter at the beginning and increment it whenever you identify a new hill or valley."
    },
    {
      "content": "Make sure to test your solution with various inputs, including edge cases like arrays with all equal elements, strictly increasing or decreasing sequences, and arrays with alternating high and low values."
    },
    {
      "content": "You are almost there! After identifying the closest non-equal neighbors and determining if an index is part of a hill or valley, remember to check for adjacent indices that share the same value to avoid double counting."
    }
  ],
  "questionNotes": [
    "Constraints: 3 <= nums.length <= 100",
    "Values: 1 <= nums[i] <= 100",
    "Indexing: 0-indexed array",
    "Uniqueness: Must have non-equal neighbors on both sides to classify as hill/valley",
    "Return format: Return the total count of hills and valleys."
  ]
}