{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a dictionary containing headers and rows, where 'rows' contains a list of team statistics. Familiarize yourself with how to access these values in your preferred programming language."
    },
    {
      "content": "Focus on the individual statistics of each team. You will need to extract the number of wins, draws, and losses to calculate the points for each team. Remember that the formula for points is: `points = wins * 3 + draws * 1`."
    },
    {
      "content": "Consider how to represent the teams and their points. A list of tuples or a dictionary might be useful to keep track of each team's name and their calculated points together."
    },
    {
      "content": "Once you have calculated the points for each team, think about how to sort the teams. You will need to sort primarily by points, and in case of ties, you should sort by wins. This will ensure that teams with the same points are ranked correctly."
    },
    {
      "content": "Ensure that your sorting function is set up to handle tuples or dictionaries correctly. In Python, for example, you can use the `sorted()` function with a custom key to sort by multiple criteria."
    },
    {
      "content": "Take care of edge cases where teams might have the same number of wins and points. You should also consider the possibility of teams not having played any matches and how that affects their ranking."
    },
    {
      "content": "As you implement your sorting logic, test it with a few different datasets to ensure it behaves as expected. Check how it handles ties and whether it maintains the correct order."
    },
    {
      "content": "Remember to format the output correctly. You might need to return a list of team names in the order of their ranking. Make sure to follow any specific output format required by the problem statement."
    },
    {
      "content": "Before finalizing your solution, review the constraints provided in the problem. For instance, check if there are any limits on the number of teams or the values of matches played, wins, draws, and losses."
    },
    {
      "content": "Finally, implement your function to return the sorted list of team names based on the calculated points and sorting criteria. Ensure you handle all edge cases appropriately and test thoroughly."
    }
  ],
  "questionNotes": [
    "Input is a dictionary with 'headers' and 'rows'.",
    "Each team has statistics: team_id, team_name, matches_played, wins, draws, losses.",
    "Points are calculated as: points = wins * 3 + draws * 1.",
    "Sorting should be by points first, then by wins in case of ties.",
    "Consider edge cases like teams with no matches played."
  ]
}