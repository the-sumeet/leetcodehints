{
  "hints": [
    {
      "content": "Start by identifying the structure of the grid. Remember that the grid is a 2D matrix where each cell can either be a land cell (0) or a water cell with a certain number of fish (greater than 0)."
    },
    {
      "content": "Think about how you can traverse the grid. You might want to consider using Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the water cells and collect fish."
    },
    {
      "content": "When moving from one cell to another, ensure you only move to adjacent water cells. This means checking the four possible directions: up, down, left, and right."
    },
    {
      "content": "Consider how to keep track of the total number of fish collected during your traversal. You can maintain a running sum as you visit each water cell."
    },
    {
      "content": "Make sure to handle the case where there are no water cells in the grid. The function should return 0 in this scenario."
    },
    {
      "content": "As you explore each water cell, you should mark it as visited to avoid counting the same cell multiple times. Think about how you can implement this marking."
    },
    {
      "content": "When starting from a water cell, you will want to explore all reachable water cells. Consider how you can initiate a search from each water cell in the grid."
    },
    {
      "content": "After exploring all reachable cells from a starting point, compare the total fish caught with the maximum fish caught so far. Keep updating the maximum accordingly."
    },
    {
      "content": "Don't forget to reset your visited cells after each complete search. This way, you can start fresh from another water cell without interference."
    },
    {
      "content": "Finally, ensure that your function returns the maximum number of fish collected from any starting water cell. This involves returning the maximum value after all searches are completed."
    }
  ],
  "questionNotes": [
    "Constraints: m == grid.length, n == grid[i].length, 1 <= m, n <= 10",
    "Each cell can contain between 0 and 10 fish.",
    "The function should return 0 if no water cells exist.",
    "Consider edge cases with grids that have no water cells or are entirely filled with water."
  ]
}