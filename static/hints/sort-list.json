{
  "hints": [
    {
      "content": "Start by understanding the structure of a linked list. Each node has a value and a pointer to the next node. Make sure you can traverse the list and access each node's value."
    },
    {
      "content": "Consider the constraints of the problem. You need to sort the linked list in O(n log n) time complexity. Think about sorting algorithms that can achieve this, such as Merge Sort."
    },
    {
      "content": "Remember that linked lists do not allow random access like arrays. This means you cannot directly access the middle element without traversing the list. How can you find the middle node efficiently?"
    },
    {
      "content": "To implement Merge Sort on a linked list, you will need to split the list into two halves. You can use the slow and fast pointer technique to find the middle node for splitting."
    },
    {
      "content": "Once you have split the list into two halves, think about how to recursively sort each half. After sorting the two halves, you will need to merge them back together in sorted order."
    },
    {
      "content": "When merging two sorted linked lists, you can use a dummy node to simplify the merging process. This dummy node will help you build the new sorted list easily."
    },
    {
      "content": "Consider edge cases such as an empty list or a list with only one node. How will your solution handle these cases?"
    },
    {
      "content": "You need to ensure that your sorting algorithm uses O(1) additional space. This means you cannot use arrays or other data structures that grow with input size. Think about how you can manipulate pointers instead."
    },
    {
      "content": "As you implement the merge function, remember to handle cases where one of the lists may become empty before the other. You will need to append the remaining elements of the non-empty list."
    },
    {
      "content": "Finally, ensure that your function returns the head of the newly sorted linked list. You may want to keep track of the head of the merged list as you build it."
    }
  ],
  "questionNotes": [
    "The number of nodes in the list is in the range [0, 5 * 10^4].",
    "Node values are between -10^5 and 10^5.",
    "The sorting must be done in O(n log n) time complexity.",
    "You must use O(1) additional space.",
    "Return the head of the sorted linked list."
  ]
}