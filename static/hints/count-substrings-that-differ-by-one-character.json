{
  "hints": [
    {
      "content": "Start by understanding what a substring is. A substring is a contiguous sequence of characters within a string. For example, in the string 'abc', the substrings include 'a', 'ab', 'abc', 'b', 'bc', and 'c'."
    },
    {
      "content": "Consider how you can generate all possible substrings of string `s`. You can use two nested loops: the outer loop to select the starting index and the inner loop to select the ending index. This will help you explore all substrings."
    },
    {
      "content": "Remember that you need to compare substrings of `s` with substrings of `t`. Think about how you can efficiently check if two substrings differ by exactly one character. You might want to write a helper function for this."
    },
    {
      "content": "When comparing two substrings, keep track of how many characters are different. If you find that exactly one character is different, you can count that pair of substrings as valid."
    },
    {
      "content": "Consider edge cases where the lengths of `s` and `t` are different. If the lengths of the substrings from `s` and `t` being compared are not the same, they cannot differ by exactly one character."
    },
    {
      "content": "Think about how to optimize your solution. Instead of checking each substring of `s` against all substrings of `t`, you might want to use a hash map to store the substrings of `t` for quick lookups."
    },
    {
      "content": "While generating substrings, remember to handle the case of empty substrings. Your substrings must be non-empty, so ensure your loops start and end correctly."
    },
    {
      "content": "As you compare substrings, you can use a counter to keep track of valid pairs. Make sure to reset your counter for each new substring from `s`."
    },
    {
      "content": "When counting valid substrings, ensure that you do not double count pairs. Each pair should only be counted once, so be careful with your indexing."
    },
    {
      "content": "Finally, consider how you will return the result. You should return the total count of valid substring pairs that differ by exactly one character. Make sure your final count is accurate."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= s.length, t.length <= 100",
    "s and t consist of lowercase English letters only.",
    "Substrings must be non-empty.",
    "Count pairs of substrings that differ by exactly one character."
  ]
}