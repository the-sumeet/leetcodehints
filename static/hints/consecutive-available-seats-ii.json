{
  "hints": [
    {
      "content": "Start by understanding the input format. You have a list of seats where each seat has a unique identifier and a status indicating if it's free (1) or occupied (0). Focus on how you can iterate through this list."
    },
    {
      "content": "Consider how you would track consecutive free seats. You might want to maintain a counter that increments when you find a free seat and resets when you encounter an occupied seat."
    },
    {
      "content": "Think about edge cases, such as when all seats are occupied or when all are free. What should your function return in these scenarios?"
    },
    {
      "content": "As you iterate through the seats, remember to check the current seat's status. You could use a simple conditional statement to determine if you should increment your counter or reset it."
    },
    {
      "content": "When counting consecutive free seats, you may need to store the maximum count found so far. This will help you keep track of the longest stretch of free seats."
    },
    {
      "content": "Consider how you will handle the output. What format should you return the maximum count of consecutive available seats? Make sure to clarify this in your implementation."
    },
    {
      "content": "Think about the indexing of your seats. Are they zero-based or one-based? This can affect how you access elements in your seat list."
    },
    {
      "content": "If you encounter a tie in the maximum count of consecutive seats, decide how you will handle it. Will you return the first occurrence or the last?"
    },
    {
      "content": "Consider using a loop to traverse the list of seats, and within that loop, keep track of both the current count of consecutive free seats and the maximum count found."
    },
    {
      "content": "Finally, ensure that your solution accounts for edge cases at the beginning and end of the list. For example, if the first seat is free, how does that affect your counting?"
    }
  ],
  "questionNotes": [
    "Input is a list of seats with unique seat IDs and a free/occupied status.",
    "Free seats are represented by 1, occupied by 0.",
    "Return the maximum number of consecutive free seats.",
    "Consider edge cases like all seats occupied or all free.",
    "Pay attention to indexing (zero-based vs one-based).",
    "Clarify how to handle ties in maximum counts."
  ]
}