{
  "hints": [
    {
      "content": "Start by understanding what combinations are. Unlike permutations, the order of elements in combinations does not matter. For example, [1, 2] is the same as [2, 1]."
    },
    {
      "content": "Consider how you can represent the range of numbers from 1 to n. You can use a simple loop or a list to generate this range. For n = 4, it would be [1, 2, 3, 4]."
    },
    {
      "content": "Think about how you can build combinations incrementally. You might want to use a backtracking approach where you explore adding each number to a current combination and then recursively call the function to continue building."
    },
    {
      "content": "When building combinations, you need to ensure that you do not select the same number more than once. This can be managed by keeping track of which numbers have already been included in the current combination."
    },
    {
      "content": "Keep in mind the base case for your recursive function. You should stop adding to your combination when its length reaches k, at which point you can add it to your results."
    },
    {
      "content": "Consider edge cases, such as when n equals k. In this scenario, there is only one combination: the full range of numbers from 1 to n."
    },
    {
      "content": "As you build your combinations, think about how to backtrack effectively. Once you finish exploring a path in your recursion, you should remove the last added number to try the next possible number."
    },
    {
      "content": "Make sure your function can handle the constraints given: 1 <= n <= 20 and 1 <= k <= n. This means you should not assume k can be greater than n."
    },
    {
      "content": "Consider how you will store the results. A list of lists is a good structure to hold all the combinations you generate. Ensure you append a copy of the current combination when you reach the base case."
    },
    {
      "content": "Finally, implement the recursive function with the necessary parameters: the current combination, the starting index for the next number to consider, and the results list to store valid combinations."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= n <= 20, 1 <= k <= n.",
    "Combinations are unordered; [1, 2] is the same as [2, 1].",
    "Return format: a list of lists containing the combinations.",
    "Ensure to handle edge cases, especially when n equals k."
  ]
}