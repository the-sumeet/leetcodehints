{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of countries along with their medal counts in gold, silver, and bronze. Make sure you can access each country's data correctly from the given JSON format."
    },
    {
      "content": "Consider how you will compare the countries based on their medal counts. You need to prioritize gold medals first, then silver, and finally bronze. Think about how you can represent this comparison in code."
    },
    {
      "content": "When sorting, you can use a custom sorting function that takes into account multiple criteria. In many programming languages, you can define a comparison function that returns values based on the medal counts."
    },
    {
      "content": "Remember to handle cases where countries have the same number of gold medals. In such cases, you should compare the silver medals next, and if those are also equal, compare the bronze medals."
    },
    {
      "content": "Consider the possibility of empty input or input with no countries. How will your sorting function handle such scenarios? Make sure to test for edge cases."
    },
    {
      "content": "Think about how you will return the sorted data. You might want to maintain the original structure of the input, so ensure that your output format matches the expected structure."
    },
    {
      "content": "You might want to create a helper function that extracts the relevant medal counts from each country's data. This will make your sorting logic cleaner and easier to manage."
    },
    {
      "content": "As you implement the sorting logic, keep in mind the efficiency of your sorting algorithm. If you have a large number of countries, you want your solution to remain performant."
    },
    {
      "content": "Once you have sorted the data, make sure to verify that the output is correct. You can do this by checking the order of the countries against their medal counts."
    },
    {
      "content": "Finally, implement the sorting function using the criteria discussed. For example, in Python, you might use a lambda function to sort by multiple keys: `sorted(data, key=lambda x: (-x[1], -x[2], -x[3]))`."
    }
  ],
  "questionNotes": [
    "Input is given in JSON format with 'headers' and 'rows'.",
    "Each row contains a country and its medal counts.",
    "Sorting should prioritize gold, then silver, then bronze medals.",
    "Handle ties by comparing silver and bronze counts.",
    "Ensure the output format matches the input structure."
  ]
}