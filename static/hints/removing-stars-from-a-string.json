{
  "hints": [
    {
      "content": "Start by understanding how the removal operation works. When you encounter a '*', you need to remove the closest non-star character to its left. Think about how you can keep track of these characters as you process the string."
    },
    {
      "content": "Consider using a stack data structure to help manage the characters in the string. As you iterate through the string, you can push non-star characters onto the stack and pop them off when you encounter a '*'."
    },
    {
      "content": "Remember that each '*' removes one character. If you encounter multiple '*' in a row, you will need to remove multiple characters from the stack. Make sure to handle this correctly."
    },
    {
      "content": "What happens if there are no characters left in the stack when you encounter a '*'? Think about how you would handle this situation in your code."
    },
    {
      "content": "As you build your result string, consider how you will convert the contents of your stack back into a string format. You might want to use a StringBuilder or simply accumulate characters in a new string."
    },
    {
      "content": "Pay attention to the constraints given in the problem. The string length can be up to 100,000 characters, so your solution should be efficient. Aim for a linear time complexity solution."
    },
    {
      "content": "Make sure to test your solution with edge cases, such as a string that consists entirely of stars or a string with no stars at all. How does your logic handle these scenarios?"
    },
    {
      "content": "Think about the order of operations: You should process the string from left to right. Each time you find a '*', you should immediately handle it before moving on to the next character."
    },
    {
      "content": "When you implement your stack logic, remember that popping from the stack should only occur if there are characters available to pop. This is crucial to avoid errors when processing the string."
    },
    {
      "content": "Finally, after processing the entire string, ensure that you return the result correctly formatted. If you used a stack, you might need to reverse the order of characters before returning the final string."
    }
  ],
  "questionNotes": [
    "1 <= s.length <= 10^5",
    "s consists of lowercase English letters and stars '*'.",
    "The operation can always be performed, ensuring a unique resulting string.",
    "Return the final string after all stars have been removed."
  ]
}