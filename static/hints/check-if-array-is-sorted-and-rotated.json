{
  "hints": [
    {
      "content": "First, consider what it means for an array to be sorted in non-decreasing order. This means that for any two consecutive elements, the first should be less than or equal to the second. Can you think of how this property might change if the array is rotated?"
    },
    {
      "content": "When you rotate an array, you essentially take elements from the front and move them to the back. Try to visualize how the smallest element in a sorted array would move in a rotated version. Where would it be located in the rotated array?"
    },
    {
      "content": "To check if the array is sorted and rotated, you might want to count how many times the order of the elements breaks the non-decreasing condition. Specifically, look for places where an element is greater than the next element."
    },
    {
      "content": "As you iterate through the array, keep track of the number of 'breaks' where the current element is greater than the next. Why do you think the number of breaks is important for determining if the array is sorted and rotated?"
    },
    {
      "content": "Consider the edge cases where the array has only one element or is already sorted. What would your function return in these cases? Remember that a single element is trivially sorted."
    },
    {
      "content": "If you find more than one break in the order of the array, what can you conclude about the possibility of the array being sorted and rotated? Think about the implications of having multiple breaks."
    },
    {
      "content": "You should also consider arrays with duplicate values. How do duplicates affect the sorted order? Can an array with duplicates still be considered sorted and rotated?"
    },
    {
      "content": "After counting the breaks, if you find zero or one break, you can conclude that the array is either fully sorted or has been rotated correctly. How would you implement this check in code?"
    },
    {
      "content": "Make sure to handle the circular nature of the array when checking the last element against the first. This is crucial for correctly identifying breaks in the sorted order."
    },
    {
      "content": "Finally, remember to return true if the conditions for being sorted and rotated are met, and false otherwise. What would your final return statement look like based on your break count?"
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 100",
    "Constraints: 1 <= nums[i] <= 100",
    "The array may contain duplicates.",
    "Return true if the array is sorted and rotated, otherwise return false."
  ]
}