{
  "hints": [
    {
      "content": "Start by defining the function `createCounter` that takes an integer parameter `init`. This will be the initial value for your counter."
    },
    {
      "content": "Inside `createCounter`, you'll need to create a variable to keep track of the current value of the counter. You can initialize this variable with `init`."
    },
    {
      "content": "Think about how to return an object from `createCounter`. This object should contain three methods: `increment`, `decrement`, and `reset`."
    },
    {
      "content": "For the `increment` method, you will need to increase the current value by 1 and then return the new value. Remember to update the current value variable."
    },
    {
      "content": "In the `decrement` method, you should decrease the current value by 1 and return it. Be cautious about how you handle negative values if you want to keep it simple."
    },
    {
      "content": "The `reset` method should set the current value back to `init`. Ensure that you return the value after resetting."
    },
    {
      "content": "Consider how you will structure the object returned from `createCounter`. Each method should be accessible as properties of the object."
    },
    {
      "content": "Make sure to test your functions independently. For example, after calling `increment`, check if the value has increased correctly."
    },
    {
      "content": "Think about edge cases, such as calling `decrement` multiple times when the counter is at its initial value. How will you handle the value going below `init`?"
    },
    {
      "content": "Finally, ensure that when you call `reset` multiple times, it consistently returns the initial value. The object should maintain its state correctly."
    }
  ],
  "questionNotes": [
    "The function should return an object with three methods: increment, decrement, and reset.",
    "The initial value is provided as `init`, and it must be preserved for the reset method.",
    "The output of each method call should be the new value after the operation.",
    "Constraints: -1000 <= init <= 1000, 0 <= calls.length <= 1000."
  ]
}