{
  "hints": [
    {
      "content": "Start by understanding what a middle index is. A middle index is defined as an index where the sum of the elements to its left equals the sum of the elements to its right. For example, if you have an index 3 in an array, you need to check if the sum of elements from index 0 to 2 equals the sum from index 4 to the end."
    },
    {
      "content": "Consider how to calculate the left and right sums efficiently. You can maintain a running total of the left sum as you iterate through the array. This way, you don't need to recalculate the left sum from scratch for every index."
    },
    {
      "content": "Think about how to compute the right sum. Instead of calculating it directly, you can derive it from the total sum of the array minus the current element and the left sum. This will save you time and make your solution more efficient."
    },
    {
      "content": "Remember to handle edge cases. For instance, if the middle index is 0, the left sum is 0. Similarly, if the middle index is the last index, the right sum is also 0. Make sure your logic accounts for these scenarios."
    },
    {
      "content": "As you iterate through the array, keep track of the total sum of the array in advance. This will help you quickly compute the right sum without needing a nested loop."
    },
    {
      "content": "When you find a middle index that satisfies the condition, remember that you need to return the leftmost one. This means you should continue checking even after finding a valid index to ensure there isn't a smaller index that also qualifies."
    },
    {
      "content": "Consider what you should return if no middle index is found. The problem states that you should return -1 in such cases. Make sure your logic includes this return statement."
    },
    {
      "content": "Think about the constraints of the problem. The input array can have a length of up to 100, and each element can range from -1000 to 1000. This means that your solution needs to be efficient but does not need to handle extremely large inputs."
    },
    {
      "content": "As a next step, try writing a pseudocode outline of your approach. Start with initializing the total sum, then loop through the array while calculating the left sum and checking the right sum condition."
    },
    {
      "content": "Now, implement your logic in code. Start with the initialization of variables and the loop structure. Make sure to include the checks for the left and right sums, and handle the return value appropriately."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 100",
    "-1000 <= nums[i] <= 1000",
    "Return -1 if no middle index is found.",
    "The leftmost middle index should be returned in case of multiple valid indices."
  ]
}