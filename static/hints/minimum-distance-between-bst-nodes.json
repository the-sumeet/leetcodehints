{
  "hints": [
    {
      "content": "Start by understanding the properties of a Binary Search Tree (BST). In a BST, the left subtree contains only nodes with values less than the parent node, and the right subtree contains only nodes with values greater than the parent node."
    },
    {
      "content": "Consider how you can traverse the BST. In-order traversal of a BST will give you the values in sorted order. This can be a key step in finding the minimum difference."
    },
    {
      "content": "Think about how to keep track of the previous node's value during the in-order traversal. This will help you calculate the difference between the current node and the previous node."
    },
    {
      "content": "As you traverse the tree, maintain a variable to store the minimum difference found so far. Update this variable whenever you compute a new difference that is smaller."
    },
    {
      "content": "Remember that the minimum difference must be calculated between different nodes. Make sure your logic accounts for this when comparing values."
    },
    {
      "content": "Consider edge cases, such as when the tree has only two nodes. The minimum difference in this case will simply be the absolute difference between the two node values."
    },
    {
      "content": "When implementing the in-order traversal, you can use either recursion or an iterative approach with a stack. Choose the method you are most comfortable with."
    },
    {
      "content": "As you traverse, ensure you are correctly updating the minimum difference at each step. This will involve comparing the current node's value with the previous node's value."
    },
    {
      "content": "Make sure to handle the case where the tree is skewed (all nodes are either to the left or right). The logic for calculating the minimum difference should still hold."
    },
    {
      "content": "Finally, after completing the traversal, return the minimum difference you have recorded. Ensure your function has the correct return type and format."
    }
  ],
  "questionNotes": [
    "Constraints: The number of nodes in the tree is in the range [2, 100].",
    "Node values are within the range: 0 <= Node.val <= 10^5.",
    "The return value should be the minimum difference between values of any two different nodes."
  ]
}