{
  "hints": [
    {
      "content": "Start by understanding the input: you have an array `arr` and a function `fn`. The goal is to sort `arr` based on the values returned by `fn` when applied to each element."
    },
    {
      "content": "Remember that `fn` will always return unique numbers for each element in `arr`. This means you won't have to worry about tie-breaking in your sorting logic."
    },
    {
      "content": "Consider using the built-in sorting function available in your programming language. Most languages allow you to provide a custom comparison function to dictate how the elements should be ordered."
    },
    {
      "content": "When you sort the array, you'll need to apply `fn` to each element to get the sorting key. Think about how you can use a sorting function that compares the results of `fn`."
    },
    {
      "content": "You can use an inline function or a lambda to apply `fn` during the sorting process. For example, in Python, you can use `sorted(arr, key=fn)` to sort directly."
    },
    {
      "content": "Make sure to test your solution with edge cases, such as arrays with negative numbers or arrays where the elements are objects with multiple properties."
    },
    {
      "content": "Consider how you will handle large arrays, as the constraints allow for lengths up to 500,000. Ensure that your sorting algorithm is efficient enough to handle this size."
    },
    {
      "content": "Think about the return format: your function should return a new sorted array, not modify the original `arr`. This is important for maintaining immutability."
    },
    {
      "content": "As you implement the sorting, keep in mind that the function `fn` can be any valid function that returns a number. Ensure that your implementation is flexible and can handle different types of input."
    },
    {
      "content": "Finally, implement the sorting logic using your chosen method. For example, you might write something like: `const sortedArr = arr.sort((a, b) => fn(a) - fn(b));` This will sort `arr` based on the output of `fn`."
    }
  ],
  "questionNotes": [
    "Input is an array `arr` and a function `fn` that returns unique numbers.",
    "Output must be a new sorted array based on the values returned by `fn`.",
    "Constraints allow for arrays up to length 500,000.",
    "Ensure that the original array `arr` is not modified."
  ]
}