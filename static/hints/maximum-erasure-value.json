{
  "hints": [
    {
      "content": "Start by understanding the problem requirements. You need to find a subarray with unique elements, and the score is the sum of those elements. Think about how you can identify and sum the elements of a subarray."
    },
    {
      "content": "Consider using a sliding window approach. This means you can maintain a window of elements that you can expand and contract as you iterate through the array. This will help you efficiently manage the uniqueness of elements."
    },
    {
      "content": "As you expand your window, keep track of the elements you've seen. Use a set or a dictionary to help you ensure that all elements in your current window are unique."
    },
    {
      "content": "When you encounter a duplicate element, you need to shrink your window from the left until all elements are unique again. Think about how you can efficiently update your sum as you add or remove elements from your window."
    },
    {
      "content": "Make sure to keep track of the maximum score you find as you iterate through the array. You can do this by comparing the current score of your window to the maximum score found so far."
    },
    {
      "content": "Consider edge cases, such as when the array has only one element or when all elements are the same. How would your approach handle these cases?"
    },
    {
      "content": "Donâ€™t forget about the constraints given in the problem. The length of the array can be up to 100,000, so your solution needs to be efficient. Aim for a linear time complexity if possible."
    },
    {
      "content": "Think about how you will implement the logic to keep track of the current sum of the unique elements in your window. You might want to use a variable that updates as you add or remove elements."
    },
    {
      "content": "When you find a duplicate, you will need to move the left pointer of your window. Make sure to update your sum accordingly. This is a key part of maintaining the current state of your window."
    },
    {
      "content": "Finally, ensure that you return the maximum score found after processing the entire array. This will be your result. Remember to check that your result is correctly formatted as specified in the problem statement."
    }
  ],
  "questionNotes": [
    "You must erase a subarray containing unique elements.",
    "The score is the sum of the elements in the erased subarray.",
    "Constraints: 1 <= nums.length <= 100,000 and 1 <= nums[i] <= 10,000.",
    "The subarray must be contiguous.",
    "You need to return the maximum score from exactly one erased subarray."
  ]
}