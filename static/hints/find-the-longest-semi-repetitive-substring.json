{
  "hints": [
    {
      "content": "Start by understanding what a semi-repetitive substring is. A substring is semi-repetitive if it contains at most one pair of adjacent identical digits. For example, in '52233', '5223' is valid while '52233' is not."
    },
    {
      "content": "Consider the length of the input string. Since the maximum length is 50, you can afford to use a straightforward approach. Think about how you can iterate through the string to check for adjacent pairs."
    },
    {
      "content": "As you iterate through the string, keep track of the count of adjacent pairs you encounter. You can use a simple counter to help with this. For instance, if you find '22', increment your counter."
    },
    {
      "content": "Think about how to manage the start and end of your substring. You may need to use two pointers or a sliding window approach to explore potential semi-repetitive substrings efficiently."
    },
    {
      "content": "When you find a pair of adjacent identical digits, consider how you will handle the next characters. You can decide to either expand your substring or move your starting point forward based on the number of pairs you've found."
    },
    {
      "content": "Remember to reset your count of adjacent pairs when you move your starting point. This will help you accurately determine the length of the current semi-repetitive substring."
    },
    {
      "content": "Think about edge cases, such as strings that are entirely made of the same digit. For example, '1111111' should return 2 because the longest semi-repetitive substring is '11'."
    },
    {
      "content": "As you implement your logic, keep track of the maximum length of valid semi-repetitive substrings you find. Use a variable to store this maximum length and update it whenever you find a longer valid substring."
    },
    {
      "content": "Consider how you will return the result. The problem asks for the length of the longest semi-repetitive substring, so ensure that your final output reflects this correctly."
    },
    {
      "content": "To summarize your approach: Use a sliding window to explore substrings, count adjacent pairs, and adjust your window based on the count. Make sure to check each character and update your maximum length accordingly."
    }
  ],
  "questionNotes": [
    "1 <= s.length <= 50",
    "'0' <= s[i] <= '9'",
    "Return the length of the longest semi-repetitive substring.",
    "At most one adjacent pair of the same digit is allowed."
  ]
}