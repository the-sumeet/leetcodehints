{
  "hints": [
    {
      "content": "Start by thinking about how you can compare the characters in each string. You will need to find characters that are present in every string in the input array."
    },
    {
      "content": "Consider using a data structure that can help you keep track of character counts. A frequency map (or dictionary) can be useful for counting occurrences of each character in the first string."
    },
    {
      "content": "Once you have a frequency map for the first string, you can iterate through the remaining strings. For each character in these strings, check if it exists in the frequency map and update the counts accordingly."
    },
    {
      "content": "Remember to handle characters that do not appear in all strings. You will need to keep track of the minimum count of each character across all strings."
    },
    {
      "content": "Think about how you will store the final result. You will want to create an output array that includes each common character the number of times it appears in all strings."
    },
    {
      "content": "Consider edge cases, such as when there's only one string in the input array. In this case, the output would simply be all characters in that string, including duplicates."
    },
    {
      "content": "Make sure you are aware of the constraints: the maximum length of the words array is 100 and each word can be up to 100 characters long. This means your solution should be efficient enough to handle the upper limits."
    },
    {
      "content": "As you implement your solution, think about how you will handle the character comparisons. You might want to convert each string into a frequency map and then compare these maps."
    },
    {
      "content": "When you find a character that is common to all strings, remember to add it to your result array the number of times it appears in the string with the least occurrences."
    },
    {
      "content": "You are almost there! Think about how you can combine the frequency maps of all strings into a single map that reflects the minimum counts of each character. This will help you build your final output array."
    }
  ],
  "questionNotes": [
    "You need to return characters including duplicates.",
    "The order of characters in the output does not matter.",
    "Constraints: 1 <= words.length <= 100, 1 <= words[i].length <= 100.",
    "All characters are lowercase English letters."
  ]
}