{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have a list of listings, each containing a city and a price. Make sure you can access the city and price for each listing."
    },
    {
      "content": "Consider how you will group the listings by city. You might want to use a data structure that allows you to aggregate prices for each city easily, such as a dictionary or a hash map."
    },
    {
      "content": "As you iterate through the listings, think about how to accumulate the total price for each city. You can initialize a total price for each city whenever you encounter it for the first time."
    },
    {
      "content": "Don't forget to account for multiple listings in the same city. Ensure that your logic correctly sums prices for all listings in a city."
    },
    {
      "content": "After you have the total prices for each city, you will need to determine which cities are the most expensive. Consider how you will compare total prices across cities."
    },
    {
      "content": "You might want to keep track of the city with the highest total price as you process the listings. This way, you can avoid storing all cities and their totals if you only need the top ones."
    },
    {
      "content": "Think about how you will handle ties. If two cities have the same total price, decide how you will choose which one to return or display. Will you return both, or just one?"
    },
    {
      "content": "Once you have identified the most expensive cities, consider how you will format your output. Will you return just the city names, or do you need to include their total prices as well?"
    },
    {
      "content": "As a next step, implement a function that processes the input data and calculates the total prices for each city. Make sure to test it with the provided sample data."
    },
    {
      "content": "Finally, after calculating the totals, sort the cities based on their total prices and return the top N expensive cities. Ensure your sorting logic is efficient."
    }
  ],
  "questionNotes": [
    "Input is structured as a JSON object with 'headers' and 'rows'.",
    "Each listing contains 'listing_id', 'city', and 'price'.",
    "Cities may have multiple listings, and prices should be summed.",
    "Handle ties in total prices appropriately.",
    "Output format should specify what information is returned (city names, total prices, etc.)."
  ]
}