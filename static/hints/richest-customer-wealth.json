{
  "hints": [
    {
      "content": "Start by understanding the structure of the input grid. Each element in the grid represents the amount of money a customer has in a specific bank. Think about how you can access each customer's accounts using nested loops."
    },
    {
      "content": "Consider how you will calculate the total wealth for each customer. You will need to sum the values in each row of the grid. Remember that each row corresponds to a different customer."
    },
    {
      "content": "To find the wealth of a customer, you can use a simple loop to iterate through each customer's accounts. For example, if you have a customer represented by a row, you can sum the elements of that row."
    },
    {
      "content": "As you calculate the wealth for each customer, keep track of the maximum wealth found so far. You might want to initialize a variable to hold the maximum value before you start your calculations."
    },
    {
      "content": "Remember to handle the case where there are multiple customers with the same maximum wealth. The problem asks for the maximum wealth, not the number of customers with that wealth."
    },
    {
      "content": "Think about the constraints provided in the problem. Each customer's wealth is guaranteed to be a positive integer, and the grid dimensions are limited to 50x50. This means your solution can be straightforward without worrying about performance."
    },
    {
      "content": "If you're using a programming language that supports built-in functions for summing lists or arrays, consider using those to simplify your code. For example, in Python, you can use the `sum()` function."
    },
    {
      "content": "Make sure to test your solution with edge cases, such as when there is only one customer or when all customers have the same wealth. These cases can help ensure your solution is robust."
    },
    {
      "content": "As you approach the final solution, remember to return the maximum wealth found after iterating through all customers. Your return statement should reflect this."
    },
    {
      "content": "Finally, ensure that your implementation correctly handles the input format and returns the expected output type. The output should be a single integer representing the richest customer's wealth."
    }
  ],
  "questionNotes": [
    "Constraints: m == accounts.length, n == accounts[i].length",
    "1 <= m, n <= 50",
    "1 <= accounts[i][j] <= 100",
    "Return the maximum wealth as a single integer.",
    "Multiple customers can have the same maximum wealth, but you only need to return the value."
  ]
}