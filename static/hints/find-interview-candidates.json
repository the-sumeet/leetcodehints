{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have two main components: 'Contests' and 'Users'. Each contest has a unique 'contest_id' and medal counts for gold, silver, and bronze."
    },
    {
      "content": "Identify the relationship between users and contests. Each user can potentially be associated with contests based on their medal counts. Think about how you can represent this relationship."
    },
    {
      "content": "Consider how to track the number of medals each user has won across all contests. You might want to create a mapping of user IDs to their respective medal counts."
    },
    {
      "content": "When processing the contests, focus on how to update each user's medal counts. You will need to iterate through each contest and update the counts for the users who have won medals."
    },
    {
      "content": "Pay attention to the medal hierarchy: gold > silver > bronze. This will be important when determining which users to prioritize or how to handle ties."
    },
    {
      "content": "Think about how to handle users who have won the same number of medals. You may need to establish a tie-breaking mechanism, such as sorting by user ID."
    },
    {
      "content": "After calculating the total medals for each user, consider how to format your output. You might want to return a list of user IDs or a more detailed representation."
    },
    {
      "content": "Make sure to handle edge cases, such as users with no medals or contests with no winners. How will your program behave in these scenarios?"
    },
    {
      "content": "As you implement your solution, remember to test it with various inputs, including those with no contests or users. This will help ensure your code is robust."
    },
    {
      "content": "Finally, once you have your list of candidates, think about how to sort them based on the criteria you've established (medals and user ID). You might use a custom sorting function."
    }
  ],
  "questionNotes": [
    "The input includes two tables: 'Contests' and 'Users'.",
    "Each contest has a unique 'contest_id' and three types of medal counts.",
    "Users are identified by 'user_id', which is unique.",
    "Pay attention to the hierarchy of medals: gold > silver > bronze.",
    "Consider how to handle ties in medal counts by user ID.",
    "Ensure to account for users with zero medals and contests with no winners."
  ]
}