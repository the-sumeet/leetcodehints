{
  "hints": [
    {
      "content": "Start by understanding what a permutation is. A permutation of a string is a rearrangement of its characters. For example, the permutations of 'AB' are 'AB' and 'BA'."
    },
    {
      "content": "Consider how you can generate permutations recursively. You might want to fix one character and recursively generate permutations of the remaining characters."
    },
    {
      "content": "Think about how to handle duplicate characters. If your input string contains duplicate characters, you need to ensure that your permutations are unique."
    },
    {
      "content": "You can use a helper function that takes the current permutation and the remaining characters to choose from. This function can build the permutations step by step."
    },
    {
      "content": "Remember to keep track of which characters have been used in the current permutation to avoid reusing them. A boolean array can be helpful for this."
    },
    {
      "content": "Consider the base case for your recursive function. When should you stop the recursion? A common base case is when the length of the current permutation equals the length of the original string."
    },
    {
      "content": "Think about how you will store the results. You can use a list to collect all the unique permutations generated during the recursive calls."
    },
    {
      "content": "Before you start generating permutations, sort the input string. This can help in managing duplicates and ensuring that the results are in lexicographical order."
    },
    {
      "content": "When generating permutations, if you encounter a character that is the same as the previous one and the previous one has not been used in the current recursive call, skip it to avoid duplicates."
    },
    {
      "content": "Finally, ensure that your function returns the list of permutations in the required format. You may need to convert it to a specific data structure depending on the problem requirements."
    }
  ],
  "questionNotes": [
    "The input string may contain uppercase letters only.",
    "Permutations must be unique if the input string has duplicate characters.",
    "The output should be a list of all unique permutations.",
    "Consider edge cases like an empty string or a string with a single character."
  ]
}