{
  "hints": [
    {
      "content": "Start by defining the class `SubrectangleQueries` and initialize it with a 2D list (matrix) of integers. Make sure to store this matrix in an instance variable so that you can access it later in your methods."
    },
    {
      "content": "For the `updateSubrectangle` method, remember that you need to update all values in a specified rectangular area. Think about how you can use nested loops to iterate over the rows and columns of the subrectangle."
    },
    {
      "content": "When implementing `getValue`, ensure you are correctly accessing the element in the matrix using the provided row and column indices. Remember that Python uses zero-based indexing."
    },
    {
      "content": "Consider edge cases where the `updateSubrectangle` method is called on the entire rectangle, or when the rectangle is just a single cell. How will your code handle these scenarios?"
    },
    {
      "content": "Make sure to handle the constraints properly. The rectangle can have a maximum size of 100x100, and you will perform at most 500 operations. Think about the performance implications of your implementation."
    },
    {
      "content": "While updating values in `updateSubrectangle`, ensure that you are not inadvertently accessing out-of-bounds indices. Validate that your row and column indices are within the limits of the matrix dimensions."
    },
    {
      "content": "In your `updateSubrectangle` method, you can use a single loop to iterate through the specified rows and columns. For example, you could use: \n`for r in range(row1, row2 + 1):` and `for c in range(col1, col2 + 1):`."
    },
    {
      "content": "Remember that both methods should be efficient given the constraints. If you find that the update operation is becoming too slow, consider if there's a way to optimize it, perhaps by delaying updates or using a different data structure."
    },
    {
      "content": "Think about how you will test your implementation. Create various test cases that cover different scenarios, such as full updates, partial updates, and checking values after multiple updates."
    },
    {
      "content": "Finally, ensure your methods return the correct values as specified in the problem statement. For `getValue`, you should return the current value at the specified coordinates."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= rows, cols <= 100; 0 <= row1 <= row2 < rows; 0 <= col1 <= col2 < cols.",
    "The matrix is indexed with zero-based indexing.",
    "You will perform at most 500 operations in total.",
    "Ensure that your methods return the expected values as outlined in the examples."
  ]
}