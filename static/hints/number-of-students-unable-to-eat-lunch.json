{
  "hints": [
    {
      "content": "Start by understanding the queue structure. The students are in a queue, and each student has a preference for either a circular (0) or square (1) sandwich. The sandwiches are stacked, with the first sandwich on the top."
    },
    {
      "content": "Consider how you will simulate the process of students taking sandwiches. You'll need to maintain the order of students and check their preferences against the sandwich at the top of the stack."
    },
    {
      "content": "Think about how to represent the queue of students. You can use a list to simulate the queue, where you can easily add students to the end and remove them from the front."
    },
    {
      "content": "As you process each student, if they do not want the sandwich on top, they should be moved to the end of the queue. You can use a loop to iterate through the students until no student wants the sandwich on top."
    },
    {
      "content": "Keep track of how many times you have cycled through the queue without any student taking a sandwich. If this count reaches the number of students, it means all remaining students are unable to eat."
    },
    {
      "content": "Remember that the length of the students array is equal to the length of the sandwiches array. This means that the maximum number of iterations you will perform is limited by this length."
    },
    {
      "content": "Consider edge cases where all students prefer the same type of sandwich, or where all sandwiches are of one type. How would your logic handle these scenarios?"
    },
    {
      "content": "You might want to use a counter to keep track of how many students have passed without taking a sandwich. If this counter equals the number of students, you can conclude that no more sandwiches can be taken."
    },
    {
      "content": "When implementing your solution, ensure you check the top sandwich against the front studentâ€™s preference correctly. If they match, remove both from their respective structures; if not, move the student to the end."
    },
    {
      "content": "Finally, return the number of students who are unable to eat. This can be calculated as the total number of students minus the number of students who successfully took sandwiches."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= students.length, sandwiches.length <= 100",
    "students.length == sandwiches.length",
    "sandwiches[i] is 0 or 1",
    "students[i] is 0 or 1",
    "Indexing starts at 0 for both students and sandwiches."
  ]
}