{
  "hints": [
    {
      "content": "Start by understanding the concept of an 'island' in the grid. An island is formed by adjacent cells with the value '1'. Consider how you would identify these cells."
    },
    {
      "content": "Think about how you can traverse the grid to find all the islands. Depth-first search (DFS) or breadth-first search (BFS) are common techniques for this. Which one do you think would be more suitable for this problem?"
    },
    {
      "content": "When you find an island, you need to record its shape. Consider how you might represent the shape of an island in a consistent way, regardless of its position in the grid."
    },
    {
      "content": "Remember that the shape of an island should be normalized. For example, if you have two islands that look the same but are located in different parts of the grid, they should be considered the same shape."
    },
    {
      "content": "As you traverse the island, think about how you can record the relative positions of the cells you visit. A common approach is to use coordinates relative to the starting point of the island."
    },
    {
      "content": "Consider using a set or a dictionary to store the unique shapes of islands. This will help you easily check for duplicates as you identify new islands."
    },
    {
      "content": "Make sure to handle edge cases, such as grids that are completely empty or filled entirely with '0's. What should your function return in these cases?"
    },
    {
      "content": "When implementing the DFS or BFS, ensure that you mark cells as visited to avoid counting the same island multiple times. How will you do this?"
    },
    {
      "content": "Think about how to iterate through the grid. You will need nested loops to check each cell. What conditions will you check before starting a DFS or BFS from a cell?"
    },
    {
      "content": "As you identify an island, you should convert its shape into a canonical form. This might involve sorting the coordinates or translating them to a specific origin."
    },
    {
      "content": "Test your implementation with various input cases, including grids of different sizes and shapes. How will you ensure that your solution handles all possible configurations?"
    },
    {
      "content": "Consider how you will return the number of distinct islands. Will you return the count directly, or do you need to return a list of shapes as well?"
    },
    {
      "content": "Remember to account for the possibility of islands that are rotated or reflected. How can you ensure that these variations are recognized as the same shape?"
    },
    {
      "content": "Before finalizing your solution, think about the time complexity of your approach. How efficient is your algorithm in terms of the number of cells processed?"
    },
    {
      "content": "As a final step, ensure that your function is well-structured and handles all edge cases gracefully. What additional tests can you run to validate your solution?"
    }
  ],
  "questionNotes": [
    "The grid consists of '1's (land) and '0's (water).",
    "An island is defined as a group of '1's connected horizontally or vertically.",
    "You need to return the number of distinct islands, considering their shapes.",
    "Islands that are the same shape but in different locations should be counted as one.",
    "Handle edge cases like empty grids or grids with no '1's."
  ]
}