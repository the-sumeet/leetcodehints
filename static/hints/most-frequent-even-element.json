{
  "hints": [
    {
      "content": "Start by identifying which elements in the array are even. Remember that an even number is any integer that can be divided by 2 without a remainder."
    },
    {
      "content": "Once you have the even elements, think about how you can count the frequency of each even number. A good data structure for this task is a dictionary or a hash map."
    },
    {
      "content": "As you count the frequencies, consider how you will handle the case of ties. You need to return the smallest even number if two or more even numbers have the same highest frequency."
    },
    {
      "content": "Don't forget to handle the case where there are no even numbers in the array. Make sure to return -1 in that scenario."
    },
    {
      "content": "When iterating through the array, you might want to use a loop that checks each number. For example, you could use a for loop to go through each element in `nums`."
    },
    {
      "content": "As you populate your frequency map, you can check if the current number is even using the modulus operator. For example: `if num % 2 == 0`."
    },
    {
      "content": "After building your frequency map, you will need to determine which even number has the highest frequency. You can iterate through the map to find this."
    },
    {
      "content": "While checking for the highest frequency, keep track of both the maximum frequency and the smallest even number that has this frequency."
    },
    {
      "content": "Consider using a tuple to store the current maximum frequency and the corresponding smallest even number. This will help you manage the tie-breaking condition easily."
    },
    {
      "content": "Finally, ensure that you return the correct value based on your findings. If no even number was found, return -1; otherwise, return the smallest even number with the highest frequency."
    }
  ],
  "questionNotes": [
    "Constraints: 1 <= nums.length <= 2000",
    "Each element in nums is between 0 and 10^5.",
    "Return -1 if there are no even elements.",
    "In case of a tie, return the smallest even element."
  ]
}