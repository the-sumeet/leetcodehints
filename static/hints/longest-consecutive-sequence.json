{
  "hints": [
    {
      "content": "To solve this problem efficiently, think about how you can utilize a data structure that allows for fast lookups. Consider using a set to store the unique elements of the array."
    },
    {
      "content": "Remember that the longest consecutive sequence means that the numbers must be in a sequence without any gaps. For example, [1, 2, 3, 4] is consecutive, but [1, 2, 4] is not."
    },
    {
      "content": "Before you start checking for sequences, ensure that you handle the case where the input array is empty. What should your function return in that scenario?"
    },
    {
      "content": "When iterating through the numbers, consider how you can efficiently check for the start of a new sequence. You might want to check if a number is the smallest in its potential sequence."
    },
    {
      "content": "Use a loop to go through each number in your set. For each number, check if it is the beginning of a sequence by verifying that the previous number (current number - 1) is not in the set."
    },
    {
      "content": "Once you identify the start of a sequence, use a while loop to count how many consecutive numbers exist. Increment your count as long as the next number (current number + 1) is found in the set."
    },
    {
      "content": "Keep track of the maximum length of consecutive sequences found so far. You can update this maximum length whenever you finish counting a sequence."
    },
    {
      "content": "Consider edge cases where the input numbers might be negative or very large. Ensure your solution can handle the full range of possible integer values as specified in the constraints."
    },
    {
      "content": "Remember that the input array can contain duplicates. Make sure your data structure only stores unique values to avoid counting the same number multiple times."
    },
    {
      "content": "Finally, your algorithm should run in O(n) time complexity. Think about how each number is processed only a limited number of times to achieve this efficiency. You can finalize your approach by combining the ideas discussed."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= nums.length <= 10^5",
    "-10^9 <= nums[i] <= 10^9",
    "Return the length of the longest consecutive elements sequence.",
    "Input array may contain duplicates."
  ]
}