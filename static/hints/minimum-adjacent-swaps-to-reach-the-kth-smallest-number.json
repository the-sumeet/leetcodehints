{
  "hints": [
    {
      "content": "Start by understanding how to generate permutations of the digits in the string `num`. You need to find permutations that are greater than `num` and sort them to find the k-th smallest one."
    },
    {
      "content": "Remember that the k-th smallest wonderful integer is defined as the k-th permutation of the digits that is strictly greater than `num`. Make sure to handle cases where the digits may have duplicates."
    },
    {
      "content": "Consider using a data structure to keep track of the digits and their counts. This will help you efficiently generate the next permutation that is greater than the current number."
    },
    {
      "content": "When generating permutations, think about how to avoid generating all possible permutations. Instead, focus on generating only those that are greater than `num` directly."
    },
    {
      "content": "Once you have the k-th smallest wonderful integer, you need to calculate how many adjacent swaps are needed to transform `num` into this integer. This can be done by simulating the swaps."
    },
    {
      "content": "To count the adjacent swaps, you can use a two-pointer technique or a greedy approach. For each digit in `num`, find its position in the target wonderful integer and swap it into place."
    },
    {
      "content": "Make sure to handle cases where digits are the same. When swapping, you may need to account for how many swaps are needed to get the correct digit to the correct position."
    },
    {
      "content": "Consider edge cases where the digits in `num` are already sorted in descending order. In such cases, the next permutation may require multiple swaps to reach the k-th wonderful integer."
    },
    {
      "content": "As you implement the swap counting, keep track of the number of swaps and ensure that you are only counting adjacent swaps. This will be crucial for your final answer."
    },
    {
      "content": "Finally, ensure that your function returns the correct number of swaps as an integer. You may want to write test cases to validate your implementation against the provided examples."
    }
  ],
  "questionNotes": [
    "Constraints: 2 <= num.length <= 1000, 1 <= k <= 1000.",
    "The input string `num` only consists of digits.",
    "The k-th smallest wonderful integer is guaranteed to exist.",
    "Handle cases with duplicate digits carefully to avoid incorrect permutations."
  ]
}