{
  "hints": [
    {
      "content": "Start by understanding the structure of the input data. You have two tables: 'Project' and 'Employee'. Each table has specific columns, and you need to relate them based on 'employee_id'."
    },
    {
      "content": "Consider how you will combine the data from both tables. Think about how to join the 'Project' and 'Employee' tables using the common 'employee_id' field."
    },
    {
      "content": "Remember that you need to focus on the experience of employees. You might want to filter or sort employees based on their 'experience_years' after joining the tables."
    },
    {
      "content": "As you work on the solution, think about the expected output format. You will likely need to return a list of employees for each project, possibly sorted by experience."
    },
    {
      "content": "Consider edge cases where a project might not have any employees assigned to it. How will you handle projects without employees in your output?"
    },
    {
      "content": "When dealing with multiple employees for a single project, think about how to handle ties in experience. Will you return employees in the order they appear, or is there a specific sorting requirement?"
    },
    {
      "content": "To implement the join, you might use a loop or a more efficient method like a hash map. Consider how you will structure your data after the join to facilitate easy access to employee information."
    },
    {
      "content": "Make sure to account for the possibility of duplicate employee entries across different projects. How will you ensure that your output reflects the correct relationships?"
    },
    {
      "content": "As you prepare your output, ensure that it matches the required format. You might need to format your results as a list of dictionaries or another structure depending on the requirements."
    },
    {
      "content": "Finally, think about how you will test your solution. Create test cases that include various scenarios, such as projects with no employees, multiple employees with the same experience, and projects with unique employees."
    }
  ],
  "questionNotes": [
    "Input consists of two tables: Project and Employee.",
    "Join the tables on 'employee_id'.",
    "Output should reflect employees sorted by experience_years.",
    "Handle projects with no assigned employees.",
    "Consider tie-breaking rules for employees with the same experience."
  ]
}