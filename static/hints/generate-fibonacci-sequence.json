{
  "hints": [
    {
      "content": "Start by understanding the Fibonacci sequence. It begins with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the sequence starts as 0, 1, 1, 2, 3, 5, ..."
    },
    {
      "content": "Remember that this problem requires a generator function. In Python, a generator is defined using the `yield` keyword, which allows you to produce a series of values over time instead of returning them all at once."
    },
    {
      "content": "Consider how you will keep track of the last two numbers in the Fibonacci sequence as you generate new numbers. You will need to initialize these two numbers before entering your loop."
    },
    {
      "content": "Think about how many times you should yield values based on the `callCount`. You can use a loop that runs `callCount` times to yield the Fibonacci numbers sequentially."
    },
    {
      "content": "Make sure to handle the case when `callCount` is 0. Your generator should not yield any values in this case, so you might want to check for this condition at the start of your generator function."
    },
    {
      "content": "When yielding the Fibonacci numbers, remember to update the last two Fibonacci numbers after each yield. This means you will need to store the current Fibonacci number and the previous one."
    },
    {
      "content": "You might find it useful to create a simple loop that yields the Fibonacci numbers. For example, initialize two variables for the first two Fibonacci numbers and then use a loop to calculate and yield the next numbers."
    },
    {
      "content": "As you write your generator, consider using a `while` loop that continues until you have yielded the required number of Fibonacci numbers. Be careful with your loop condition to avoid infinite loops."
    },
    {
      "content": "Make sure your generator function is defined correctly and that you are using `yield` to produce values one at a time. Test your generator with different `callCount` values to ensure it behaves as expected."
    },
    {
      "content": "Finally, remember to return the generator object itself from your generator function. This allows the caller to use the `.next()` method to retrieve the Fibonacci numbers one by one."
    }
  ],
  "questionNotes": [
    "Constraints: 0 <= callCount <= 50",
    "The generator should yield values only when the `.next()` method is called.",
    "If callCount is 0, the output should be an empty list.",
    "The Fibonacci sequence starts with 0 and 1."
  ]
}