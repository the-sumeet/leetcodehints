{
  "hints": [
    {
      "content": "Start by understanding the structure of the input array. Each restaurant is represented as an array of five elements: [id, rating, veganFriendly, price, distance]. Make sure you can access these elements correctly."
    },
    {
      "content": "Consider how to apply the vegan-friendly filter. If veganFriendly is set to true (1), you should only include restaurants where the third element (veganFriendly) is also 1."
    },
    {
      "content": "Next, think about the maxPrice and maxDistance filters. You will need to check if the price and distance of each restaurant are within the specified limits before including them in the result."
    },
    {
      "content": "As you filter the restaurants, remember to keep track of the IDs of the restaurants that pass the filters. You can use a list to store these IDs."
    },
    {
      "content": "Once you have your filtered list of restaurant IDs, the next step is to sort them. First, sort by rating in descending order, and for restaurants with the same rating, sort by ID in descending order."
    },
    {
      "content": "To sort the list of IDs, you might want to use a custom sorting function or a lambda function that sorts based on multiple criteria. For example, you can sort by rating first and then by ID."
    },
    {
      "content": "Make sure to handle edge cases, such as when no restaurants meet the filtering criteria. In such cases, the output should be an empty list."
    },
    {
      "content": "Consider the constraints provided in the problem. For instance, the maximum length of the restaurants array is 10,000, so your solution should be efficient enough to handle this size."
    },
    {
      "content": "Remember that all restaurant IDs are distinct, which simplifies the sorting process since you don't have to worry about duplicate IDs affecting the order."
    },
    {
      "content": "Finally, when returning the result, ensure that you only return the IDs of the filtered and sorted restaurants, as specified in the problem statement. An example return statement could look like this: return [id1, id2, ...];"
    }
  ],
  "questionNotes": [
    "Input format: restaurants[i] = [id, rating, veganFriendly, price, distance]",
    "veganFriendly is 1 for true and 0 for false.",
    "Return an array of restaurant IDs sorted by rating (highest to lowest) and by ID (highest to lowest) for ties.",
    "Handle edge cases where no restaurants meet the criteria by returning an empty list.",
    "Constraints: 1 <= restaurants.length <= 10^4, 1 <= id, rating, price, distance <= 10^5."
  ]
}