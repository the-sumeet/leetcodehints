{
  "hints": [
    {
      "content": "Start by understanding what a semi-decreasing subarray is. A semi-decreasing subarray is one where each subsequent element is less than or equal to the previous one. For example, in [7, 6, 5], all elements follow this rule."
    },
    {
      "content": "Think about how you can traverse the array to identify these subarrays. You might want to use a loop to go through each element and compare it with the next one to check if it maintains the semi-decreasing property."
    },
    {
      "content": "Consider maintaining a counter to track the length of the current semi-decreasing subarray as you iterate through the array. Reset this counter whenever you find an element that breaks the semi-decreasing condition."
    },
    {
      "content": "You should also keep track of the maximum length of any semi-decreasing subarray found so far. This can be done by comparing the current length with a stored maximum length after each subarray ends."
    },
    {
      "content": "Be careful with the boundaries of the array. Ensure that when you are accessing the next element, you do not go out of bounds. This is particularly important when you are at the last element of the array."
    },
    {
      "content": "Consider edge cases such as an empty array or an array with only one element. What should your function return in these cases? Think about how your logic handles these scenarios."
    },
    {
      "content": "When you find a semi-decreasing subarray, you need to determine if its length is greater than the previously recorded maximum. If it is, update the maximum length accordingly."
    },
    {
      "content": "You might want to initialize your maximum length variable to 0 or 1, depending on whether you consider single elements as valid subarrays. Think about what makes sense for your implementation."
    },
    {
      "content": "As you implement your solution, remember to test it with various inputs, especially those with multiple semi-decreasing subarrays. For instance, in [7, 6, 5, 4, 3, 2, 1, 6], the longest is the first part."
    },
    {
      "content": "Finally, ensure your function returns the maximum length of the semi-decreasing subarrays found in the input array. You should be ready to write a return statement that outputs this value."
    }
  ],
  "questionNotes": [
    "The input is an array of integers.",
    "A semi-decreasing subarray is defined as one where each element is less than or equal to the previous element.",
    "You need to return the maximum length of all such subarrays.",
    "Consider edge cases such as empty arrays or arrays with one element."
  ]
}