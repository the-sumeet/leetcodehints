{
  "hints": [
    {
      "content": "Start by understanding the concept of Hexspeak. Hexspeak is a way of representing numbers using hexadecimal digits, specifically using the characters 0-9 and A-F. Your first step is to convert the given decimal number into its hexadecimal representation."
    },
    {
      "content": "Remember that hexadecimal is base 16. Each digit in a hexadecimal number can represent values from 0 to 15. Familiarize yourself with how to convert decimal numbers to hexadecimal, which can be done using division by 16."
    },
    {
      "content": "When converting to hexadecimal, pay attention to the characters you will use. In Hexspeak, only the digits 0, 1, and the letters A, B, C, D, E, F are valid. Make sure to filter out any other characters."
    },
    {
      "content": "Consider how you will handle numbers that contain digits outside of the valid Hexspeak range. For example, if the decimal number contains digits like 2, 3, 4, etc., you will need to return an appropriate response."
    },
    {
      "content": "Think about edge cases, such as the smallest and largest possible decimal numbers. For example, what happens when the input is '0'? How should you handle negative numbers or very large numbers?"
    },
    {
      "content": "After converting the number to hexadecimal and filtering it, you'll need to return the result in a specific format. Make sure to check if the output should be uppercase or lowercase, as Hexspeak typically uses uppercase letters."
    },
    {
      "content": "Take care of the return type. If the conversion results in an invalid Hexspeak representation, you should return a specific string (like 'ERROR') to indicate this. Define what that string should be."
    },
    {
      "content": "Consider using built-in functions for conversion, but ensure you understand how they work. For example, in Python, you can use `hex()` to convert a number to hexadecimal, but remember to manipulate the output to fit Hexspeak rules."
    },
    {
      "content": "Before finalizing your solution, write test cases that cover various scenarios, including edge cases. Make sure to test with numbers that yield valid Hexspeak and those that do not."
    },
    {
      "content": "Finally, implement the logic to convert the decimal number to hexadecimal, filter out invalid characters, and format the output correctly. Ensure your function handles all edge cases gracefully."
    }
  ],
  "questionNotes": [
    "Input is a string representing a decimal number.",
    "Output should be a string in Hexspeak format or 'ERROR' for invalid cases.",
    "Valid Hexspeak characters are 0, 1, A, B, C, D, E, F.",
    "Consider edge cases like '0', negative numbers, and large inputs."
  ]
}