{
  "hints": [
    {
      "content": "Start by defining a function named `expect` that takes a parameter `val`. This function will return an object containing the methods `toBe` and `notToBe`."
    },
    {
      "content": "In the `toBe` method, you will need to accept another parameter. This method should compare the initial `val` with the new parameter using the strict equality operator (`===`)."
    },
    {
      "content": "Remember to handle the case where the values are equal. If they are, return an object with a key `value` set to `true`."
    },
    {
      "content": "If the values are not equal in the `toBe` method, you should throw an error with the message 'Not Equal'. Use `throw new Error('Not Equal')` to accomplish this."
    },
    {
      "content": "Now, implement the `notToBe` method in a similar way. This method should check if the values are not equal using the strict inequality operator (`!==`)."
    },
    {
      "content": "For the `notToBe` method, if the values are indeed not equal, return an object with a key `value` set to `true`."
    },
    {
      "content": "If the values are equal in the `notToBe` method, you need to throw an error with the message 'Equal'."
    },
    {
      "content": "Consider edge cases such as comparing `undefined` with `null`, or comparing objects. Remember that `===` and `!==` will behave differently for these cases."
    },
    {
      "content": "Make sure your function handles various data types, including numbers, strings, and objects. Test with values like `0`, `false`, and `''` to see how they compare."
    },
    {
      "content": "Your final implementation should look like this: `expect(val).toBe(otherVal)` should return an object with `value: true` or throw an error, and `expect(val).notToBe(otherVal)` should do the same with its respective conditions."
    }
  ],
  "questionNotes": [
    "The `toBe` method checks for strict equality (===).",
    "The `notToBe` method checks for strict inequality (!==).",
    "Both methods should return an object with either a `value` key or throw an error.",
    "Ensure to handle edge cases like comparing different data types."
  ]
}