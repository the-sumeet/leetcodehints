{
  "hints": [
    {
      "content": "Start by understanding how to identify duplicate rows in a DataFrame. In this case, you need to focus on the 'email' column to find duplicates."
    },
    {
      "content": "Remember that in a DataFrame, you can use methods to filter or manipulate the data. Think about how you might isolate the rows with duplicate emails."
    },
    {
      "content": "Consider using a method that allows you to keep the first occurrence of each duplicate. This will help you retain the row with the lowest 'customer_id' for each unique email."
    },
    {
      "content": "You might want to look into a function that can drop duplicates in a DataFrame. This function typically has parameters to specify which columns to check for duplicates."
    },
    {
      "content": "When using the function to drop duplicates, ensure you specify the correct column. In this case, the column to focus on is 'email'."
    },
    {
      "content": "Think about the order of the DataFrame. The first occurrence is determined by the order of rows as they appear. Make sure your solution respects this order."
    },
    {
      "content": "Consider how the DataFrame is indexed. After dropping duplicates, you might want to reset the index to maintain a clean DataFrame structure."
    },
    {
      "content": "Check if the function you are using has an option to keep the first occurrence. This is crucial for your requirement to retain the first entry for each email."
    },
    {
      "content": "Make sure to test your solution with edge cases, such as all unique emails or all duplicates. This will ensure your approach is robust."
    },
    {
      "content": "You are almost there! Use the `drop_duplicates()` method on the DataFrame, specifying 'email' as the subset and setting 'keep' to 'first'. Don't forget to handle the index if needed."
    }
  ],
  "questionNotes": [
    "Focus on the 'email' column to identify duplicates.",
    "Retain the first occurrence based on the order of rows.",
    "Ensure to reset the index if necessary after dropping duplicates.",
    "Test with edge cases: all unique emails or all duplicates."
  ]
}