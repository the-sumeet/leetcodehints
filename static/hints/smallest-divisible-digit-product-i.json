{
  "hints": [
    {
      "content": "Start by understanding the problem requirements. You need to find the smallest number greater than or equal to `n` whose digits' product is divisible by `t`. Make sure you are clear on the definitions of 'digits' and 'product'."
    },
    {
      "content": "Consider how to calculate the product of digits for a given number. For example, for the number 16, the product is 1 * 6 = 6. Think about how you can extract each digit from a number."
    },
    {
      "content": "You will need to loop through numbers starting from `n`. Think about how you can increment a number and check its digit product. A simple way to do this is using a while loop."
    },
    {
      "content": "Remember to check the product of the digits for each number you evaluate. If the product is zero, it is divisible by any `t`. Consider how you will handle this case in your logic."
    },
    {
      "content": "When checking if the product is divisible by `t`, use the modulus operator. For example, if `product % t == 0`, then the product is divisible by `t`. This will be a key condition in your checks."
    },
    {
      "content": "Make sure to handle edge cases, such as when `n` is already a number whose digit product is divisible by `t`. Your loop should still check this condition before incrementing."
    },
    {
      "content": "Consider the constraints given in the problem. Since `n` can be at most 100, your loop will not need to run indefinitely. Think about how this can simplify your implementation."
    },
    {
      "content": "As you implement your solution, keep track of how you are extracting digits. You can convert the number to a string and iterate over each character, or use arithmetic operations to isolate each digit."
    },
    {
      "content": "When you find a number whose digit product is divisible by `t`, make sure to return that number immediately. You can use a return statement inside your loop for this purpose."
    },
    {
      "content": "Finally, ensure your code is clean and handles all possible inputs as described in the problem statement. Test your solution with the provided examples and additional test cases to ensure accuracy."
    }
  ],
  "questionNotes": [
    "1 <= n <= 100",
    "1 <= t <= 10",
    "Return the smallest number >= n whose digit product is divisible by t.",
    "The product of digits can be zero, which is divisible by any t."
  ]
}